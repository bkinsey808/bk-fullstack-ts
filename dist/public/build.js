System.registerDynamic("components/app.js", ["npm:angular2@2.0.0-alpha.35/angular2.js", "components/child/child.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var angular2_1 = require("npm:angular2@2.0.0-alpha.35/angular2.js");
  var child_1 = require("components/child/child.js");
  var App = (function() {
    function App() {
      this.name = 'World';
    }
    App = __decorate([angular2_1.Component({selector: 'app'}), angular2_1.View({
      templateUrl: 'components/app.html',
      directives: [child_1.Child]
    }), __metadata('design:paramtypes', [])], App);
    return App;
  })();
  angular2_1.bootstrap(App);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("components/child/child.js", ["npm:angular2@2.0.0-alpha.35/angular2.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var angular2_1 = require("npm:angular2@2.0.0-alpha.35/angular2.js");
  var Child = (function() {
    function Child() {
      this.name = 'YAY!!!!!';
      this.books = [];
    }
    Child = __decorate([angular2_1.Component({selector: 'child'}), angular2_1.View({templateUrl: 'components/child/child.html'}), __metadata('design:paramtypes', [])], Child);
    return Child;
  })();
  exports.Child = Child;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/angular2.js", ["npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/change_detection.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/directives.js", "npm:angular2@2.0.0-alpha.35/forms.js", "npm:angular2@2.0.0-alpha.35/render.js", "npm:angular2@2.0.0-alpha.35/profile.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  __export(require("npm:angular2@2.0.0-alpha.35/metadata.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/change_detection.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/core.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/di.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/directives.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/forms.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/render.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/profile.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/metadata.js", ["npm:angular2@2.0.0-alpha.35/src/core/metadata.js", "npm:angular2@2.0.0-alpha.35/src/util/decorators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  exports.ComponentMetadata = metadata_1.ComponentMetadata;
  exports.DirectiveMetadata = metadata_1.DirectiveMetadata;
  exports.PipeMetadata = metadata_1.PipeMetadata;
  exports.LifecycleEvent = metadata_1.LifecycleEvent;
  exports.ViewMetadata = metadata_1.ViewMetadata;
  exports.ViewEncapsulation = metadata_1.ViewEncapsulation;
  exports.QueryMetadata = metadata_1.QueryMetadata;
  exports.AttributeMetadata = metadata_1.AttributeMetadata;
  exports.Attribute = metadata_1.Attribute;
  exports.Component = metadata_1.Component;
  exports.Directive = metadata_1.Directive;
  exports.View = metadata_1.View;
  exports.Query = metadata_1.Query;
  exports.ViewQuery = metadata_1.ViewQuery;
  exports.Pipe = metadata_1.Pipe;
  var decorators_1 = require("npm:angular2@2.0.0-alpha.35/src/util/decorators.js");
  exports.Class = decorators_1.Class;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/change_detection.js", ["npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
  exports.CHECK_ONCE = change_detection_1.CHECK_ONCE;
  exports.CHECK_ALWAYS = change_detection_1.CHECK_ALWAYS;
  exports.DETACHED = change_detection_1.DETACHED;
  exports.CHECKED = change_detection_1.CHECKED;
  exports.ON_PUSH = change_detection_1.ON_PUSH;
  exports.DEFAULT = change_detection_1.DEFAULT;
  exports.ExpressionChangedAfterItHasBeenCheckedException = change_detection_1.ExpressionChangedAfterItHasBeenCheckedException;
  exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
  exports.Locals = change_detection_1.Locals;
  exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
  exports.WrappedValue = change_detection_1.WrappedValue;
  exports.IterableDiffers = change_detection_1.IterableDiffers;
  exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/core.js", ["npm:angular2@2.0.0-alpha.35/src/core/application_tokens.js", "npm:angular2@2.0.0-alpha.35/src/core/application_common.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js", "npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/query_list.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js", "npm:angular2@2.0.0-alpha.35/src/core/life_cycle/life_cycle.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_container_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js", "npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var application_tokens_1 = require("npm:angular2@2.0.0-alpha.35/src/core/application_tokens.js");
  exports.APP_COMPONENT = application_tokens_1.APP_COMPONENT;
  var application_common_1 = require("npm:angular2@2.0.0-alpha.35/src/core/application_common.js");
  exports.ApplicationRef = application_common_1.ApplicationRef;
  exports.bootstrap = application_common_1.commonBootstrap;
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.Type = lang_1.Type;
  var app_root_url_1 = require("npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js");
  exports.AppRootUrl = app_root_url_1.AppRootUrl;
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js");
  exports.UrlResolver = url_resolver_1.UrlResolver;
  var component_url_mapper_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js");
  exports.ComponentUrlMapper = component_url_mapper_1.ComponentUrlMapper;
  var directive_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js");
  exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
  var compiler_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js");
  exports.Compiler = compiler_1.Compiler;
  var view_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js");
  exports.AppViewManager = view_manager_1.AppViewManager;
  var query_list_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/query_list.js");
  exports.QueryList = query_list_1.QueryList;
  var dynamic_component_loader_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js");
  exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
  var life_cycle_1 = require("npm:angular2@2.0.0-alpha.35/src/core/life_cycle/life_cycle.js");
  exports.LifeCycle = life_cycle_1.LifeCycle;
  var element_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js");
  exports.ElementRef = element_ref_1.ElementRef;
  var template_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js");
  exports.TemplateRef = template_ref_1.TemplateRef;
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
  exports.ViewRef = view_ref_1.ViewRef;
  exports.ProtoViewRef = view_ref_1.ProtoViewRef;
  var view_container_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_container_ref.js");
  exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
  var dynamic_component_loader_2 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js");
  exports.ComponentRef = dynamic_component_loader_2.ComponentRef;
  var ng_zone_1 = require("npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js");
  exports.NgZone = ng_zone_1.NgZone;
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  exports.Observable = async_1.Observable;
  exports.EventEmitter = async_1.EventEmitter;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/di.js", ["npm:angular2@2.0.0-alpha.35/src/di/metadata.js", "npm:angular2@2.0.0-alpha.35/src/di/decorators.js", "npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js", "npm:angular2@2.0.0-alpha.35/src/di/injector.js", "npm:angular2@2.0.0-alpha.35/src/di/binding.js", "npm:angular2@2.0.0-alpha.35/src/di/key.js", "npm:angular2@2.0.0-alpha.35/src/di/exceptions.js", "npm:angular2@2.0.0-alpha.35/src/di/opaque_token.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/di/metadata.js");
  exports.InjectMetadata = metadata_1.InjectMetadata;
  exports.OptionalMetadata = metadata_1.OptionalMetadata;
  exports.InjectableMetadata = metadata_1.InjectableMetadata;
  exports.SelfMetadata = metadata_1.SelfMetadata;
  exports.HostMetadata = metadata_1.HostMetadata;
  exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
  exports.DependencyMetadata = metadata_1.DependencyMetadata;
  __export(require("npm:angular2@2.0.0-alpha.35/src/di/decorators.js"));
  var forward_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js");
  exports.forwardRef = forward_ref_1.forwardRef;
  exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
  var injector_1 = require("npm:angular2@2.0.0-alpha.35/src/di/injector.js");
  exports.Injector = injector_1.Injector;
  exports.ProtoInjector = injector_1.ProtoInjector;
  exports.BindingWithVisibility = injector_1.BindingWithVisibility;
  exports.Visibility = injector_1.Visibility;
  exports.UNDEFINED = injector_1.UNDEFINED;
  var binding_1 = require("npm:angular2@2.0.0-alpha.35/src/di/binding.js");
  exports.Binding = binding_1.Binding;
  exports.BindingBuilder = binding_1.BindingBuilder;
  exports.ResolvedBinding = binding_1.ResolvedBinding;
  exports.Dependency = binding_1.Dependency;
  exports.bind = binding_1.bind;
  var key_1 = require("npm:angular2@2.0.0-alpha.35/src/di/key.js");
  exports.Key = key_1.Key;
  exports.KeyRegistry = key_1.KeyRegistry;
  exports.TypeLiteral = key_1.TypeLiteral;
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.35/src/di/exceptions.js");
  exports.NoBindingError = exceptions_1.NoBindingError;
  exports.AbstractBindingError = exceptions_1.AbstractBindingError;
  exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
  exports.InstantiationError = exceptions_1.InstantiationError;
  exports.InvalidBindingError = exceptions_1.InvalidBindingError;
  exports.NoAnnotationError = exceptions_1.NoAnnotationError;
  exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
  var opaque_token_1 = require("npm:angular2@2.0.0-alpha.35/src/di/opaque_token.js");
  exports.OpaqueToken = opaque_token_1.OpaqueToken;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/directives.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_class.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_for.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_if.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_non_bindable.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_switch.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_class.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_for.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_if.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_non_bindable.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_style.js", "npm:angular2@2.0.0-alpha.35/src/directives/ng_switch.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ng_class_1 = require("npm:angular2@2.0.0-alpha.35/src/directives/ng_class.js");
  var ng_for_1 = require("npm:angular2@2.0.0-alpha.35/src/directives/ng_for.js");
  var ng_if_1 = require("npm:angular2@2.0.0-alpha.35/src/directives/ng_if.js");
  var ng_non_bindable_1 = require("npm:angular2@2.0.0-alpha.35/src/directives/ng_non_bindable.js");
  var ng_switch_1 = require("npm:angular2@2.0.0-alpha.35/src/directives/ng_switch.js");
  __export(require("npm:angular2@2.0.0-alpha.35/src/directives/ng_class.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/directives/ng_for.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/directives/ng_if.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/directives/ng_non_bindable.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/directives/ng_style.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/directives/ng_switch.js"));
  exports.CORE_DIRECTIVES = lang_1.CONST_EXPR([ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_non_bindable_1.NgNonBindable, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/forms.js", ["npm:angular2@2.0.0-alpha.35/src/forms/model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives.js", "npm:angular2@2.0.0-alpha.35/src/forms/validators.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js", "npm:angular2@2.0.0-alpha.35/src/forms/form_builder.js", "npm:angular2@2.0.0-alpha.35/src/forms/form_builder.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/model.js");
  exports.AbstractControl = model_1.AbstractControl;
  exports.Control = model_1.Control;
  exports.ControlGroup = model_1.ControlGroup;
  exports.ControlArray = model_1.ControlArray;
  var abstract_control_directive_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js");
  exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
  var control_container_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js");
  exports.ControlContainer = control_container_1.ControlContainer;
  var ng_control_name_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js");
  exports.NgControlName = ng_control_name_1.NgControlName;
  var ng_form_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js");
  exports.NgFormControl = ng_form_control_1.NgFormControl;
  var ng_model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js");
  exports.NgModel = ng_model_1.NgModel;
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  exports.NgControl = ng_control_1.NgControl;
  var ng_control_group_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js");
  exports.NgControlGroup = ng_control_group_1.NgControlGroup;
  var ng_form_model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js");
  exports.NgFormModel = ng_form_model_1.NgFormModel;
  var ng_form_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js");
  exports.NgForm = ng_form_1.NgForm;
  var default_value_accessor_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js");
  exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
  var checkbox_value_accessor_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js");
  exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
  var select_control_value_accessor_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js");
  exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
  exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
  var directives_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives.js");
  exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/validators.js");
  exports.Validators = validators_1.Validators;
  var validators_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js");
  exports.NgValidator = validators_2.NgValidator;
  exports.NgRequiredValidator = validators_2.NgRequiredValidator;
  var form_builder_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/form_builder.js");
  exports.FormBuilder = form_builder_1.FormBuilder;
  var form_builder_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/form_builder.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.FORM_BINDINGS = lang_1.CONST_EXPR([form_builder_2.FormBuilder]);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/render.js", ["npm:angular2@2.0.0-alpha.35/src/render/render.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var render_1 = require("npm:angular2@2.0.0-alpha.35/src/render/render.js");
  exports.RenderDirectiveMetadata = render_1.RenderDirectiveMetadata;
  exports.DomRenderer = render_1.DomRenderer;
  exports.Renderer = render_1.Renderer;
  exports.RenderViewRef = render_1.RenderViewRef;
  exports.RenderProtoViewRef = render_1.RenderProtoViewRef;
  exports.RenderFragmentRef = render_1.RenderFragmentRef;
  exports.RenderViewWithFragments = render_1.RenderViewWithFragments;
  exports.ViewDefinition = render_1.ViewDefinition;
  exports.DOCUMENT = render_1.DOCUMENT;
  exports.APP_ID = render_1.APP_ID;
  exports.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES = render_1.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES;
  exports.MAX_IN_MEMORY_ELEMENTS_PER_TEMPLATE = render_1.MAX_IN_MEMORY_ELEMENTS_PER_TEMPLATE;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/profile.js", ["npm:angular2@2.0.0-alpha.35/src/profile/profile.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
  exports.wtfCreateScope = profile_1.wtfCreateScope;
  exports.wtfLeave = profile_1.wtfLeave;
  exports.wtfStartTimeRange = profile_1.wtfStartTimeRange;
  exports.wtfEndTimeRange = profile_1.wtfEndTimeRange;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/util/decorators.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  function extractAnnotation(annotation) {
    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
      annotation = annotation.annotation;
    }
    return annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
      throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
    }
    if (lang_1.isFunction(fnOrArray)) {
      return fnOrArray;
    } else if (fnOrArray instanceof Array) {
      var annotations = fnOrArray;
      var fn = fnOrArray[fnOrArray.length - 1];
      if (!lang_1.isFunction(fn)) {
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
      }
      var annoLength = annotations.length - 1;
      if (annoLength != fn.length) {
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
      }
      var paramsAnnotations = [];
      for (var i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (annotation instanceof Array) {
          for (var j = 0; j < annotation.length; j++) {
            paramAnnotations.push(extractAnnotation(annotation[j]));
          }
        } else if (lang_1.isFunction(annotation)) {
          paramAnnotations.push(extractAnnotation(annotation));
        } else {
          paramAnnotations.push(annotation);
        }
      }
      Reflect.defineMetadata('parameters', paramsAnnotations, fn);
      return fn;
    } else {
      throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
    }
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
      if (lang_1.isFunction(clsDef.extends)) {
        constructor.prototype = proto = Object.create(clsDef.extends.prototype);
      } else {
        throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
      }
    }
    for (var key in clsDef) {
      if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
        proto[key] = applyParams(clsDef[key], key);
      }
    }
    if (this && this.annotations instanceof Array) {
      Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    return constructor;
  }
  exports.Class = Class;
  var Reflect = lang_1.global.Reflect;
  if (!(Reflect && Reflect.getMetadata)) {
    throw 'reflect-metadata shim is required when using class decorators';
  }
  function makeDecorator(annotationCls, chainFn) {
    if (chainFn === void 0) {
      chainFn = null;
    }
    function DecoratorFactory(objOrType) {
      var annotationInstance = new annotationCls(objOrType);
      if (this instanceof annotationCls) {
        return annotationInstance;
      } else {
        var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var TypeDecorator = function TypeDecorator(cls) {
          var annotations = Reflect.getOwnMetadata('annotations', cls);
          annotations = annotations || [];
          annotations.push(annotationInstance);
          Reflect.defineMetadata('annotations', annotations, cls);
          return cls;
        };
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn)
          chainFn(TypeDecorator);
        return TypeDecorator;
      }
    }
    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
    return DecoratorFactory;
  }
  exports.makeDecorator = makeDecorator;
  function makeParamDecorator(annotationCls) {
    function ParamDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var annotationInstance = Object.create(annotationCls.prototype);
      annotationCls.apply(annotationInstance, args);
      if (this instanceof annotationCls) {
        return annotationInstance;
      } else {
        ParamDecorator.annotation = annotationInstance;
        return ParamDecorator;
      }
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getMetadata('parameters', cls);
        parameters = parameters || [];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        parameters[index] = parameters[index] || [];
        var annotationsForParam = parameters[index];
        annotationsForParam.push(annotationInstance);
        Reflect.defineMetadata('parameters', parameters, cls);
        return cls;
      }
    }
    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    return ParamDecoratorFactory;
  }
  exports.makeParamDecorator = makeParamDecorator;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", ["npm:angular2@2.0.0-alpha.35/src/change_detection/jit_proto_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/pregen_proto_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/differs/iterable_differs.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/differs/default_iterable_differ.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/differs/keyvalue_differs.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/differs/default_keyvalue_differ.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/lexer.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/parser.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/locals.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/exceptions.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/binding_record.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/directive_record.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/dynamic_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detector_ref.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/differs/iterable_differs.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/differs/keyvalue_differs.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var jit_proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/jit_proto_change_detector.js");
  var pregen_proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/pregen_proto_change_detector.js");
  var proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js");
  var iterable_differs_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/iterable_differs.js");
  var default_iterable_differ_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/default_iterable_differ.js");
  var keyvalue_differs_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/keyvalue_differs.js");
  var default_keyvalue_differ_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/default_keyvalue_differ.js");
  var interfaces_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ast_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js");
  exports.ASTWithSource = ast_1.ASTWithSource;
  exports.AST = ast_1.AST;
  exports.AstTransformer = ast_1.AstTransformer;
  exports.PropertyRead = ast_1.PropertyRead;
  exports.LiteralArray = ast_1.LiteralArray;
  exports.ImplicitReceiver = ast_1.ImplicitReceiver;
  var lexer_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/lexer.js");
  exports.Lexer = lexer_1.Lexer;
  var parser_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/parser.js");
  exports.Parser = parser_1.Parser;
  var locals_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/locals.js");
  exports.Locals = locals_1.Locals;
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/exceptions.js");
  exports.DehydratedException = exceptions_1.DehydratedException;
  exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
  exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
  var interfaces_2 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js");
  exports.ChangeDetection = interfaces_2.ChangeDetection;
  exports.ChangeDetectorDefinition = interfaces_2.ChangeDetectorDefinition;
  exports.DebugContext = interfaces_2.DebugContext;
  var constants_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js");
  exports.CHECK_ONCE = constants_1.CHECK_ONCE;
  exports.CHECK_ALWAYS = constants_1.CHECK_ALWAYS;
  exports.DETACHED = constants_1.DETACHED;
  exports.CHECKED = constants_1.CHECKED;
  exports.ON_PUSH = constants_1.ON_PUSH;
  exports.DEFAULT = constants_1.DEFAULT;
  var proto_change_detector_2 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js");
  exports.DynamicProtoChangeDetector = proto_change_detector_2.DynamicProtoChangeDetector;
  var binding_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/binding_record.js");
  exports.BindingRecord = binding_record_1.BindingRecord;
  var directive_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/directive_record.js");
  exports.DirectiveIndex = directive_record_1.DirectiveIndex;
  exports.DirectiveRecord = directive_record_1.DirectiveRecord;
  var dynamic_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/dynamic_change_detector.js");
  exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
  var change_detector_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detector_ref.js");
  exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
  var iterable_differs_2 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/iterable_differs.js");
  exports.IterableDiffers = iterable_differs_2.IterableDiffers;
  var keyvalue_differs_2 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/keyvalue_differs.js");
  exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js");
  exports.WrappedValue = change_detection_util_1.WrappedValue;
  exports.keyValDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_keyvalue_differ_1.DefaultKeyValueDifferFactory())]);
  exports.iterableDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_iterable_differ_1.DefaultIterableDifferFactory())]);
  exports.defaultIterableDiffers = lang_1.CONST_EXPR(new iterable_differs_1.IterableDiffers(exports.iterableDiff));
  exports.defaultKeyValueDiffers = lang_1.CONST_EXPR(new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff));
  exports.preGeneratedProtoDetectors = {};
  exports.PROTO_CHANGE_DETECTOR = lang_1.CONST_EXPR(new di_1.OpaqueToken('ProtoChangeDetectors'));
  var PreGeneratedChangeDetection = (function(_super) {
    __extends(PreGeneratedChangeDetection, _super);
    function PreGeneratedChangeDetection(protoChangeDetectorsForTest) {
      _super.call(this);
      this._dynamicChangeDetection = new DynamicChangeDetection();
      this._protoChangeDetectorFactories = lang_1.isPresent(protoChangeDetectorsForTest) ? protoChangeDetectorsForTest : exports.preGeneratedProtoDetectors;
    }
    PreGeneratedChangeDetection.isSupported = function() {
      return pregen_proto_change_detector_1.PregenProtoChangeDetector.isSupported();
    };
    PreGeneratedChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      var id = definition.id;
      if (collection_1.StringMapWrapper.contains(this._protoChangeDetectorFactories, id)) {
        return collection_1.StringMapWrapper.get(this._protoChangeDetectorFactories, id)(definition);
      }
      return this._dynamicChangeDetection.createProtoChangeDetector(definition);
    };
    PreGeneratedChangeDetection = __decorate([di_1.Injectable(), __param(0, di_1.Inject(exports.PROTO_CHANGE_DETECTOR)), __param(0, di_1.Optional()), __metadata('design:paramtypes', [Object])], PreGeneratedChangeDetection);
    return PreGeneratedChangeDetection;
  })(interfaces_1.ChangeDetection);
  exports.PreGeneratedChangeDetection = PreGeneratedChangeDetection;
  var DynamicChangeDetection = (function(_super) {
    __extends(DynamicChangeDetection, _super);
    function DynamicChangeDetection() {
      _super.apply(this, arguments);
    }
    DynamicChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      return new proto_change_detector_1.DynamicProtoChangeDetector(definition);
    };
    DynamicChangeDetection = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], DynamicChangeDetection);
    return DynamicChangeDetection;
  })(interfaces_1.ChangeDetection);
  exports.DynamicChangeDetection = DynamicChangeDetection;
  var JitChangeDetection = (function(_super) {
    __extends(JitChangeDetection, _super);
    function JitChangeDetection() {
      _super.apply(this, arguments);
    }
    JitChangeDetection.isSupported = function() {
      return jit_proto_change_detector_1.JitProtoChangeDetector.isSupported();
    };
    JitChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      return new jit_proto_change_detector_1.JitProtoChangeDetector(definition);
    };
    JitChangeDetection = __decorate([di_1.Injectable(), lang_1.CONST(), __metadata('design:paramtypes', [])], JitChangeDetection);
    return JitChangeDetection;
  })(interfaces_1.ChangeDetection);
  exports.JitChangeDetection = JitChangeDetection;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/application_tokens.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.APP_COMPONENT_REF_PROMISE = lang_1.CONST_EXPR(new di_1.OpaqueToken('Promise<ComponentRef>'));
  exports.APP_COMPONENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppComponent'));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/metadata.js", ["npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js", "npm:angular2@2.0.0-alpha.35/src/util/decorators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var di_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js");
  exports.QueryMetadata = di_1.QueryMetadata;
  exports.ViewQueryMetadata = di_1.ViewQueryMetadata;
  exports.AttributeMetadata = di_1.AttributeMetadata;
  var directives_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js");
  exports.ComponentMetadata = directives_1.ComponentMetadata;
  exports.DirectiveMetadata = directives_1.DirectiveMetadata;
  exports.PipeMetadata = directives_1.PipeMetadata;
  exports.LifecycleEvent = directives_1.LifecycleEvent;
  var view_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js");
  exports.ViewMetadata = view_1.ViewMetadata;
  exports.ViewEncapsulation = view_1.ViewEncapsulation;
  var di_2 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js");
  var directives_2 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js");
  var view_2 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js");
  var decorators_1 = require("npm:angular2@2.0.0-alpha.35/src/util/decorators.js");
  exports.Component = decorators_1.makeDecorator(directives_2.ComponentMetadata, function(fn) {
    return fn.View = exports.View;
  });
  exports.Directive = decorators_1.makeDecorator(directives_2.DirectiveMetadata);
  exports.View = decorators_1.makeDecorator(view_2.ViewMetadata, function(fn) {
    return fn.View = exports.View;
  });
  exports.Attribute = decorators_1.makeParamDecorator(di_2.AttributeMetadata);
  exports.Query = decorators_1.makeParamDecorator(di_2.QueryMetadata);
  exports.ViewQuery = decorators_1.makeParamDecorator(di_2.ViewQueryMetadata);
  exports.Pipe = decorators_1.makeDecorator(directives_2.PipeMetadata);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/application_common.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/browser_adapter.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", "npm:angular2@2.0.0-alpha.35/pipes.js", "npm:angular2@2.0.0-alpha.35/src/core/exception_handler.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_inliner.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/pipe_resolver.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js", "npm:angular2@2.0.0-alpha.35/src/core/life_cycle/life_cycle.js", "npm:angular2@2.0.0-alpha.35/src/render/xhr.js", "npm:angular2@2.0.0-alpha.35/src/render/xhr_impl.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/events/key_events.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/events/hammer_gestures.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js", "npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js", "npm:angular2@2.0.0-alpha.35/src/services/anchor_based_app_root_url.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js", "npm:angular2@2.0.0-alpha.35/src/core/testability/testability.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_pool.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager_utils.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_listener.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/proto_view_factory.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/render.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/schema/dom_element_schema_registry.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/application_tokens.js", "npm:angular2@2.0.0-alpha.35/src/profile/wtf_init.js", "npm:angular2@2.0.0-alpha.35/src/core/platform_bindings.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var browser_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/browser_adapter.js");
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
    var compiler_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js");
    var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
    var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
    var pipes_1 = require("npm:angular2@2.0.0-alpha.35/pipes.js");
    var exception_handler_1 = require("npm:angular2@2.0.0-alpha.35/src/core/exception_handler.js");
    var view_loader_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js");
    var style_url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js");
    var style_inliner_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_inliner.js");
    var view_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_resolver.js");
    var directive_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js");
    var pipe_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/pipe_resolver.js");
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
    var ng_zone_1 = require("npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js");
    var life_cycle_1 = require("npm:angular2@2.0.0-alpha.35/src/core/life_cycle/life_cycle.js");
    var xhr_1 = require("npm:angular2@2.0.0-alpha.35/src/render/xhr.js");
    var xhr_impl_1 = require("npm:angular2@2.0.0-alpha.35/src/render/xhr_impl.js");
    var event_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js");
    var key_events_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/key_events.js");
    var hammer_gestures_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/hammer_gestures.js");
    var component_url_mapper_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js");
    var url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js");
    var app_root_url_1 = require("npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js");
    var anchor_based_app_root_url_1 = require("npm:angular2@2.0.0-alpha.35/src/services/anchor_based_app_root_url.js");
    var dynamic_component_loader_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js");
    var testability_1 = require("npm:angular2@2.0.0-alpha.35/src/core/testability/testability.js");
    var view_pool_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_pool.js");
    var view_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js");
    var view_manager_utils_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager_utils.js");
    var view_listener_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_listener.js");
    var proto_view_factory_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/proto_view_factory.js");
    var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
    var render_1 = require("npm:angular2@2.0.0-alpha.35/src/render/render.js");
    var element_schema_registry_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js");
    var dom_element_schema_registry_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/schema/dom_element_schema_registry.js");
    var shared_styles_host_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js");
    var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
    var application_tokens_1 = require("npm:angular2@2.0.0-alpha.35/src/core/application_tokens.js");
    var wtf_init_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/wtf_init.js");
    var platform_bindings_1 = require("npm:angular2@2.0.0-alpha.35/src/core/platform_bindings.js");
    var _rootInjector;
    var _rootBindings = [di_1.bind(reflection_1.Reflector).toValue(reflection_1.reflector), testability_1.TestabilityRegistry];
    function _injectorBindings(appComponentType) {
      var bestChangeDetection = change_detection_1.DynamicChangeDetection;
      if (change_detection_1.PreGeneratedChangeDetection.isSupported()) {
        bestChangeDetection = change_detection_1.PreGeneratedChangeDetection;
      } else if (change_detection_1.JitChangeDetection.isSupported()) {
        bestChangeDetection = change_detection_1.JitChangeDetection;
      }
      return [di_1.bind(render_1.DOCUMENT).toValue(dom_adapter_1.DOM.defaultDoc()), di_1.bind(render_1.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES).toValue(false), di_1.bind(application_tokens_1.APP_COMPONENT).toValue(appComponentType), di_1.bind(application_tokens_1.APP_COMPONENT_REF_PROMISE).toFactory(function(dynamicComponentLoader, injector, testability, registry) {
        return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector).then(function(componentRef) {
          registry.registerApplication(componentRef.location.nativeElement, testability);
          return componentRef;
        });
      }, [dynamic_component_loader_1.DynamicComponentLoader, di_1.Injector, testability_1.Testability, testability_1.TestabilityRegistry]), di_1.bind(appComponentType).toFactory(function(p) {
        return p.then(function(ref) {
          return ref.instance;
        });
      }, [application_tokens_1.APP_COMPONENT_REF_PROMISE]), di_1.bind(life_cycle_1.LifeCycle).toFactory(function(exceptionHandler) {
        return new life_cycle_1.LifeCycle(null, lang_1.assertionsEnabled());
      }, [exception_handler_1.ExceptionHandler]), di_1.bind(event_manager_1.EventManager).toFactory(function(ngZone) {
        var plugins = [new hammer_gestures_1.HammerGesturesPlugin(), new key_events_1.KeyEventsPlugin(), new event_manager_1.DomEventsPlugin()];
        return new event_manager_1.EventManager(plugins, ngZone);
      }, [ng_zone_1.NgZone]), render_1.DomRenderer, di_1.bind(api_1.Renderer).toAlias(render_1.DomRenderer), render_1.APP_ID_RANDOM_BINDING, render_1.TemplateCloner, di_1.bind(render_1.MAX_IN_MEMORY_ELEMENTS_PER_TEMPLATE).toValue(20), render_1.DefaultDomCompiler, di_1.bind(element_schema_registry_1.ElementSchemaRegistry).toValue(new dom_element_schema_registry_1.DomElementSchemaRegistry()), di_1.bind(api_1.RenderCompiler).toAlias(render_1.DefaultDomCompiler), shared_styles_host_1.DomSharedStylesHost, di_1.bind(shared_styles_host_1.SharedStylesHost).toAlias(shared_styles_host_1.DomSharedStylesHost), proto_view_factory_1.ProtoViewFactory, view_pool_1.AppViewPool, di_1.bind(view_pool_1.APP_VIEW_POOL_CAPACITY).toValue(10000), view_manager_1.AppViewManager, view_manager_utils_1.AppViewManagerUtils, view_listener_1.AppViewListener, compiler_1.Compiler, compiler_1.CompilerCache, view_resolver_1.ViewResolver, pipes_1.DEFAULT_PIPES, di_1.bind(change_detection_1.IterableDiffers).toValue(change_detection_1.defaultIterableDiffers), di_1.bind(change_detection_1.KeyValueDiffers).toValue(change_detection_1.defaultKeyValueDiffers), di_1.bind(change_detection_1.ChangeDetection).toClass(bestChangeDetection), view_loader_1.ViewLoader, directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver, change_detection_1.Parser, change_detection_1.Lexer, platform_bindings_1.EXCEPTION_BINDING, di_1.bind(xhr_1.XHR).toValue(new xhr_impl_1.XHRImpl()), component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, style_url_resolver_1.StyleUrlResolver, style_inliner_1.StyleInliner, dynamic_component_loader_1.DynamicComponentLoader, testability_1.Testability, anchor_based_app_root_url_1.AnchorBasedAppRootUrl, di_1.bind(app_root_url_1.AppRootUrl).toAlias(anchor_based_app_root_url_1.AnchorBasedAppRootUrl)];
    }
    function createNgZone() {
      return new ng_zone_1.NgZone({enableLongStackTrace: lang_1.assertionsEnabled()});
    }
    exports.createNgZone = createNgZone;
    function commonBootstrap(appComponentType, componentInjectableBindings) {
      if (componentInjectableBindings === void 0) {
        componentInjectableBindings = null;
      }
      browser_adapter_1.BrowserDomAdapter.makeCurrent();
      wtf_init_1.wtfInit();
      var bootstrapProcess = async_1.PromiseWrapper.completer();
      var zone = createNgZone();
      zone.run(function() {
        var exceptionHandler;
        try {
          var appInjector = _createAppInjector(appComponentType, componentInjectableBindings, zone);
          exceptionHandler = appInjector.get(exception_handler_1.ExceptionHandler);
          zone.overrideOnErrorHandler(function(e, s) {
            return exceptionHandler.call(e, s);
          });
          var compRefToken = appInjector.get(application_tokens_1.APP_COMPONENT_REF_PROMISE);
          var tick = function(componentRef) {
            var appChangeDetector = view_ref_1.internalView(componentRef.hostView).changeDetector;
            var lc = appInjector.get(life_cycle_1.LifeCycle);
            lc.registerWith(zone, appChangeDetector);
            lc.tick();
            bootstrapProcess.resolve(new ApplicationRef(componentRef, appComponentType, appInjector));
          };
          var tickResult = async_1.PromiseWrapper.then(compRefToken, tick);
          async_1.PromiseWrapper.then(tickResult, function(_) {});
          async_1.PromiseWrapper.then(tickResult, null, function(err, stackTrace) {
            bootstrapProcess.reject(err, stackTrace);
          });
        } catch (e) {
          if (lang_1.isPresent(exceptionHandler)) {
            exceptionHandler.call(e, e.stack);
          } else {
            dom_adapter_1.DOM.logError(e);
          }
          bootstrapProcess.reject(e, e.stack);
        }
      });
      return bootstrapProcess.promise;
    }
    exports.commonBootstrap = commonBootstrap;
    var ApplicationRef = (function() {
      function ApplicationRef(hostComponent, hostComponentType, injector) {
        this._hostComponent = hostComponent;
        this._injector = injector;
        this._hostComponentType = hostComponentType;
      }
      Object.defineProperty(ApplicationRef.prototype, "hostComponentType", {
        get: function() {
          return this._hostComponentType;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ApplicationRef.prototype, "hostComponent", {
        get: function() {
          return this._hostComponent.instance;
        },
        enumerable: true,
        configurable: true
      });
      ApplicationRef.prototype.dispose = function() {
        this._hostComponent.dispose();
      };
      Object.defineProperty(ApplicationRef.prototype, "injector", {
        get: function() {
          return this._injector;
        },
        enumerable: true,
        configurable: true
      });
      return ApplicationRef;
    })();
    exports.ApplicationRef = ApplicationRef;
    function _createAppInjector(appComponentType, bindings, zone) {
      if (lang_1.isBlank(_rootInjector))
        _rootInjector = di_1.Injector.resolveAndCreate(_rootBindings);
      var mergedBindings = lang_1.isPresent(bindings) ? collection_1.ListWrapper.concat(_injectorBindings(appComponentType), bindings) : _injectorBindings(appComponentType);
      mergedBindings.push(di_1.bind(ng_zone_1.NgZone).toValue(zone));
      return _rootInjector.resolveAndCreateChild(mergedBindings);
    }
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/facade/lang.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var _global = (typeof window === 'undefined' ? global : window);
  exports.global = _global;
  exports.Type = Function;
  function getTypeNameForDebugging(type) {
    return type['name'];
  }
  exports.getTypeNameForDebugging = getTypeNameForDebugging;
  var BaseException = (function(_super) {
    __extends(BaseException, _super);
    function BaseException(message, _originalException, _originalStack, _context) {
      _super.call(this, message);
      this.message = message;
      this._originalException = _originalException;
      this._originalStack = _originalStack;
      this._context = _context;
      this.stack = (new Error(message)).stack;
    }
    Object.defineProperty(BaseException.prototype, "originalException", {
      get: function() {
        return this._originalException;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseException.prototype, "originalStack", {
      get: function() {
        return this._originalStack;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseException.prototype, "context", {
      get: function() {
        return this._context;
      },
      enumerable: true,
      configurable: true
    });
    BaseException.prototype.toString = function() {
      return this.message;
    };
    return BaseException;
  })(Error);
  exports.BaseException = BaseException;
  function makeTypeError(message) {
    return new TypeError(message);
  }
  exports.makeTypeError = makeTypeError;
  exports.Math = _global.Math;
  exports.Date = _global.Date;
  var assertionsEnabled_ = typeof _global['assert'] !== 'undefined';
  function assertionsEnabled() {
    return assertionsEnabled_;
  }
  exports.assertionsEnabled = assertionsEnabled;
  _global.assert = function assert(condition) {
    if (assertionsEnabled_) {
      _global['assert'].call(condition);
    }
  };
  function ENUM_INDEX(value) {
    return value;
  }
  exports.ENUM_INDEX = ENUM_INDEX;
  function CONST_EXPR(expr) {
    return expr;
  }
  exports.CONST_EXPR = CONST_EXPR;
  function CONST() {
    return function(target) {
      return target;
    };
  }
  exports.CONST = CONST;
  function ABSTRACT() {
    return function(t) {
      return t;
    };
  }
  exports.ABSTRACT = ABSTRACT;
  function IMPLEMENTS(_) {
    return function(t) {
      return t;
    };
  }
  exports.IMPLEMENTS = IMPLEMENTS;
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  exports.isPresent = isPresent;
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  exports.isBlank = isBlank;
  function isString(obj) {
    return typeof obj === "string";
  }
  exports.isString = isString;
  function isFunction(obj) {
    return typeof obj === "function";
  }
  exports.isFunction = isFunction;
  function isType(obj) {
    return isFunction(obj);
  }
  exports.isType = isType;
  function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
  }
  exports.isStringMap = isStringMap;
  function isPromise(obj) {
    return obj instanceof _global.Promise;
  }
  exports.isPromise = isPromise;
  function isArray(obj) {
    return Array.isArray(obj);
  }
  exports.isArray = isArray;
  function isNumber(obj) {
    return typeof obj === 'number';
  }
  exports.isNumber = isNumber;
  function isDate(obj) {
    return obj instanceof exports.Date && !isNaN(obj.valueOf());
  }
  exports.isDate = isDate;
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf("\n");
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
  }
  exports.stringify = stringify;
  function serializeEnum(val) {
    return val;
  }
  exports.serializeEnum = serializeEnum;
  function deserializeEnum(val, values) {
    return val;
  }
  exports.deserializeEnum = deserializeEnum;
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.toUpperCase = function(s) {
      return s.toUpperCase();
    };
    StringWrapper.toLowerCase = function(s) {
      return s.toLowerCase();
    };
    StringWrapper.startsWith = function(s, start) {
      return s.startsWith(start);
    };
    StringWrapper.substring = function(s, start, end) {
      if (end === void 0) {
        end = null;
      }
      return s.substring(start, end === null ? undefined : end);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  })();
  exports.StringWrapper = StringWrapper;
  var StringJoiner = (function() {
    function StringJoiner(parts) {
      if (parts === void 0) {
        parts = [];
      }
      this.parts = parts;
    }
    StringJoiner.prototype.add = function(part) {
      this.parts.push(part);
    };
    StringJoiner.prototype.toString = function() {
      return this.parts.join("");
    };
    return StringJoiner;
  })();
  exports.StringJoiner = StringJoiner;
  var NumberParseError = (function(_super) {
    __extends(NumberParseError, _super);
    function NumberParseError(message) {
      _super.call(this);
      this.message = message;
    }
    NumberParseError.prototype.toString = function() {
      return this.message;
    };
    return NumberParseError;
  })(BaseException);
  exports.NumberParseError = NumberParseError;
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new NumberParseError("Invalid integer literal when parsing " + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  })();
  exports.NumberWrapper = NumberWrapper;
  exports.RegExp = _global.RegExp;
  var RegExpWrapper = (function() {
    function RegExpWrapper() {}
    RegExpWrapper.create = function(regExpStr, flags) {
      if (flags === void 0) {
        flags = '';
      }
      flags = flags.replace(/g/g, '');
      return new _global.RegExp(regExpStr, flags + 'g');
    };
    RegExpWrapper.firstMatch = function(regExp, input) {
      regExp.lastIndex = 0;
      return regExp.exec(input);
    };
    RegExpWrapper.test = function(regExp, input) {
      regExp.lastIndex = 0;
      return regExp.test(input);
    };
    RegExpWrapper.matcher = function(regExp, input) {
      regExp.lastIndex = 0;
      return {
        re: regExp,
        input: input
      };
    };
    return RegExpWrapper;
  })();
  exports.RegExpWrapper = RegExpWrapper;
  var RegExpMatcherWrapper = (function() {
    function RegExpMatcherWrapper() {}
    RegExpMatcherWrapper.next = function(matcher) {
      return matcher.re.exec(matcher.input);
    };
    return RegExpMatcherWrapper;
  })();
  exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
  var FunctionWrapper = (function() {
    function FunctionWrapper() {}
    FunctionWrapper.apply = function(fn, posArgs) {
      return fn.apply(null, posArgs);
    };
    return FunctionWrapper;
  })();
  exports.FunctionWrapper = FunctionWrapper;
  function looseIdentical(a, b) {
    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
  }
  exports.looseIdentical = looseIdentical;
  function getMapKey(value) {
    return value;
  }
  exports.getMapKey = getMapKey;
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  exports.normalizeBlank = normalizeBlank;
  function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
  }
  exports.normalizeBool = normalizeBool;
  function isJsObject(o) {
    return o !== null && (typeof o === "function" || typeof o === "object");
  }
  exports.isJsObject = isJsObject;
  function print(obj) {
    if (obj instanceof BaseException) {
      console.log(obj.stack);
    } else {
      console.log(obj);
    }
  }
  exports.print = print;
  var Json = (function() {
    function Json() {}
    Json.parse = function(s) {
      return _global.JSON.parse(s);
    };
    Json.stringify = function(data) {
      return _global.JSON.stringify(data, null, 2);
    };
    return Json;
  })();
  exports.Json = Json;
  var DateWrapper = (function() {
    function DateWrapper() {}
    DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
      if (month === void 0) {
        month = 1;
      }
      if (day === void 0) {
        day = 1;
      }
      if (hour === void 0) {
        hour = 0;
      }
      if (minutes === void 0) {
        minutes = 0;
      }
      if (seconds === void 0) {
        seconds = 0;
      }
      if (milliseconds === void 0) {
        milliseconds = 0;
      }
      return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
    };
    DateWrapper.fromMillis = function(ms) {
      return new exports.Date(ms);
    };
    DateWrapper.toMillis = function(date) {
      return date.getTime();
    };
    DateWrapper.now = function() {
      return new exports.Date();
    };
    DateWrapper.toJson = function(date) {
      return date.toJSON();
    };
    return DateWrapper;
  })();
  exports.DateWrapper = DateWrapper;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js", ["npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var AppRootUrl = (function() {
    function AppRootUrl(value) {
      this._value = value;
    }
    Object.defineProperty(AppRootUrl.prototype, "value", {
      get: function() {
        return this._value;
      },
      set: function(value) {
        this._value = value;
      },
      enumerable: true,
      configurable: true
    });
    AppRootUrl = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [String])], AppRootUrl);
    return AppRootUrl;
  })();
  exports.AppRootUrl = AppRootUrl;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var UrlResolver = (function() {
    function UrlResolver() {}
    UrlResolver.prototype.resolve = function(baseUrl, url) {
      return _resolveUrl(baseUrl, url);
    };
    UrlResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], UrlResolver);
    return UrlResolver;
  })();
  exports.UrlResolver = UrlResolver;
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (lang_1.isPresent(opt_scheme)) {
      out.push(opt_scheme + ':');
    }
    if (lang_1.isPresent(opt_domain)) {
      out.push('//');
      if (lang_1.isPresent(opt_userInfo)) {
        out.push(opt_userInfo + '@');
      }
      out.push(opt_domain);
      if (lang_1.isPresent(opt_port)) {
        out.push(':' + opt_port);
      }
    }
    if (lang_1.isPresent(opt_path)) {
      out.push(opt_path);
    }
    if (lang_1.isPresent(opt_queryData)) {
      out.push('?' + opt_queryData);
    }
    if (lang_1.isPresent(opt_fragment)) {
      out.push('#' + opt_fragment);
    }
    return out.join('');
  }
  var _splitRe = lang_1.RegExpWrapper.create('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var _ComponentIndex;
  (function(_ComponentIndex) {
    _ComponentIndex[_ComponentIndex["SCHEME"] = 1] = "SCHEME";
    _ComponentIndex[_ComponentIndex["USER_INFO"] = 2] = "USER_INFO";
    _ComponentIndex[_ComponentIndex["DOMAIN"] = 3] = "DOMAIN";
    _ComponentIndex[_ComponentIndex["PORT"] = 4] = "PORT";
    _ComponentIndex[_ComponentIndex["PATH"] = 5] = "PATH";
    _ComponentIndex[_ComponentIndex["QUERY_DATA"] = 6] = "QUERY_DATA";
    _ComponentIndex[_ComponentIndex["FRAGMENT"] = 7] = "FRAGMENT";
  })(_ComponentIndex || (_ComponentIndex = {}));
  function _split(uri) {
    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
  }
  function _removeDotSegments(path) {
    if (path == '/')
      return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length > 0) {
            collection_1.ListWrapper.removeAt(out, out.length - 1);
          } else {
            up++;
          }
          break;
        default:
          out.push(segment);
      }
    }
    if (leadingSlash == '') {
      while (up-- > 0) {
        collection_1.ListWrapper.insert(out, 0, '..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.PATH];
    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.PATH] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.SCHEME], parts[_ComponentIndex.USER_INFO], parts[_ComponentIndex.DOMAIN], parts[_ComponentIndex.PORT], path, parts[_ComponentIndex.QUERY_DATA], parts[_ComponentIndex.FRAGMENT]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url));
    var baseParts = _split(base);
    if (lang_1.isPresent(parts[_ComponentIndex.SCHEME])) {
      return _joinAndCanonicalizePath(parts);
    } else {
      parts[_ComponentIndex.SCHEME] = baseParts[_ComponentIndex.SCHEME];
    }
    for (var i = _ComponentIndex.SCHEME; i <= _ComponentIndex.PORT; i++) {
      if (lang_1.isBlank(parts[i])) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[_ComponentIndex.PATH][0] == '/') {
      return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.PATH];
    if (lang_1.isBlank(path))
      path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.PATH];
    parts[_ComponentIndex.PATH] = path;
    return _joinAndCanonicalizePath(parts);
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var ComponentUrlMapper = (function() {
    function ComponentUrlMapper() {}
    ComponentUrlMapper.prototype.getUrl = function(component) {
      return './';
    };
    ComponentUrlMapper = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], ComponentUrlMapper);
    return ComponentUrlMapper;
  })();
  exports.ComponentUrlMapper = ComponentUrlMapper;
  var RuntimeComponentUrlMapper = (function(_super) {
    __extends(RuntimeComponentUrlMapper, _super);
    function RuntimeComponentUrlMapper() {
      _super.call(this);
      this._componentUrls = new collection_1.Map();
    }
    RuntimeComponentUrlMapper.prototype.setComponentUrl = function(component, url) {
      this._componentUrls.set(component, url);
    };
    RuntimeComponentUrlMapper.prototype.getUrl = function(component) {
      var url = this._componentUrls.get(component);
      if (lang_1.isPresent(url))
        return url;
      return _super.prototype.getUrl.call(this, component);
    };
    return RuntimeComponentUrlMapper;
  })(ComponentUrlMapper);
  exports.RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var DirectiveResolver = (function() {
    function DirectiveResolver() {}
    DirectiveResolver.prototype.resolve = function(type) {
      var annotations = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
      if (lang_1.isPresent(annotations)) {
        for (var i = 0; i < annotations.length; i++) {
          var annotation = annotations[i];
          if (annotation instanceof metadata_1.DirectiveMetadata) {
            return annotation;
          }
        }
      }
      throw new lang_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
    };
    DirectiveResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], DirectiveResolver);
    return DirectiveResolver;
  })();
  exports.DirectiveResolver = DirectiveResolver;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/pipe_resolver.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/proto_view_factory.js", "npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js", "npm:angular2@2.0.0-alpha.35/src/core/pipes/pipe_binding.js", "npm:angular2@2.0.0-alpha.35/pipes.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var directive_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_resolver.js");
  var view_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js");
  var element_injector_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js");
  var view_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_resolver.js");
  var pipe_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/pipe_resolver.js");
  var component_url_mapper_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/component_url_mapper.js");
  var proto_view_factory_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/proto_view_factory.js");
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js");
  var app_root_url_1 = require("npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js");
  var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
  var pipe_binding_1 = require("npm:angular2@2.0.0-alpha.35/src/core/pipes/pipe_binding.js");
  var pipes_1 = require("npm:angular2@2.0.0-alpha.35/pipes.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var CompilerCache = (function() {
    function CompilerCache() {
      this._cache = new collection_1.Map();
      this._hostCache = new collection_1.Map();
    }
    CompilerCache.prototype.set = function(component, protoView) {
      this._cache.set(component, protoView);
    };
    CompilerCache.prototype.get = function(component) {
      var result = this._cache.get(component);
      return lang_1.normalizeBlank(result);
    };
    CompilerCache.prototype.setHost = function(component, protoView) {
      this._hostCache.set(component, protoView);
    };
    CompilerCache.prototype.getHost = function(component) {
      var result = this._hostCache.get(component);
      return lang_1.normalizeBlank(result);
    };
    CompilerCache.prototype.clear = function() {
      this._cache.clear();
      this._hostCache.clear();
    };
    CompilerCache = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], CompilerCache);
    return CompilerCache;
  })();
  exports.CompilerCache = CompilerCache;
  var Compiler = (function() {
    function Compiler(_directiveResolver, _pipeResolver, _defaultPipes, _compilerCache, _viewResolver, _componentUrlMapper, _urlResolver, _render, _protoViewFactory, appUrl) {
      this._directiveResolver = _directiveResolver;
      this._pipeResolver = _pipeResolver;
      this._compilerCache = _compilerCache;
      this._viewResolver = _viewResolver;
      this._componentUrlMapper = _componentUrlMapper;
      this._urlResolver = _urlResolver;
      this._render = _render;
      this._protoViewFactory = _protoViewFactory;
      this._compiling = new collection_1.Map();
      this._defaultPipes = _defaultPipes;
      this._appUrl = appUrl.value;
    }
    Compiler.prototype._bindDirective = function(directiveTypeOrBinding) {
      if (directiveTypeOrBinding instanceof element_injector_1.DirectiveBinding) {
        return directiveTypeOrBinding;
      } else if (directiveTypeOrBinding instanceof di_1.Binding) {
        var annotation = this._directiveResolver.resolve(directiveTypeOrBinding.token);
        return element_injector_1.DirectiveBinding.createFromBinding(directiveTypeOrBinding, annotation);
      } else {
        var annotation = this._directiveResolver.resolve(directiveTypeOrBinding);
        return element_injector_1.DirectiveBinding.createFromType(directiveTypeOrBinding, annotation);
      }
    };
    Compiler.prototype._bindPipe = function(typeOrBinding) {
      var meta = this._pipeResolver.resolve(typeOrBinding);
      return pipe_binding_1.PipeBinding.createFromType(typeOrBinding, meta);
    };
    Compiler.prototype.compileInHost = function(componentTypeOrBinding) {
      var _this = this;
      var componentType = lang_1.isType(componentTypeOrBinding) ? componentTypeOrBinding : componentTypeOrBinding.token;
      var r = profile_1.wtfStartTimeRange('Compiler#compile()', lang_1.stringify(componentType));
      var hostAppProtoView = this._compilerCache.getHost(componentType);
      var hostPvPromise;
      if (lang_1.isPresent(hostAppProtoView)) {
        hostPvPromise = async_1.PromiseWrapper.resolve(hostAppProtoView);
      } else {
        var componentBinding = this._bindDirective(componentTypeOrBinding);
        Compiler._assertTypeIsComponent(componentBinding);
        var directiveMetadata = componentBinding.metadata;
        hostPvPromise = this._render.compileHost(directiveMetadata).then(function(hostRenderPv) {
          var protoViews = _this._protoViewFactory.createAppProtoViews(componentBinding, hostRenderPv, [componentBinding], []);
          return _this._compileNestedProtoViews(protoViews, componentType, new collection_1.Map());
        }).then(function(appProtoView) {
          _this._compilerCache.setHost(componentType, appProtoView);
          return appProtoView;
        });
      }
      return hostPvPromise.then(function(hostAppProtoView) {
        profile_1.wtfEndTimeRange(r);
        return hostAppProtoView.ref;
      });
    };
    Compiler.prototype._compile = function(componentBinding, componentPath) {
      var _this = this;
      var component = componentBinding.key.token;
      var protoView = this._compilerCache.get(component);
      if (lang_1.isPresent(protoView)) {
        return protoView;
      }
      var resultPromise = this._compiling.get(component);
      if (lang_1.isPresent(resultPromise)) {
        return resultPromise;
      }
      var view = this._viewResolver.resolve(component);
      var directives = this._flattenDirectives(view);
      for (var i = 0; i < directives.length; i++) {
        if (!Compiler._isValidDirective(directives[i])) {
          throw new lang_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
        }
      }
      var boundDirectives = this._removeDuplicatedDirectives(directives.map(function(directive) {
        return _this._bindDirective(directive);
      }));
      var pipes = this._flattenPipes(view);
      var boundPipes = pipes.map(function(pipe) {
        return _this._bindPipe(pipe);
      });
      var renderTemplate = this._buildRenderTemplate(component, view, boundDirectives);
      resultPromise = this._render.compile(renderTemplate).then(function(renderPv) {
        var protoViews = _this._protoViewFactory.createAppProtoViews(componentBinding, renderPv, boundDirectives, boundPipes);
        return _this._compileNestedProtoViews(protoViews, component, componentPath);
      }).then(function(appProtoView) {
        _this._compilerCache.set(component, appProtoView);
        collection_1.MapWrapper.delete(_this._compiling, component);
        return appProtoView;
      });
      this._compiling.set(component, resultPromise);
      return resultPromise;
    };
    Compiler.prototype._removeDuplicatedDirectives = function(directives) {
      var directivesMap = new collection_1.Map();
      directives.forEach(function(dirBinding) {
        directivesMap.set(dirBinding.key.id, dirBinding);
      });
      return collection_1.MapWrapper.values(directivesMap);
    };
    Compiler.prototype._compileNestedProtoViews = function(appProtoViews, componentType, componentPath) {
      var _this = this;
      var nestedPVPromises = [];
      componentPath = collection_1.MapWrapper.clone(componentPath);
      if (appProtoViews[0].type === api_1.ViewType.COMPONENT) {
        componentPath.set(componentType, appProtoViews[0]);
      }
      appProtoViews.forEach(function(appProtoView) {
        _this._collectComponentElementBinders(appProtoView).forEach(function(elementBinder) {
          var nestedComponent = elementBinder.componentDirective;
          var nestedComponentType = nestedComponent.key.token;
          var elementBinderDone = function(nestedPv) {
            elementBinder.nestedProtoView = nestedPv;
          };
          if (componentPath.has(nestedComponentType)) {
            if (appProtoView.isEmbeddedFragment) {
              throw new lang_1.BaseException("<ng-content> is used within the recursive path of " + lang_1.stringify(nestedComponentType));
            } else if (appProtoView.type === api_1.ViewType.COMPONENT) {
              throw new lang_1.BaseException("Unconditional component cycle in " + lang_1.stringify(nestedComponentType));
            } else {
              elementBinderDone(componentPath.get(nestedComponentType));
            }
          } else {
            var nestedCall = _this._compile(nestedComponent, componentPath);
            if (lang_1.isPromise(nestedCall)) {
              nestedPVPromises.push(nestedCall.then(elementBinderDone));
            } else {
              elementBinderDone(nestedCall);
            }
          }
        });
      });
      return async_1.PromiseWrapper.all(nestedPVPromises).then(function(_) {
        return async_1.PromiseWrapper.all(appProtoViews.map(function(appProtoView) {
          return _this._mergeProtoView(appProtoView);
        }));
      }).then(function(_) {
        return appProtoViews[0];
      });
    };
    Compiler.prototype._mergeProtoView = function(appProtoView) {
      if (appProtoView.type !== api_1.ViewType.HOST && appProtoView.type !== api_1.ViewType.EMBEDDED) {
        return null;
      }
      return this._render.mergeProtoViewsRecursively(this._collectMergeRenderProtoViews(appProtoView)).then(function(mergeResult) {
        appProtoView.mergeMapping = new view_1.AppProtoViewMergeMapping(mergeResult);
      });
    };
    Compiler.prototype._collectMergeRenderProtoViews = function(appProtoView) {
      var result = [appProtoView.render];
      for (var i = 0; i < appProtoView.elementBinders.length; i++) {
        var binder = appProtoView.elementBinders[i];
        if (lang_1.isPresent(binder.nestedProtoView)) {
          if (binder.hasStaticComponent() || (binder.hasEmbeddedProtoView() && binder.nestedProtoView.isEmbeddedFragment)) {
            result.push(this._collectMergeRenderProtoViews(binder.nestedProtoView));
          } else {
            result.push(null);
          }
        }
      }
      return result;
    };
    Compiler.prototype._collectComponentElementBinders = function(appProtoView) {
      var componentElementBinders = [];
      appProtoView.elementBinders.forEach(function(elementBinder) {
        if (lang_1.isPresent(elementBinder.componentDirective)) {
          componentElementBinders.push(elementBinder);
        }
      });
      return componentElementBinders;
    };
    Compiler.prototype._buildRenderTemplate = function(component, view, directives) {
      var _this = this;
      var componentUrl = this._urlResolver.resolve(this._appUrl, this._componentUrlMapper.getUrl(component));
      var templateAbsUrl = null;
      var styleAbsUrls = null;
      if (lang_1.isPresent(view.templateUrl)) {
        templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);
      } else if (lang_1.isPresent(view.template)) {
        templateAbsUrl = componentUrl;
      }
      if (lang_1.isPresent(view.styleUrls)) {
        styleAbsUrls = collection_1.ListWrapper.map(view.styleUrls, function(url) {
          return _this._urlResolver.resolve(componentUrl, url);
        });
      }
      return new api_1.ViewDefinition({
        componentId: lang_1.stringify(component),
        templateAbsUrl: templateAbsUrl,
        template: view.template,
        styleAbsUrls: styleAbsUrls,
        styles: view.styles,
        directives: collection_1.ListWrapper.map(directives, function(directiveBinding) {
          return directiveBinding.metadata;
        }),
        encapsulation: view.encapsulation
      });
    };
    Compiler.prototype._flattenPipes = function(view) {
      if (lang_1.isBlank(view.pipes))
        return this._defaultPipes;
      var pipes = collection_1.ListWrapper.clone(this._defaultPipes);
      this._flattenList(view.pipes, pipes);
      return pipes;
    };
    Compiler.prototype._flattenDirectives = function(view) {
      if (lang_1.isBlank(view.directives))
        return [];
      var directives = [];
      this._flattenList(view.directives, directives);
      return directives;
    };
    Compiler.prototype._flattenList = function(tree, out) {
      for (var i = 0; i < tree.length; i++) {
        var item = di_1.resolveForwardRef(tree[i]);
        if (lang_1.isArray(item)) {
          this._flattenList(item, out);
        } else {
          out.push(item);
        }
      }
    };
    Compiler._isValidDirective = function(value) {
      return lang_1.isPresent(value) && (value instanceof lang_1.Type || value instanceof di_1.Binding);
    };
    Compiler._assertTypeIsComponent = function(directiveBinding) {
      if (directiveBinding.metadata.type !== api_1.RenderDirectiveMetadata.COMPONENT_TYPE) {
        throw new lang_1.BaseException("Could not load '" + lang_1.stringify(directiveBinding.key.token) + "' because it is not a component.");
      }
    };
    Compiler = __decorate([di_1.Injectable(), __param(2, di_1.Inject(pipes_1.DEFAULT_PIPES_TOKEN)), __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver, Array, CompilerCache, view_resolver_1.ViewResolver, component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, api_1.RenderCompiler, proto_view_factory_1.ProtoViewFactory, app_root_url_1.AppRootUrl])], Compiler);
    return Compiler;
  })();
  exports.Compiler = Compiler;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager_utils.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_pool.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_listener.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var view_manager_utils_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager_utils.js");
  var view_pool_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_pool.js");
  var view_listener_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_listener.js");
  var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
  var AppViewManager = (function() {
    function AppViewManager(_viewPool, _viewListener, _utils, _renderer) {
      this._viewPool = _viewPool;
      this._viewListener = _viewListener;
      this._utils = _utils;
      this._renderer = _renderer;
      this._scope_createRootHostView = profile_1.wtfCreateScope('AppViewManager#createRootHostView()');
      this._scope_destroyRootHostView = profile_1.wtfCreateScope('AppViewManager#destroyRootHostView()');
      this._scope_createEmbeddedViewInContainer = profile_1.wtfCreateScope('AppViewManager#createEmbeddedViewInContainer()');
      this._scope_createHostViewInContainer = profile_1.wtfCreateScope('AppViewManager#createHostViewInContainer()');
      this._scope_destroyViewInContainer = profile_1.wtfCreateScope('AppViewMananger#destroyViewInContainer()');
      this._scope_attachViewInContainer = profile_1.wtfCreateScope('AppViewMananger#attachViewInContainer()');
      this._scope_detachViewInContainer = profile_1.wtfCreateScope('AppViewMananger#detachViewInContainer()');
    }
    AppViewManager.prototype.getViewContainer = function(location) {
      var hostView = view_ref_1.internalView(location.parentView);
      return hostView.elementInjectors[location.boundElementIndex].getViewContainerRef();
    };
    AppViewManager.prototype.getHostElement = function(hostViewRef) {
      var hostView = view_ref_1.internalView(hostViewRef);
      if (hostView.proto.type !== api_1.ViewType.HOST) {
        throw new lang_1.BaseException('This operation is only allowed on host views');
      }
      return hostView.elementRefs[hostView.elementOffset];
    };
    AppViewManager.prototype.getNamedElementInComponentView = function(hostLocation, variableName) {
      var hostView = view_ref_1.internalView(hostLocation.parentView);
      var boundElementIndex = hostLocation.boundElementIndex;
      var componentView = hostView.getNestedView(boundElementIndex);
      if (lang_1.isBlank(componentView)) {
        throw new lang_1.BaseException("There is no component directive at element " + boundElementIndex);
      }
      var binderIdx = componentView.proto.variableLocations.get(variableName);
      if (lang_1.isBlank(binderIdx)) {
        throw new lang_1.BaseException("Could not find variable " + variableName);
      }
      return componentView.elementRefs[componentView.elementOffset + binderIdx];
    };
    AppViewManager.prototype.getComponent = function(hostLocation) {
      var hostView = view_ref_1.internalView(hostLocation.parentView);
      var boundElementIndex = hostLocation.boundElementIndex;
      return this._utils.getComponentInstance(hostView, boundElementIndex);
    };
    AppViewManager.prototype.createRootHostView = function(hostProtoViewRef, overrideSelector, injector) {
      var s = this._scope_createRootHostView();
      var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
      var hostElementSelector = overrideSelector;
      if (lang_1.isBlank(hostElementSelector)) {
        hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
      }
      var renderViewWithFragments = this._renderer.createRootHostView(hostProtoView.mergeMapping.renderProtoViewRef, hostProtoView.mergeMapping.renderFragmentCount, hostElementSelector);
      var hostView = this._createMainView(hostProtoView, renderViewWithFragments);
      this._renderer.hydrateView(hostView.render);
      this._utils.hydrateRootHostView(hostView, injector);
      return profile_1.wtfLeave(s, hostView.ref);
    };
    AppViewManager.prototype.destroyRootHostView = function(hostViewRef) {
      var s = this._scope_destroyRootHostView();
      var hostView = view_ref_1.internalView(hostViewRef);
      this._renderer.detachFragment(hostView.renderFragment);
      this._renderer.dehydrateView(hostView.render);
      this._viewDehydrateRecurse(hostView);
      this._viewListener.viewDestroyed(hostView);
      this._renderer.destroyView(hostView.render);
      profile_1.wtfLeave(s);
    };
    AppViewManager.prototype.createEmbeddedViewInContainer = function(viewContainerLocation, atIndex, templateRef) {
      var s = this._scope_createEmbeddedViewInContainer();
      var protoView = view_ref_1.internalProtoView(templateRef.protoViewRef);
      if (protoView.type !== api_1.ViewType.EMBEDDED) {
        throw new lang_1.BaseException('This method can only be called with embedded ProtoViews!');
      }
      return profile_1.wtfLeave(s, this._createViewInContainer(viewContainerLocation, atIndex, protoView, templateRef.elementRef, null));
    };
    AppViewManager.prototype.createHostViewInContainer = function(viewContainerLocation, atIndex, protoViewRef, imperativelyCreatedInjector) {
      var s = this._scope_createHostViewInContainer();
      var protoView = view_ref_1.internalProtoView(protoViewRef);
      if (protoView.type !== api_1.ViewType.HOST) {
        throw new lang_1.BaseException('This method can only be called with host ProtoViews!');
      }
      return profile_1.wtfLeave(s, this._createViewInContainer(viewContainerLocation, atIndex, protoView, viewContainerLocation, imperativelyCreatedInjector));
    };
    AppViewManager.prototype._createViewInContainer = function(viewContainerLocation, atIndex, protoView, context, imperativelyCreatedInjector) {
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      var contextView = view_ref_1.internalView(context.parentView);
      var contextBoundElementIndex = context.boundElementIndex;
      var embeddedFragmentView = contextView.getNestedView(contextBoundElementIndex);
      var view;
      if (protoView.type === api_1.ViewType.EMBEDDED && lang_1.isPresent(embeddedFragmentView) && !embeddedFragmentView.hydrated()) {
        view = embeddedFragmentView;
        this._attachRenderView(parentView, boundElementIndex, atIndex, view);
      } else {
        view = this._createPooledView(protoView);
        this._attachRenderView(parentView, boundElementIndex, atIndex, view);
        this._renderer.hydrateView(view.render);
      }
      this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view);
      this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, imperativelyCreatedInjector);
      return view.ref;
    };
    AppViewManager.prototype._attachRenderView = function(parentView, boundElementIndex, atIndex, view) {
      var elementRef = parentView.elementRefs[boundElementIndex];
      if (atIndex === 0) {
        this._renderer.attachFragmentAfterElement(elementRef, view.renderFragment);
      } else {
        var prevView = parentView.viewContainers[boundElementIndex].views[atIndex - 1];
        this._renderer.attachFragmentAfterFragment(prevView.renderFragment, view.renderFragment);
      }
    };
    AppViewManager.prototype.destroyViewInContainer = function(viewContainerLocation, atIndex) {
      var s = this._scope_destroyViewInContainer();
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      this._destroyViewInContainer(parentView, boundElementIndex, atIndex);
      profile_1.wtfLeave(s);
    };
    AppViewManager.prototype.attachViewInContainer = function(viewContainerLocation, atIndex, viewRef) {
      var s = this._scope_attachViewInContainer();
      var view = view_ref_1.internalView(viewRef);
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, atIndex, view);
      this._attachRenderView(parentView, boundElementIndex, atIndex, view);
      return profile_1.wtfLeave(s, viewRef);
    };
    AppViewManager.prototype.detachViewInContainer = function(viewContainerLocation, atIndex) {
      var s = this._scope_detachViewInContainer();
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
      this._renderer.detachFragment(view.renderFragment);
      return profile_1.wtfLeave(s, view.ref);
    };
    AppViewManager.prototype._createMainView = function(protoView, renderViewWithFragments) {
      var mergedParentView = this._utils.createView(protoView, renderViewWithFragments, this, this._renderer);
      this._renderer.setEventDispatcher(mergedParentView.render, mergedParentView);
      this._viewListener.viewCreated(mergedParentView);
      return mergedParentView;
    };
    AppViewManager.prototype._createPooledView = function(protoView) {
      var view = this._viewPool.getView(protoView);
      if (lang_1.isBlank(view)) {
        view = this._createMainView(protoView, this._renderer.createView(protoView.mergeMapping.renderProtoViewRef, protoView.mergeMapping.renderFragmentCount));
      }
      return view;
    };
    AppViewManager.prototype._destroyPooledView = function(view) {
      var wasReturned = this._viewPool.returnView(view);
      if (!wasReturned) {
        this._viewListener.viewDestroyed(view);
        this._renderer.destroyView(view.render);
      }
    };
    AppViewManager.prototype._destroyViewInContainer = function(parentView, boundElementIndex, atIndex) {
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      this._viewDehydrateRecurse(view);
      this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
      if (view.viewOffset > 0) {
        this._renderer.detachFragment(view.renderFragment);
      } else {
        this._renderer.dehydrateView(view.render);
        this._renderer.detachFragment(view.renderFragment);
        this._destroyPooledView(view);
      }
    };
    AppViewManager.prototype._viewDehydrateRecurse = function(view) {
      if (view.hydrated()) {
        this._utils.dehydrateView(view);
      }
      var viewContainers = view.viewContainers;
      var startViewOffset = view.viewOffset;
      var endViewOffset = view.viewOffset + view.mainMergeMapping.nestedViewCountByViewIndex[view.viewOffset];
      var elementOffset = view.elementOffset;
      for (var viewIdx = startViewOffset; viewIdx <= endViewOffset; viewIdx++) {
        var currView = view.views[viewIdx];
        for (var binderIdx = 0; binderIdx < currView.proto.elementBinders.length; binderIdx++, elementOffset++) {
          var vc = viewContainers[elementOffset];
          if (lang_1.isPresent(vc)) {
            for (var j = vc.views.length - 1; j >= 0; j--) {
              this._destroyViewInContainer(currView, elementOffset, j);
            }
          }
        }
      }
    };
    AppViewManager = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [view_pool_1.AppViewPool, view_listener_1.AppViewListener, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer])], AppViewManager);
    return AppViewManager;
  })();
  exports.AppViewManager = AppViewManager;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/query_list.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var QueryList = (function() {
    function QueryList() {
      this._results = [];
      this._callbacks = [];
      this._dirty = false;
    }
    QueryList.prototype.reset = function(newList) {
      this._results = newList;
      this._dirty = true;
    };
    QueryList.prototype.add = function(obj) {
      this._results.push(obj);
      this._dirty = true;
    };
    QueryList.prototype.fireCallbacks = function() {
      if (this._dirty) {
        collection_1.ListWrapper.forEach(this._callbacks, function(c) {
          return c();
        });
        this._dirty = false;
      }
    };
    QueryList.prototype.onChange = function(callback) {
      this._callbacks.push(callback);
    };
    QueryList.prototype.removeCallback = function(callback) {
      collection_1.ListWrapper.remove(this._callbacks, callback);
    };
    QueryList.prototype.toString = function() {
      return this._results.toString();
    };
    Object.defineProperty(QueryList.prototype, "length", {
      get: function() {
        return this._results.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
      get: function() {
        return collection_1.ListWrapper.first(this._results);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
      get: function() {
        return collection_1.ListWrapper.last(this._results);
      },
      enumerable: true,
      configurable: true
    });
    QueryList.prototype.map = function(fn) {
      return this._results.map(fn);
    };
    QueryList.prototype[Symbol.iterator] = function() {
      return this._results[Symbol.iterator]();
    };
    return QueryList;
  })();
  exports.QueryList = QueryList;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/dynamic_component_loader.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var compiler_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/compiler.js");
  var view_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js");
  var ComponentRef = (function() {
    function ComponentRef(location, instance, _dispose) {
      this._dispose = _dispose;
      this.location = location;
      this.instance = instance;
    }
    Object.defineProperty(ComponentRef.prototype, "hostView", {
      get: function() {
        return this.location.parentView;
      },
      enumerable: true,
      configurable: true
    });
    ComponentRef.prototype.dispose = function() {
      this._dispose();
    };
    return ComponentRef;
  })();
  exports.ComponentRef = ComponentRef;
  var DynamicComponentLoader = (function() {
    function DynamicComponentLoader(_compiler, _viewManager) {
      this._compiler = _compiler;
      this._viewManager = _viewManager;
    }
    DynamicComponentLoader.prototype.loadAsRoot = function(typeOrBinding, overrideSelector, injector) {
      var _this = this;
      return this._compiler.compileInHost(typeOrBinding).then(function(hostProtoViewRef) {
        var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
        var newLocation = _this._viewManager.getHostElement(hostViewRef);
        var component = _this._viewManager.getComponent(newLocation);
        var dispose = function() {
          _this._viewManager.destroyRootHostView(hostViewRef);
        };
        return new ComponentRef(newLocation, component, dispose);
      });
    };
    DynamicComponentLoader.prototype.loadIntoLocation = function(typeOrBinding, hostLocation, anchorName, bindings) {
      if (bindings === void 0) {
        bindings = null;
      }
      return this.loadNextToLocation(typeOrBinding, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), bindings);
    };
    DynamicComponentLoader.prototype.loadNextToLocation = function(typeOrBinding, location, bindings) {
      var _this = this;
      if (bindings === void 0) {
        bindings = null;
      }
      return this._compiler.compileInHost(typeOrBinding).then(function(hostProtoViewRef) {
        var viewContainer = _this._viewManager.getViewContainer(location);
        var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, bindings);
        var newLocation = _this._viewManager.getHostElement(hostViewRef);
        var component = _this._viewManager.getComponent(newLocation);
        var dispose = function() {
          var index = viewContainer.indexOf(hostViewRef);
          if (index !== -1) {
            viewContainer.remove(index);
          }
        };
        return new ComponentRef(newLocation, component, dispose);
      });
    };
    DynamicComponentLoader = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])], DynamicComponentLoader);
    return DynamicComponentLoader;
  })();
  exports.DynamicComponentLoader = DynamicComponentLoader;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/life_cycle/life_cycle.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        return Reflect.decorate(decorators, target, key, desc);
      switch (arguments.length) {
        case 2:
          return decorators.reduceRight(function(o, d) {
            return (d && d(o)) || o;
          }, target);
        case 3:
          return decorators.reduceRight(function(o, d) {
            return (d && d(target, key)), void 0;
          }, void 0);
        case 4:
          return decorators.reduceRight(function(o, d) {
            return (d && d(target, key, o)) || o;
          }, desc);
      }
    };
    var __metadata = (this && this.__metadata) || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
    };
    var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
    var LifeCycle = (function() {
      function LifeCycle(changeDetector, enforceNoNewChanges) {
        if (changeDetector === void 0) {
          changeDetector = null;
        }
        if (enforceNoNewChanges === void 0) {
          enforceNoNewChanges = false;
        }
        this._runningTick = false;
        this._changeDetector = changeDetector;
        this._enforceNoNewChanges = enforceNoNewChanges;
      }
      LifeCycle.prototype.registerWith = function(zone, changeDetector) {
        var _this = this;
        if (changeDetector === void 0) {
          changeDetector = null;
        }
        if (lang_1.isPresent(changeDetector)) {
          this._changeDetector = changeDetector;
        }
        zone.overrideOnTurnDone(function() {
          return _this.tick();
        });
      };
      LifeCycle.prototype.tick = function() {
        if (this._runningTick) {
          throw new lang_1.BaseException("LifeCycle.tick is called recursively");
        }
        var s = LifeCycle._scope_tick();
        try {
          this._runningTick = true;
          this._changeDetector.detectChanges();
          if (this._enforceNoNewChanges) {
            this._changeDetector.checkNoChanges();
          }
        } finally {
          this._runningTick = false;
          profile_1.wtfLeave(s);
        }
      };
      LifeCycle._scope_tick = profile_1.wtfCreateScope('LifeCycle#tick()');
      LifeCycle = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [Object, Boolean])], LifeCycle);
      return LifeCycle;
    })();
    exports.LifeCycle = LifeCycle;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ElementRef = (function() {
    function ElementRef(parentView, boundElementIndex, renderBoundElementIndex, _renderer) {
      this._renderer = _renderer;
      this.parentView = parentView;
      this.boundElementIndex = boundElementIndex;
      this.renderBoundElementIndex = renderBoundElementIndex;
    }
    Object.defineProperty(ElementRef.prototype, "renderView", {
      get: function() {
        return this.parentView.render;
      },
      set: function(viewRef) {
        throw new lang_1.BaseException('Abstract setter');
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ElementRef.prototype, "nativeElement", {
      get: function() {
        return this._renderer.getNativeElementSync(this);
      },
      enumerable: true,
      configurable: true
    });
    return ElementRef;
  })();
  exports.ElementRef = ElementRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js", ["npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
  var TemplateRef = (function() {
    function TemplateRef(elementRef) {
      this.elementRef = elementRef;
    }
    TemplateRef.prototype._getProtoView = function() {
      var parentView = view_ref_1.internalView(this.elementRef.parentView);
      return parentView.proto.elementBinders[this.elementRef.boundElementIndex - parentView.elementOffset].nestedProtoView;
    };
    Object.defineProperty(TemplateRef.prototype, "protoViewRef", {
      get: function() {
        return this._getProtoView().ref;
      },
      enumerable: true,
      configurable: true
    });
    TemplateRef.prototype.hasLocal = function(name) {
      return this._getProtoView().variableBindings.has(name);
    };
    return TemplateRef;
  })();
  exports.TemplateRef = TemplateRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  function internalView(viewRef) {
    return viewRef._view;
  }
  exports.internalView = internalView;
  function internalProtoView(protoViewRef) {
    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
  }
  exports.internalProtoView = internalProtoView;
  var ViewRef = (function() {
    function ViewRef(_view) {
      this._view = _view;
    }
    Object.defineProperty(ViewRef.prototype, "render", {
      get: function() {
        return this._view.render;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef.prototype, "renderFragment", {
      get: function() {
        return this._view.renderFragment;
      },
      enumerable: true,
      configurable: true
    });
    ViewRef.prototype.setLocal = function(contextName, value) {
      this._view.setLocal(contextName, value);
    };
    return ViewRef;
  })();
  exports.ViewRef = ViewRef;
  var ProtoViewRef = (function() {
    function ProtoViewRef(_protoView) {
      this._protoView = _protoView;
    }
    return ProtoViewRef;
  })();
  exports.ProtoViewRef = ProtoViewRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_container_ref.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
  var ViewContainerRef = (function() {
    function ViewContainerRef(viewManager, element) {
      this.viewManager = viewManager;
      this.element = element;
    }
    ViewContainerRef.prototype._getViews = function() {
      var vc = view_ref_1.internalView(this.element.parentView).viewContainers[this.element.boundElementIndex];
      return lang_1.isPresent(vc) ? vc.views : [];
    };
    ViewContainerRef.prototype.clear = function() {
      for (var i = this.length - 1; i >= 0; i--) {
        this.remove(i);
      }
    };
    ViewContainerRef.prototype.get = function(index) {
      return this._getViews()[index].ref;
    };
    Object.defineProperty(ViewContainerRef.prototype, "length", {
      get: function() {
        return this._getViews().length;
      },
      enumerable: true,
      configurable: true
    });
    ViewContainerRef.prototype.createEmbeddedView = function(templateRef, atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length;
      return this.viewManager.createEmbeddedViewInContainer(this.element, atIndex, templateRef);
    };
    ViewContainerRef.prototype.createHostView = function(protoViewRef, atIndex, dynamicallyCreatedBindings) {
      if (protoViewRef === void 0) {
        protoViewRef = null;
      }
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (dynamicallyCreatedBindings === void 0) {
        dynamicallyCreatedBindings = null;
      }
      if (atIndex == -1)
        atIndex = this.length;
      return this.viewManager.createHostViewInContainer(this.element, atIndex, protoViewRef, dynamicallyCreatedBindings);
    };
    ViewContainerRef.prototype.insert = function(viewRef, atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length;
      return this.viewManager.attachViewInContainer(this.element, atIndex, viewRef);
    };
    ViewContainerRef.prototype.indexOf = function(viewRef) {
      return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef));
    };
    ViewContainerRef.prototype.remove = function(atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length - 1;
      this.viewManager.destroyViewInContainer(this.element, atIndex);
    };
    ViewContainerRef.prototype.detach = function(atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length - 1;
      return this.viewManager.detachViewInContainer(this.element, atIndex);
    };
    return ViewContainerRef;
  })();
  exports.ViewContainerRef = ViewContainerRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
    var NgZone = (function() {
      function NgZone(_a) {
        var enableLongStackTrace = _a.enableLongStackTrace;
        this._zone_run_scope = profile_1.wtfCreateScope("NgZone#run()");
        this._zone_microtask = profile_1.wtfCreateScope("NgZone#microtask()");
        this._inVmTurnDone = false;
        this._pendingTimeouts = [];
        this._onTurnStart = null;
        this._onTurnDone = null;
        this._onEventDone = null;
        this._onErrorHandler = null;
        this._pendingMicrotasks = 0;
        this._hasExecutedCodeInInnerZone = false;
        this._nestedRun = 0;
        if (lang_1.global.zone) {
          this._disabled = false;
          this._mountZone = lang_1.global.zone;
          this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
        } else {
          this._disabled = true;
          this._mountZone = null;
        }
      }
      NgZone.prototype.overrideOnTurnStart = function(onTurnStartFn) {
        this._onTurnStart = lang_1.normalizeBlank(onTurnStartFn);
      };
      NgZone.prototype.overrideOnTurnDone = function(onTurnDoneFn) {
        this._onTurnDone = lang_1.normalizeBlank(onTurnDoneFn);
      };
      NgZone.prototype.overrideOnEventDone = function(onEventDoneFn, opt_waitForAsync) {
        var _this = this;
        var normalizedOnEventDone = lang_1.normalizeBlank(onEventDoneFn);
        if (opt_waitForAsync) {
          this._onEventDone = function() {
            if (!_this._pendingTimeouts.length) {
              normalizedOnEventDone();
            }
          };
        } else {
          this._onEventDone = normalizedOnEventDone;
        }
      };
      NgZone.prototype.overrideOnErrorHandler = function(errorHandlingFn) {
        this._onErrorHandler = lang_1.normalizeBlank(errorHandlingFn);
      };
      NgZone.prototype.run = function(fn) {
        if (this._disabled) {
          var s = this._zone_run_scope();
          try {
            return fn();
          } finally {
            profile_1.wtfLeave(s);
          }
        } else {
          return this._innerZone.run(fn);
        }
      };
      NgZone.prototype.runOutsideAngular = function(fn) {
        if (this._disabled) {
          return fn();
        } else {
          return this._mountZone.run(fn);
        }
      };
      NgZone.prototype._createInnerZone = function(zone, enableLongStackTrace) {
        var _zone_microtask = this._zone_microtask;
        var ngZone = this;
        var errorHandling;
        if (enableLongStackTrace) {
          errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, {onError: function(e) {
              ngZone._onError(this, e);
            }});
        } else {
          errorHandling = {onError: function(e) {
              ngZone._onError(this, e);
            }};
        }
        return zone.fork(errorHandling).fork({
          '$run': function(parentRun) {
            return function() {
              try {
                ngZone._nestedRun++;
                if (!ngZone._hasExecutedCodeInInnerZone) {
                  ngZone._hasExecutedCodeInInnerZone = true;
                  if (ngZone._onTurnStart) {
                    parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
                  }
                }
                return parentRun.apply(this, arguments);
              } finally {
                ngZone._nestedRun--;
                if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 && !this._inVmTurnDone) {
                  if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {
                    try {
                      this._inVmTurnDone = true;
                      parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
                      if (ngZone._pendingMicrotasks === 0 && lang_1.isPresent(ngZone._onEventDone)) {
                        ngZone.runOutsideAngular(ngZone._onEventDone);
                      }
                    } finally {
                      this._inVmTurnDone = false;
                      ngZone._hasExecutedCodeInInnerZone = false;
                    }
                  }
                }
              }
            };
          },
          '$scheduleMicrotask': function(parentScheduleMicrotask) {
            return function(fn) {
              ngZone._pendingMicrotasks++;
              var microtask = function() {
                var s = _zone_microtask();
                try {
                  fn();
                } finally {
                  ngZone._pendingMicrotasks--;
                  profile_1.wtfLeave(s);
                }
              };
              parentScheduleMicrotask.call(this, microtask);
            };
          },
          '$setTimeout': function(parentSetTimeout) {
            return function(fn, delay) {
              var args = [];
              for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
              }
              var id;
              var cb = function() {
                fn();
                collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
              };
              id = parentSetTimeout(cb, delay, args);
              ngZone._pendingTimeouts.push(id);
              return id;
            };
          },
          '$clearTimeout': function(parentClearTimeout) {
            return function(id) {
              parentClearTimeout(id);
              collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
            };
          },
          _innerZone: true
        });
      };
      NgZone.prototype._onError = function(zone, e) {
        if (lang_1.isPresent(this._onErrorHandler)) {
          var trace = [lang_1.normalizeBlank(e.stack)];
          while (zone && zone.constructedAtException) {
            trace.push(zone.constructedAtException.get());
            zone = zone.parent;
          }
          this._onErrorHandler(e, trace);
        } else {
          console.log('## _onError ##');
          console.log(e.stack);
          throw e;
        }
      };
      return NgZone;
    })();
    exports.NgZone = NgZone;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/facade/async.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:rx@2.5.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var Rx = require("npm:rx@2.5.1.js");
  var PromiseWrapper = (function() {
    function PromiseWrapper() {}
    PromiseWrapper.resolve = function(obj) {
      return Promise.resolve(obj);
    };
    PromiseWrapper.reject = function(obj, _) {
      return Promise.reject(obj);
    };
    PromiseWrapper.catchError = function(promise, onError) {
      return promise.catch(onError);
    };
    PromiseWrapper.all = function(promises) {
      if (promises.length == 0)
        return Promise.resolve([]);
      return Promise.all(promises);
    };
    PromiseWrapper.then = function(promise, success, rejection) {
      return promise.then(success, rejection);
    };
    PromiseWrapper.wrap = function(computation) {
      return new Promise(function(res, rej) {
        try {
          res(computation());
        } catch (e) {
          rej(e);
        }
      });
    };
    PromiseWrapper.completer = function() {
      var resolve;
      var reject;
      var p = new Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      return {
        promise: p,
        resolve: resolve,
        reject: reject
      };
    };
    return PromiseWrapper;
  })();
  exports.PromiseWrapper = PromiseWrapper;
  var TimerWrapper = (function() {
    function TimerWrapper() {}
    TimerWrapper.setTimeout = function(fn, millis) {
      return lang_1.global.setTimeout(fn, millis);
    };
    TimerWrapper.clearTimeout = function(id) {
      lang_1.global.clearTimeout(id);
    };
    TimerWrapper.setInterval = function(fn, millis) {
      return lang_1.global.setInterval(fn, millis);
    };
    TimerWrapper.clearInterval = function(id) {
      lang_1.global.clearInterval(id);
    };
    return TimerWrapper;
  })();
  exports.TimerWrapper = TimerWrapper;
  var ObservableWrapper = (function() {
    function ObservableWrapper() {}
    ObservableWrapper.subscribe = function(emitter, onNext, onThrow, onReturn) {
      if (onThrow === void 0) {
        onThrow = null;
      }
      if (onReturn === void 0) {
        onReturn = null;
      }
      return emitter.observer({
        next: onNext,
        throw: onThrow,
        return: onReturn
      });
    };
    ObservableWrapper.isObservable = function(obs) {
      return obs instanceof Observable;
    };
    ObservableWrapper.dispose = function(subscription) {
      subscription.dispose();
    };
    ObservableWrapper.callNext = function(emitter, value) {
      emitter.next(value);
    };
    ObservableWrapper.callThrow = function(emitter, error) {
      emitter.throw(error);
    };
    ObservableWrapper.callReturn = function(emitter) {
      emitter.return(null);
    };
    return ObservableWrapper;
  })();
  exports.ObservableWrapper = ObservableWrapper;
  var Observable = (function() {
    function Observable() {}
    Observable.prototype.observer = function(generator) {
      return null;
    };
    return Observable;
  })();
  exports.Observable = Observable;
  var EventEmitter = (function(_super) {
    __extends(EventEmitter, _super);
    function EventEmitter() {
      _super.call(this);
      if (Rx.hasOwnProperty('default')) {
        this._subject = new Rx.default.Rx.Subject();
        this._immediateScheduler = Rx.default.Rx.Scheduler.immediate;
      } else {
        this._subject = new Rx.Subject();
        this._immediateScheduler = Rx.Scheduler.immediate;
      }
    }
    EventEmitter.prototype.observer = function(generator) {
      return this._subject.observeOn(this._immediateScheduler).subscribe(function(value) {
        setTimeout(function() {
          return generator.next(value);
        });
      }, function(error) {
        return generator.throw ? generator.throw(error) : null;
      }, function() {
        return generator.return ? generator.return() : null;
      });
    };
    EventEmitter.prototype.toRx = function() {
      return this._subject;
    };
    EventEmitter.prototype.next = function(value) {
      this._subject.onNext(value);
    };
    EventEmitter.prototype.throw = function(error) {
      this._subject.onError(error);
    };
    EventEmitter.prototype.return = function(value) {
      this._subject.onCompleted();
    };
    return EventEmitter;
  })(Observable);
  exports.EventEmitter = EventEmitter;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/metadata.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var InjectMetadata = (function() {
    function InjectMetadata(token) {
      this.token = token;
    }
    InjectMetadata.prototype.toString = function() {
      return "@Inject(" + lang_1.stringify(this.token) + ")";
    };
    InjectMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], InjectMetadata);
    return InjectMetadata;
  })();
  exports.InjectMetadata = InjectMetadata;
  var OptionalMetadata = (function() {
    function OptionalMetadata() {}
    OptionalMetadata.prototype.toString = function() {
      return "@Optional()";
    };
    OptionalMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], OptionalMetadata);
    return OptionalMetadata;
  })();
  exports.OptionalMetadata = OptionalMetadata;
  var DependencyMetadata = (function() {
    function DependencyMetadata() {}
    Object.defineProperty(DependencyMetadata.prototype, "token", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    DependencyMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], DependencyMetadata);
    return DependencyMetadata;
  })();
  exports.DependencyMetadata = DependencyMetadata;
  var InjectableMetadata = (function() {
    function InjectableMetadata() {}
    InjectableMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], InjectableMetadata);
    return InjectableMetadata;
  })();
  exports.InjectableMetadata = InjectableMetadata;
  var SelfMetadata = (function() {
    function SelfMetadata() {}
    SelfMetadata.prototype.toString = function() {
      return "@Self()";
    };
    SelfMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], SelfMetadata);
    return SelfMetadata;
  })();
  exports.SelfMetadata = SelfMetadata;
  var SkipSelfMetadata = (function() {
    function SkipSelfMetadata() {}
    SkipSelfMetadata.prototype.toString = function() {
      return "@SkipSelf()";
    };
    SkipSelfMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], SkipSelfMetadata);
    return SkipSelfMetadata;
  })();
  exports.SkipSelfMetadata = SkipSelfMetadata;
  var HostMetadata = (function() {
    function HostMetadata() {}
    HostMetadata.prototype.toString = function() {
      return "@Host()";
    };
    HostMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], HostMetadata);
    return HostMetadata;
  })();
  exports.HostMetadata = HostMetadata;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/decorators.js", ["npm:angular2@2.0.0-alpha.35/src/di/metadata.js", "npm:angular2@2.0.0-alpha.35/src/util/decorators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/di/metadata.js");
  var decorators_1 = require("npm:angular2@2.0.0-alpha.35/src/util/decorators.js");
  exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
  exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
  exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
  exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
  exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
  exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function() {
      return lang_1.stringify(this());
    };
    return forwardRefFn;
  }
  exports.forwardRef = forwardRef;
  function resolveForwardRef(type) {
    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
      return type();
    } else {
      return type;
    }
  }
  exports.resolveForwardRef = resolveForwardRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/injector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/di/binding.js", "npm:angular2@2.0.0-alpha.35/src/di/exceptions.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/di/key.js", "npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js", "npm:angular2@2.0.0-alpha.35/src/di/metadata.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var binding_1 = require("npm:angular2@2.0.0-alpha.35/src/di/binding.js");
    var exceptions_1 = require("npm:angular2@2.0.0-alpha.35/src/di/exceptions.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var key_1 = require("npm:angular2@2.0.0-alpha.35/src/di/key.js");
    var forward_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js");
    var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/di/metadata.js");
    var _MAX_CONSTRUCTION_COUNTER = 10;
    exports.UNDEFINED = lang_1.CONST_EXPR(new Object());
    (function(Visibility) {
      Visibility[Visibility["Public"] = 0] = "Public";
      Visibility[Visibility["Private"] = 1] = "Private";
      Visibility[Visibility["PublicAndPrivate"] = 2] = "PublicAndPrivate";
    })(exports.Visibility || (exports.Visibility = {}));
    var Visibility = exports.Visibility;
    function canSee(src, dst) {
      return (src === dst) || (dst === Visibility.PublicAndPrivate || src === Visibility.PublicAndPrivate);
    }
    var ProtoInjectorInlineStrategy = (function() {
      function ProtoInjectorInlineStrategy(protoEI, bwv) {
        this.binding0 = null;
        this.binding1 = null;
        this.binding2 = null;
        this.binding3 = null;
        this.binding4 = null;
        this.binding5 = null;
        this.binding6 = null;
        this.binding7 = null;
        this.binding8 = null;
        this.binding9 = null;
        this.keyId0 = null;
        this.keyId1 = null;
        this.keyId2 = null;
        this.keyId3 = null;
        this.keyId4 = null;
        this.keyId5 = null;
        this.keyId6 = null;
        this.keyId7 = null;
        this.keyId8 = null;
        this.keyId9 = null;
        this.visibility0 = null;
        this.visibility1 = null;
        this.visibility2 = null;
        this.visibility3 = null;
        this.visibility4 = null;
        this.visibility5 = null;
        this.visibility6 = null;
        this.visibility7 = null;
        this.visibility8 = null;
        this.visibility9 = null;
        var length = bwv.length;
        if (length > 0) {
          this.binding0 = bwv[0].binding;
          this.keyId0 = bwv[0].getKeyId();
          this.visibility0 = bwv[0].visibility;
        }
        if (length > 1) {
          this.binding1 = bwv[1].binding;
          this.keyId1 = bwv[1].getKeyId();
          this.visibility1 = bwv[1].visibility;
        }
        if (length > 2) {
          this.binding2 = bwv[2].binding;
          this.keyId2 = bwv[2].getKeyId();
          this.visibility2 = bwv[2].visibility;
        }
        if (length > 3) {
          this.binding3 = bwv[3].binding;
          this.keyId3 = bwv[3].getKeyId();
          this.visibility3 = bwv[3].visibility;
        }
        if (length > 4) {
          this.binding4 = bwv[4].binding;
          this.keyId4 = bwv[4].getKeyId();
          this.visibility4 = bwv[4].visibility;
        }
        if (length > 5) {
          this.binding5 = bwv[5].binding;
          this.keyId5 = bwv[5].getKeyId();
          this.visibility5 = bwv[5].visibility;
        }
        if (length > 6) {
          this.binding6 = bwv[6].binding;
          this.keyId6 = bwv[6].getKeyId();
          this.visibility6 = bwv[6].visibility;
        }
        if (length > 7) {
          this.binding7 = bwv[7].binding;
          this.keyId7 = bwv[7].getKeyId();
          this.visibility7 = bwv[7].visibility;
        }
        if (length > 8) {
          this.binding8 = bwv[8].binding;
          this.keyId8 = bwv[8].getKeyId();
          this.visibility8 = bwv[8].visibility;
        }
        if (length > 9) {
          this.binding9 = bwv[9].binding;
          this.keyId9 = bwv[9].getKeyId();
          this.visibility9 = bwv[9].visibility;
        }
      }
      ProtoInjectorInlineStrategy.prototype.getBindingAtIndex = function(index) {
        if (index == 0)
          return this.binding0;
        if (index == 1)
          return this.binding1;
        if (index == 2)
          return this.binding2;
        if (index == 3)
          return this.binding3;
        if (index == 4)
          return this.binding4;
        if (index == 5)
          return this.binding5;
        if (index == 6)
          return this.binding6;
        if (index == 7)
          return this.binding7;
        if (index == 8)
          return this.binding8;
        if (index == 9)
          return this.binding9;
        throw new exceptions_1.OutOfBoundsError(index);
      };
      ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
        return new InjectorInlineStrategy(injector, this);
      };
      return ProtoInjectorInlineStrategy;
    })();
    exports.ProtoInjectorInlineStrategy = ProtoInjectorInlineStrategy;
    var ProtoInjectorDynamicStrategy = (function() {
      function ProtoInjectorDynamicStrategy(protoInj, bwv) {
        var len = bwv.length;
        this.bindings = collection_1.ListWrapper.createFixedSize(len);
        this.keyIds = collection_1.ListWrapper.createFixedSize(len);
        this.visibilities = collection_1.ListWrapper.createFixedSize(len);
        for (var i = 0; i < len; i++) {
          this.bindings[i] = bwv[i].binding;
          this.keyIds[i] = bwv[i].getKeyId();
          this.visibilities[i] = bwv[i].visibility;
        }
      }
      ProtoInjectorDynamicStrategy.prototype.getBindingAtIndex = function(index) {
        if (index < 0 || index >= this.bindings.length) {
          throw new exceptions_1.OutOfBoundsError(index);
        }
        return this.bindings[index];
      };
      ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
        return new InjectorDynamicStrategy(this, ei);
      };
      return ProtoInjectorDynamicStrategy;
    })();
    exports.ProtoInjectorDynamicStrategy = ProtoInjectorDynamicStrategy;
    var ProtoInjector = (function() {
      function ProtoInjector(bwv) {
        this.numberOfBindings = bwv.length;
        this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ? new ProtoInjectorDynamicStrategy(this, bwv) : new ProtoInjectorInlineStrategy(this, bwv);
      }
      ProtoInjector.prototype.getBindingAtIndex = function(index) {
        return this._strategy.getBindingAtIndex(index);
      };
      return ProtoInjector;
    })();
    exports.ProtoInjector = ProtoInjector;
    var InjectorInlineStrategy = (function() {
      function InjectorInlineStrategy(injector, protoStrategy) {
        this.injector = injector;
        this.protoStrategy = protoStrategy;
        this.obj0 = exports.UNDEFINED;
        this.obj1 = exports.UNDEFINED;
        this.obj2 = exports.UNDEFINED;
        this.obj3 = exports.UNDEFINED;
        this.obj4 = exports.UNDEFINED;
        this.obj5 = exports.UNDEFINED;
        this.obj6 = exports.UNDEFINED;
        this.obj7 = exports.UNDEFINED;
        this.obj8 = exports.UNDEFINED;
        this.obj9 = exports.UNDEFINED;
      }
      InjectorInlineStrategy.prototype.resetConstructionCounter = function() {
        this.injector._constructionCounter = 0;
      };
      InjectorInlineStrategy.prototype.instantiateBinding = function(binding, visibility) {
        return this.injector._new(binding, visibility);
      };
      InjectorInlineStrategy.prototype.attach = function(parent, isHost) {
        var inj = this.injector;
        inj._parent = parent;
        inj._isHost = isHost;
      };
      InjectorInlineStrategy.prototype.getObjByKeyId = function(keyId, visibility) {
        var p = this.protoStrategy;
        var inj = this.injector;
        if (p.keyId0 === keyId && canSee(p.visibility0, visibility)) {
          if (this.obj0 === exports.UNDEFINED) {
            this.obj0 = inj._new(p.binding0, p.visibility0);
          }
          return this.obj0;
        }
        if (p.keyId1 === keyId && canSee(p.visibility1, visibility)) {
          if (this.obj1 === exports.UNDEFINED) {
            this.obj1 = inj._new(p.binding1, p.visibility1);
          }
          return this.obj1;
        }
        if (p.keyId2 === keyId && canSee(p.visibility2, visibility)) {
          if (this.obj2 === exports.UNDEFINED) {
            this.obj2 = inj._new(p.binding2, p.visibility2);
          }
          return this.obj2;
        }
        if (p.keyId3 === keyId && canSee(p.visibility3, visibility)) {
          if (this.obj3 === exports.UNDEFINED) {
            this.obj3 = inj._new(p.binding3, p.visibility3);
          }
          return this.obj3;
        }
        if (p.keyId4 === keyId && canSee(p.visibility4, visibility)) {
          if (this.obj4 === exports.UNDEFINED) {
            this.obj4 = inj._new(p.binding4, p.visibility4);
          }
          return this.obj4;
        }
        if (p.keyId5 === keyId && canSee(p.visibility5, visibility)) {
          if (this.obj5 === exports.UNDEFINED) {
            this.obj5 = inj._new(p.binding5, p.visibility5);
          }
          return this.obj5;
        }
        if (p.keyId6 === keyId && canSee(p.visibility6, visibility)) {
          if (this.obj6 === exports.UNDEFINED) {
            this.obj6 = inj._new(p.binding6, p.visibility6);
          }
          return this.obj6;
        }
        if (p.keyId7 === keyId && canSee(p.visibility7, visibility)) {
          if (this.obj7 === exports.UNDEFINED) {
            this.obj7 = inj._new(p.binding7, p.visibility7);
          }
          return this.obj7;
        }
        if (p.keyId8 === keyId && canSee(p.visibility8, visibility)) {
          if (this.obj8 === exports.UNDEFINED) {
            this.obj8 = inj._new(p.binding8, p.visibility8);
          }
          return this.obj8;
        }
        if (p.keyId9 === keyId && canSee(p.visibility9, visibility)) {
          if (this.obj9 === exports.UNDEFINED) {
            this.obj9 = inj._new(p.binding9, p.visibility9);
          }
          return this.obj9;
        }
        return exports.UNDEFINED;
      };
      InjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
        if (index == 0)
          return this.obj0;
        if (index == 1)
          return this.obj1;
        if (index == 2)
          return this.obj2;
        if (index == 3)
          return this.obj3;
        if (index == 4)
          return this.obj4;
        if (index == 5)
          return this.obj5;
        if (index == 6)
          return this.obj6;
        if (index == 7)
          return this.obj7;
        if (index == 8)
          return this.obj8;
        if (index == 9)
          return this.obj9;
        throw new exceptions_1.OutOfBoundsError(index);
      };
      InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
        return _MAX_CONSTRUCTION_COUNTER;
      };
      return InjectorInlineStrategy;
    })();
    exports.InjectorInlineStrategy = InjectorInlineStrategy;
    var InjectorDynamicStrategy = (function() {
      function InjectorDynamicStrategy(protoStrategy, injector) {
        this.protoStrategy = protoStrategy;
        this.injector = injector;
        this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.bindings.length);
        collection_1.ListWrapper.fill(this.objs, exports.UNDEFINED);
      }
      InjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
        this.injector._constructionCounter = 0;
      };
      InjectorDynamicStrategy.prototype.instantiateBinding = function(binding, visibility) {
        return this.injector._new(binding, visibility);
      };
      InjectorDynamicStrategy.prototype.attach = function(parent, isHost) {
        var inj = this.injector;
        inj._parent = parent;
        inj._isHost = isHost;
      };
      InjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId, visibility) {
        var p = this.protoStrategy;
        for (var i = 0; i < p.keyIds.length; i++) {
          if (p.keyIds[i] === keyId && canSee(p.visibilities[i], visibility)) {
            if (this.objs[i] === exports.UNDEFINED) {
              this.objs[i] = this.injector._new(p.bindings[i], p.visibilities[i]);
            }
            return this.objs[i];
          }
        }
        return exports.UNDEFINED;
      };
      InjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
        if (index < 0 || index >= this.objs.length) {
          throw new exceptions_1.OutOfBoundsError(index);
        }
        return this.objs[index];
      };
      InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
        return this.objs.length;
      };
      return InjectorDynamicStrategy;
    })();
    exports.InjectorDynamicStrategy = InjectorDynamicStrategy;
    var BindingWithVisibility = (function() {
      function BindingWithVisibility(binding, visibility) {
        this.binding = binding;
        this.visibility = visibility;
      }
      ;
      BindingWithVisibility.prototype.getKeyId = function() {
        return this.binding.key.id;
      };
      return BindingWithVisibility;
    })();
    exports.BindingWithVisibility = BindingWithVisibility;
    var Injector = (function() {
      function Injector(_proto, _parent, _depProvider, _debugContext) {
        if (_parent === void 0) {
          _parent = null;
        }
        if (_depProvider === void 0) {
          _depProvider = null;
        }
        if (_debugContext === void 0) {
          _debugContext = null;
        }
        this._proto = _proto;
        this._parent = _parent;
        this._depProvider = _depProvider;
        this._debugContext = _debugContext;
        this._isHost = false;
        this._constructionCounter = 0;
        this._strategy = _proto._strategy.createInjectorStrategy(this);
      }
      Injector.resolve = function(bindings) {
        var resolvedBindings = _resolveBindings(bindings);
        var flatten = _flattenBindings(resolvedBindings, new collection_1.Map());
        return _createListOfBindings(flatten);
      };
      Injector.resolveAndCreate = function(bindings, depProvider) {
        if (depProvider === void 0) {
          depProvider = null;
        }
        var resolvedBindings = Injector.resolve(bindings);
        return Injector.fromResolvedBindings(resolvedBindings, depProvider);
      };
      Injector.fromResolvedBindings = function(bindings, depProvider) {
        if (depProvider === void 0) {
          depProvider = null;
        }
        var bd = bindings.map(function(b) {
          return new BindingWithVisibility(b, Visibility.Public);
        });
        var proto = new ProtoInjector(bd);
        var inj = new Injector(proto, null, depProvider);
        return inj;
      };
      Injector.prototype.debugContext = function() {
        return this._debugContext();
      };
      Injector.prototype.get = function(token) {
        return this._getByKey(key_1.Key.get(token), null, null, false, Visibility.PublicAndPrivate);
      };
      Injector.prototype.getOptional = function(token) {
        return this._getByKey(key_1.Key.get(token), null, null, true, Visibility.PublicAndPrivate);
      };
      Injector.prototype.getAt = function(index) {
        return this._strategy.getObjAtIndex(index);
      };
      Object.defineProperty(Injector.prototype, "parent", {
        get: function() {
          return this._parent;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Injector.prototype, "internalStrategy", {
        get: function() {
          return this._strategy;
        },
        enumerable: true,
        configurable: true
      });
      Injector.prototype.resolveAndCreateChild = function(bindings, depProvider) {
        if (depProvider === void 0) {
          depProvider = null;
        }
        var resovledBindings = Injector.resolve(bindings);
        return this.createChildFromResolved(resovledBindings, depProvider);
      };
      Injector.prototype.createChildFromResolved = function(bindings, depProvider) {
        if (depProvider === void 0) {
          depProvider = null;
        }
        var bd = bindings.map(function(b) {
          return new BindingWithVisibility(b, Visibility.Public);
        });
        var proto = new ProtoInjector(bd);
        var inj = new Injector(proto, null, depProvider);
        inj._parent = this;
        return inj;
      };
      Injector.prototype.resolveAndInstantiate = function(binding) {
        return this.instantiateResolved(Injector.resolve([binding])[0]);
      };
      Injector.prototype.instantiateResolved = function(binding) {
        return this._instantiate(binding, Visibility.PublicAndPrivate);
      };
      Injector.prototype._new = function(binding, visibility) {
        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
          throw new exceptions_1.CyclicDependencyError(this, binding.key);
        }
        return this._instantiate(binding, visibility);
      };
      Injector.prototype._instantiate = function(binding, visibility) {
        var factory = binding.factory;
        var deps = binding.dependencies;
        var length = deps.length;
        var d0,
            d1,
            d2,
            d3,
            d4,
            d5,
            d6,
            d7,
            d8,
            d9,
            d10,
            d11,
            d12,
            d13,
            d14,
            d15,
            d16,
            d17,
            d18,
            d19;
        try {
          d0 = length > 0 ? this._getByDependency(binding, deps[0], visibility) : null;
          d1 = length > 1 ? this._getByDependency(binding, deps[1], visibility) : null;
          d2 = length > 2 ? this._getByDependency(binding, deps[2], visibility) : null;
          d3 = length > 3 ? this._getByDependency(binding, deps[3], visibility) : null;
          d4 = length > 4 ? this._getByDependency(binding, deps[4], visibility) : null;
          d5 = length > 5 ? this._getByDependency(binding, deps[5], visibility) : null;
          d6 = length > 6 ? this._getByDependency(binding, deps[6], visibility) : null;
          d7 = length > 7 ? this._getByDependency(binding, deps[7], visibility) : null;
          d8 = length > 8 ? this._getByDependency(binding, deps[8], visibility) : null;
          d9 = length > 9 ? this._getByDependency(binding, deps[9], visibility) : null;
          d10 = length > 10 ? this._getByDependency(binding, deps[10], visibility) : null;
          d11 = length > 11 ? this._getByDependency(binding, deps[11], visibility) : null;
          d12 = length > 12 ? this._getByDependency(binding, deps[12], visibility) : null;
          d13 = length > 13 ? this._getByDependency(binding, deps[13], visibility) : null;
          d14 = length > 14 ? this._getByDependency(binding, deps[14], visibility) : null;
          d15 = length > 15 ? this._getByDependency(binding, deps[15], visibility) : null;
          d16 = length > 16 ? this._getByDependency(binding, deps[16], visibility) : null;
          d17 = length > 17 ? this._getByDependency(binding, deps[17], visibility) : null;
          d18 = length > 18 ? this._getByDependency(binding, deps[18], visibility) : null;
          d19 = length > 19 ? this._getByDependency(binding, deps[19], visibility) : null;
        } catch (e) {
          if (e instanceof exceptions_1.AbstractBindingError) {
            e.addKey(this, binding.key);
          }
          throw e;
        }
        var obj;
        try {
          switch (length) {
            case 0:
              obj = factory();
              break;
            case 1:
              obj = factory(d0);
              break;
            case 2:
              obj = factory(d0, d1);
              break;
            case 3:
              obj = factory(d0, d1, d2);
              break;
            case 4:
              obj = factory(d0, d1, d2, d3);
              break;
            case 5:
              obj = factory(d0, d1, d2, d3, d4);
              break;
            case 6:
              obj = factory(d0, d1, d2, d3, d4, d5);
              break;
            case 7:
              obj = factory(d0, d1, d2, d3, d4, d5, d6);
              break;
            case 8:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
              break;
            case 9:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
              break;
            case 10:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
              break;
            case 11:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
              break;
            case 12:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
              break;
            case 13:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
              break;
            case 14:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
              break;
            case 15:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
              break;
            case 16:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
              break;
            case 17:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
              break;
            case 18:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
              break;
            case 19:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
              break;
            case 20:
              obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
              break;
          }
        } catch (e) {
          throw new exceptions_1.InstantiationError(this, e, e.stack, binding.key);
        }
        return obj;
      };
      Injector.prototype._getByDependency = function(binding, dep, bindingVisibility) {
        var special = lang_1.isPresent(this._depProvider) ? this._depProvider.getDependency(this, binding, dep) : exports.UNDEFINED;
        if (special !== exports.UNDEFINED) {
          return special;
        } else {
          return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional, bindingVisibility);
        }
      };
      Injector.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, optional, bindingVisibility) {
        if (key === INJECTOR_KEY) {
          return this;
        }
        if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
          return this._getByKeySelf(key, optional, bindingVisibility);
        } else if (upperBoundVisibility instanceof metadata_1.HostMetadata) {
          return this._getByKeyHost(key, optional, bindingVisibility, lowerBoundVisibility);
        } else {
          return this._getByKeyDefault(key, optional, bindingVisibility, lowerBoundVisibility);
        }
      };
      Injector.prototype._throwOrNull = function(key, optional) {
        if (optional) {
          return null;
        } else {
          throw new exceptions_1.NoBindingError(this, key);
        }
      };
      Injector.prototype._getByKeySelf = function(key, optional, bindingVisibility) {
        var obj = this._strategy.getObjByKeyId(key.id, bindingVisibility);
        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
      };
      Injector.prototype._getByKeyHost = function(key, optional, bindingVisibility, lowerBoundVisibility) {
        var inj = this;
        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
          if (inj._isHost) {
            return this._getPrivateDependency(key, optional, inj);
          } else {
            inj = inj._parent;
          }
        }
        while (inj != null) {
          var obj = inj._strategy.getObjByKeyId(key.id, bindingVisibility);
          if (obj !== exports.UNDEFINED)
            return obj;
          if (lang_1.isPresent(inj._parent) && inj._isHost) {
            return this._getPrivateDependency(key, optional, inj);
          } else {
            inj = inj._parent;
          }
        }
        return this._throwOrNull(key, optional);
      };
      Injector.prototype._getPrivateDependency = function(key, optional, inj) {
        var obj = inj._parent._strategy.getObjByKeyId(key.id, Visibility.Private);
        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
      };
      Injector.prototype._getByKeyDefault = function(key, optional, bindingVisibility, lowerBoundVisibility) {
        var inj = this;
        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
          bindingVisibility = inj._isHost ? Visibility.PublicAndPrivate : Visibility.Public;
          inj = inj._parent;
        }
        while (inj != null) {
          var obj = inj._strategy.getObjByKeyId(key.id, bindingVisibility);
          if (obj !== exports.UNDEFINED)
            return obj;
          bindingVisibility = inj._isHost ? Visibility.PublicAndPrivate : Visibility.Public;
          inj = inj._parent;
        }
        return this._throwOrNull(key, optional);
      };
      Object.defineProperty(Injector.prototype, "displayName", {
        get: function() {
          return "Injector(bindings: [" + _mapBindings(this, function(b) {
            return (" \"" + b.key.displayName + "\" ");
          }).join(", ") + "])";
        },
        enumerable: true,
        configurable: true
      });
      Injector.prototype.toString = function() {
        return this.displayName;
      };
      return Injector;
    })();
    exports.Injector = Injector;
    var INJECTOR_KEY = key_1.Key.get(Injector);
    function _resolveBindings(bindings) {
      var resolvedList = collection_1.ListWrapper.createFixedSize(bindings.length);
      for (var i = 0; i < bindings.length; i++) {
        var unresolved = forward_ref_1.resolveForwardRef(bindings[i]);
        var resolved;
        if (unresolved instanceof binding_1.ResolvedBinding) {
          resolved = unresolved;
        } else if (unresolved instanceof lang_1.Type) {
          resolved = binding_1.bind(unresolved).toClass(unresolved).resolve();
        } else if (unresolved instanceof binding_1.Binding) {
          resolved = unresolved.resolve();
        } else if (unresolved instanceof collection_1.List) {
          resolved = _resolveBindings(unresolved);
        } else if (unresolved instanceof binding_1.BindingBuilder) {
          throw new exceptions_1.InvalidBindingError(unresolved.token);
        } else {
          throw new exceptions_1.InvalidBindingError(unresolved);
        }
        resolvedList[i] = resolved;
      }
      return resolvedList;
    }
    function _createListOfBindings(flattenedBindings) {
      return collection_1.MapWrapper.values(flattenedBindings);
    }
    function _flattenBindings(bindings, res) {
      collection_1.ListWrapper.forEach(bindings, function(b) {
        if (b instanceof binding_1.ResolvedBinding) {
          res.set(b.key.id, b);
        } else if (b instanceof collection_1.List) {
          _flattenBindings(b, res);
        }
      });
      return res;
    }
    function _mapBindings(injector, fn) {
      var res = [];
      for (var i = 0; i < injector._proto.numberOfBindings; ++i) {
        res.push(fn(injector._proto.getBindingAtIndex(i)));
      }
      return res;
    }
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/binding.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js", "npm:angular2@2.0.0-alpha.35/src/di/key.js", "npm:angular2@2.0.0-alpha.35/src/di/metadata.js", "npm:angular2@2.0.0-alpha.35/src/di/exceptions.js", "npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var key_1 = require("npm:angular2@2.0.0-alpha.35/src/di/key.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/di/metadata.js");
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.35/src/di/exceptions.js");
  var forward_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js");
  var Dependency = (function() {
    function Dependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
      this.key = key;
      this.optional = optional;
      this.lowerBoundVisibility = lowerBoundVisibility;
      this.upperBoundVisibility = upperBoundVisibility;
      this.properties = properties;
    }
    Dependency.fromKey = function(key) {
      return new Dependency(key, false, null, null, []);
    };
    return Dependency;
  })();
  exports.Dependency = Dependency;
  var _EMPTY_LIST = lang_1.CONST_EXPR([]);
  var Binding = (function() {
    function Binding(token, _a) {
      var toClass = _a.toClass,
          toValue = _a.toValue,
          toAlias = _a.toAlias,
          toFactory = _a.toFactory,
          deps = _a.deps;
      this.token = token;
      this.toClass = toClass;
      this.toValue = toValue;
      this.toAlias = toAlias;
      this.toFactory = toFactory;
      this.dependencies = deps;
    }
    Binding.prototype.resolve = function() {
      var _this = this;
      var factoryFn;
      var resolvedDeps;
      if (lang_1.isPresent(this.toClass)) {
        var toClass = forward_ref_1.resolveForwardRef(this.toClass);
        factoryFn = reflection_1.reflector.factory(toClass);
        resolvedDeps = _dependenciesFor(toClass);
      } else if (lang_1.isPresent(this.toAlias)) {
        factoryFn = function(aliasInstance) {
          return aliasInstance;
        };
        resolvedDeps = [Dependency.fromKey(key_1.Key.get(this.toAlias))];
      } else if (lang_1.isPresent(this.toFactory)) {
        factoryFn = this.toFactory;
        resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);
      } else {
        factoryFn = function() {
          return _this.toValue;
        };
        resolvedDeps = _EMPTY_LIST;
      }
      return new ResolvedBinding(key_1.Key.get(this.token), factoryFn, resolvedDeps);
    };
    Binding = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object, Object])], Binding);
    return Binding;
  })();
  exports.Binding = Binding;
  var ResolvedBinding = (function() {
    function ResolvedBinding(key, factory, dependencies) {
      this.key = key;
      this.factory = factory;
      this.dependencies = dependencies;
    }
    return ResolvedBinding;
  })();
  exports.ResolvedBinding = ResolvedBinding;
  function bind(token) {
    return new BindingBuilder(token);
  }
  exports.bind = bind;
  var BindingBuilder = (function() {
    function BindingBuilder(token) {
      this.token = token;
    }
    BindingBuilder.prototype.toClass = function(type) {
      return new Binding(this.token, {toClass: type});
    };
    BindingBuilder.prototype.toValue = function(value) {
      return new Binding(this.token, {toValue: value});
    };
    BindingBuilder.prototype.toAlias = function(aliasToken) {
      if (lang_1.isBlank(aliasToken)) {
        throw new lang_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
      }
      return new Binding(this.token, {toAlias: aliasToken});
    };
    BindingBuilder.prototype.toFactory = function(factoryFunction, dependencies) {
      return new Binding(this.token, {
        toFactory: factoryFunction,
        deps: dependencies
      });
    };
    return BindingBuilder;
  })();
  exports.BindingBuilder = BindingBuilder;
  function _constructDependencies(factoryFunction, dependencies) {
    if (lang_1.isBlank(dependencies)) {
      return _dependenciesFor(factoryFunction);
    } else {
      var params = collection_1.ListWrapper.map(dependencies, function(t) {
        return [t];
      });
      return collection_1.ListWrapper.map(dependencies, function(t) {
        return _extractToken(factoryFunction, t, params);
      });
    }
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflection_1.reflector.parameters(typeOrFunc);
    if (lang_1.isBlank(params))
      return [];
    if (collection_1.ListWrapper.any(params, function(p) {
      return lang_1.isBlank(p);
    })) {
      throw new exceptions_1.NoAnnotationError(typeOrFunc, params);
    }
    return collection_1.ListWrapper.map(params, function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!lang_1.isArray(metadata)) {
      return _createDependency(metadata, optional, null, null, depProps);
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      if (paramMetadata instanceof lang_1.Type) {
        token = paramMetadata;
      } else if (paramMetadata instanceof metadata_1.InjectMetadata) {
        token = paramMetadata.token;
      } else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
        optional = true;
      } else if (paramMetadata instanceof metadata_1.SelfMetadata) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof metadata_1.HostMetadata) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
        lowerBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
        if (lang_1.isPresent(paramMetadata.token)) {
          token = paramMetadata.token;
        }
        depProps.push(paramMetadata);
      }
    }
    token = forward_ref_1.resolveForwardRef(token);
    if (lang_1.isPresent(token)) {
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    } else {
      throw new exceptions_1.NoAnnotationError(typeOrFunc, params);
    }
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new Dependency(key_1.Key.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/key.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/di/type_literal.js", "npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js", "npm:angular2@2.0.0-alpha.35/src/di/type_literal.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var type_literal_1 = require("npm:angular2@2.0.0-alpha.35/src/di/type_literal.js");
  var forward_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/di/forward_ref.js");
  var type_literal_2 = require("npm:angular2@2.0.0-alpha.35/src/di/type_literal.js");
  exports.TypeLiteral = type_literal_2.TypeLiteral;
  var Key = (function() {
    function Key(token, id) {
      this.token = token;
      this.id = id;
      if (lang_1.isBlank(token)) {
        throw new lang_1.BaseException('Token must be defined!');
      }
    }
    Object.defineProperty(Key.prototype, "displayName", {
      get: function() {
        return lang_1.stringify(this.token);
      },
      enumerable: true,
      configurable: true
    });
    Key.get = function(token) {
      return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
    };
    Object.defineProperty(Key, "numberOfKeys", {
      get: function() {
        return _globalKeyRegistry.numberOfKeys;
      },
      enumerable: true,
      configurable: true
    });
    return Key;
  })();
  exports.Key = Key;
  var KeyRegistry = (function() {
    function KeyRegistry() {
      this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function(token) {
      if (token instanceof Key)
        return token;
      var theToken = token;
      if (token instanceof type_literal_1.TypeLiteral) {
        theToken = token.type;
      }
      token = theToken;
      if (this._allKeys.has(token)) {
        return this._allKeys.get(token);
      }
      var newKey = new Key(token, Key.numberOfKeys);
      this._allKeys.set(token, newKey);
      return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
      get: function() {
        return collection_1.MapWrapper.size(this._allKeys);
      },
      enumerable: true,
      configurable: true
    });
    return KeyRegistry;
  })();
  exports.KeyRegistry = KeyRegistry;
  var _globalKeyRegistry = new KeyRegistry();
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/exceptions.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
      if (collection_1.ListWrapper.contains(res, keys[i])) {
        res.push(keys[i]);
        return res;
      } else {
        res.push(keys[i]);
      }
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
      var tokenStrs = collection_1.ListWrapper.map(reversed, function(k) {
        return lang_1.stringify(k.token);
      });
      return " (" + tokenStrs.join(' -> ') + ")";
    } else {
      return "";
    }
  }
  var AbstractBindingError = (function(_super) {
    __extends(AbstractBindingError, _super);
    function AbstractBindingError(injector, key, constructResolvingMessage, originalException, originalStack) {
      _super.call(this, "DI Exception", originalException, originalStack, null);
      this.keys = [key];
      this.injectors = [injector];
      this.constructResolvingMessage = constructResolvingMessage;
      this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractBindingError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
      this.message = this.constructResolvingMessage(this.keys);
    };
    Object.defineProperty(AbstractBindingError.prototype, "context", {
      get: function() {
        return this.injectors[this.injectors.length - 1].debugContext();
      },
      enumerable: true,
      configurable: true
    });
    AbstractBindingError.prototype.toString = function() {
      return this.message;
    };
    return AbstractBindingError;
  })(lang_1.BaseException);
  exports.AbstractBindingError = AbstractBindingError;
  var NoBindingError = (function(_super) {
    __extends(NoBindingError, _super);
    function NoBindingError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
      });
    }
    return NoBindingError;
  })(AbstractBindingError);
  exports.NoBindingError = NoBindingError;
  var CyclicDependencyError = (function(_super) {
    __extends(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
      });
    }
    return CyclicDependencyError;
  })(AbstractBindingError);
  exports.CyclicDependencyError = CyclicDependencyError;
  var InstantiationError = (function(_super) {
    __extends(InstantiationError, _super);
    function InstantiationError(injector, originalException, originalStack, key) {
      _super.call(this, injector, key, function(keys) {
        var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
        return "Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ".";
      }, originalException, originalStack);
      this.causeKey = key;
    }
    return InstantiationError;
  })(AbstractBindingError);
  exports.InstantiationError = InstantiationError;
  var InvalidBindingError = (function(_super) {
    __extends(InvalidBindingError, _super);
    function InvalidBindingError(binding) {
      _super.call(this);
      this.message = "Invalid binding - only instances of Binding and Type are allowed, got: " + binding.toString();
    }
    InvalidBindingError.prototype.toString = function() {
      return this.message;
    };
    return InvalidBindingError;
  })(lang_1.BaseException);
  exports.InvalidBindingError = InvalidBindingError;
  var NoAnnotationError = (function(_super) {
    __extends(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
      _super.call(this);
      var signature = [];
      for (var i = 0,
          ii = params.length; i < ii; i++) {
        var parameter = params[i];
        if (lang_1.isBlank(parameter) || parameter.length == 0) {
          signature.push('?');
        } else {
          signature.push(collection_1.ListWrapper.map(parameter, lang_1.stringify).join(' '));
        }
      }
      this.message = "Cannot resolve all parameters for " + lang_1.stringify(typeOrFunc) + "(" + signature.join(', ') + "). " + 'Make sure they all have valid type or annotations.';
    }
    NoAnnotationError.prototype.toString = function() {
      return this.message;
    };
    return NoAnnotationError;
  })(lang_1.BaseException);
  exports.NoAnnotationError = NoAnnotationError;
  var OutOfBoundsError = (function(_super) {
    __extends(OutOfBoundsError, _super);
    function OutOfBoundsError(index) {
      _super.call(this);
      this.message = "Index " + index + " is out-of-bounds.";
    }
    OutOfBoundsError.prototype.toString = function() {
      return this.message;
    };
    return OutOfBoundsError;
  })(lang_1.BaseException);
  exports.OutOfBoundsError = OutOfBoundsError;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/opaque_token.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var OpaqueToken = (function() {
    function OpaqueToken(desc) {
      this._desc = 'Token(' + desc + ')';
    }
    OpaqueToken.prototype.toString = function() {
      return this._desc;
    };
    OpaqueToken = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [String])], OpaqueToken);
    return OpaqueToken;
  })();
  exports.OpaqueToken = OpaqueToken;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/directives/ng_class.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/change_detection.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var NgClass = (function() {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
      this._iterableDiffers = _iterableDiffers;
      this._keyValueDiffers = _keyValueDiffers;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
      this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "initialClasses", {
      set: function(v) {
        this._applyInitialClasses(true);
        this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(' ') : [];
        this._applyInitialClasses(false);
        this._applyClasses(this._rawClass, false);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgClass.prototype, "rawClass", {
      set: function(v) {
        this._cleanupClasses(this._rawClass);
        if (lang_1.isString(v)) {
          v = v.split(' ');
        }
        this._rawClass = v;
        if (lang_1.isPresent(v)) {
          if (collection_1.isListLikeIterable(v)) {
            this._differ = this._iterableDiffers.find(v).create(null);
            this._mode = 'iterable';
          } else {
            this._differ = this._keyValueDiffers.find(v).create(null);
            this._mode = 'keyValue';
          }
        } else {
          this._differ = null;
        }
      },
      enumerable: true,
      configurable: true
    });
    NgClass.prototype.onCheck = function() {
      if (lang_1.isPresent(this._differ)) {
        var changes = this._differ.diff(this._rawClass);
        if (lang_1.isPresent(changes)) {
          if (this._mode == 'iterable') {
            this._applyIterableChanges(changes);
          } else {
            this._applyKeyValueChanges(changes);
          }
        }
      }
    };
    NgClass.prototype.onDestroy = function() {
      this._cleanupClasses(this._rawClass);
    };
    NgClass.prototype._cleanupClasses = function(rawClassVal) {
      this._applyClasses(rawClassVal, true);
      this._applyInitialClasses(false);
    };
    NgClass.prototype._applyKeyValueChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachRemovedItem(function(record) {
        if (record.previousValue) {
          _this._toggleClass(record.key, false);
        }
      });
    };
    NgClass.prototype._applyIterableChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        _this._toggleClass(record.item, true);
      });
      changes.forEachRemovedItem(function(record) {
        _this._toggleClass(record.item, false);
      });
    };
    NgClass.prototype._applyInitialClasses = function(isCleanup) {
      var _this = this;
      collection_1.ListWrapper.forEach(this._initialClasses, function(className) {
        _this._toggleClass(className, !isCleanup);
      });
    };
    NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
      var _this = this;
      if (lang_1.isPresent(rawClassVal)) {
        if (collection_1.isListLikeIterable(rawClassVal)) {
          collection_1.ListWrapper.forEach(rawClassVal, function(className) {
            return _this._toggleClass(className, !isCleanup);
          });
        } else {
          collection_1.StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
            if (expVal)
              _this._toggleClass(className, !isCleanup);
          });
        }
      }
    };
    NgClass.prototype._toggleClass = function(className, enabled) {
      this._renderer.setElementClass(this._ngEl, className, enabled);
    };
    NgClass = __decorate([metadata_1.Directive({
      selector: '[ng-class]',
      lifecycle: [metadata_1.LifecycleEvent.onCheck, metadata_1.LifecycleEvent.onDestroy],
      properties: ['rawClass: ng-class', 'initialClasses: class']
    }), __metadata('design:paramtypes', [change_detection_1.IterableDiffers, change_detection_1.KeyValueDiffers, core_1.ElementRef, api_1.Renderer])], NgClass);
    return NgClass;
  })();
  exports.NgClass = NgClass;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/directives/ng_for.js", ["npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/change_detection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var NgFor = (function() {
    function NgFor(viewContainer, templateRef, iterableDiffers, cdr) {
      this.viewContainer = viewContainer;
      this.templateRef = templateRef;
      this.iterableDiffers = iterableDiffers;
      this.cdr = cdr;
    }
    Object.defineProperty(NgFor.prototype, "ngForOf", {
      set: function(value) {
        this._ngForOf = value;
        if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
          this._differ = this.iterableDiffers.find(value).create(this.cdr);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgFor.prototype.onCheck = function() {
      if (lang_1.isPresent(this._differ)) {
        var changes = this._differ.diff(this._ngForOf);
        if (lang_1.isPresent(changes))
          this._applyChanges(changes);
      }
    };
    NgFor.prototype._applyChanges = function(changes) {
      var recordViewTuples = [];
      changes.forEachRemovedItem(function(removedRecord) {
        return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
      });
      changes.forEachMovedItem(function(movedRecord) {
        return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
      });
      var insertTuples = NgFor.bulkRemove(recordViewTuples, this.viewContainer);
      changes.forEachAddedItem(function(addedRecord) {
        return insertTuples.push(new RecordViewTuple(addedRecord, null));
      });
      NgFor.bulkInsert(insertTuples, this.viewContainer, this.templateRef);
      for (var i = 0; i < insertTuples.length; i++) {
        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
      }
    };
    NgFor.prototype._perViewChange = function(view, record) {
      view.setLocal('\$implicit', record.item);
      view.setLocal('index', record.currentIndex);
    };
    NgFor.bulkRemove = function(tuples, viewContainer) {
      tuples.sort(function(a, b) {
        return a.record.previousIndex - b.record.previousIndex;
      });
      var movedTuples = [];
      for (var i = tuples.length - 1; i >= 0; i--) {
        var tuple = tuples[i];
        if (lang_1.isPresent(tuple.record.currentIndex)) {
          tuple.view = viewContainer.detach(tuple.record.previousIndex);
          movedTuples.push(tuple);
        } else {
          viewContainer.remove(tuple.record.previousIndex);
        }
      }
      return movedTuples;
    };
    NgFor.bulkInsert = function(tuples, viewContainer, templateRef) {
      tuples.sort(function(a, b) {
        return a.record.currentIndex - b.record.currentIndex;
      });
      for (var i = 0; i < tuples.length; i++) {
        var tuple = tuples[i];
        if (lang_1.isPresent(tuple.view)) {
          viewContainer.insert(tuple.view, tuple.record.currentIndex);
        } else {
          tuple.view = viewContainer.createEmbeddedView(templateRef, tuple.record.currentIndex);
        }
      }
      return tuples;
    };
    NgFor = __decorate([metadata_1.Directive({
      selector: '[ng-for][ng-for-of]',
      properties: ['ngForOf'],
      lifecycle: [metadata_1.LifecycleEvent.onCheck]
    }), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, change_detection_1.IterableDiffers, change_detection_1.ChangeDetectorRef])], NgFor);
    return NgFor;
  })();
  exports.NgFor = NgFor;
  var RecordViewTuple = (function() {
    function RecordViewTuple(record, view) {
      this.record = record;
      this.view = view;
    }
    return RecordViewTuple;
  })();
  exports.RecordViewTuple = RecordViewTuple;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/directives/ng_if.js", ["npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var NgIf = (function() {
    function NgIf(_viewContainer, _templateRef) {
      this._viewContainer = _viewContainer;
      this._templateRef = _templateRef;
      this._prevCondition = null;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
      set: function(newCondition) {
        if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
          this._prevCondition = true;
          this._viewContainer.createEmbeddedView(this._templateRef);
        } else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
          this._prevCondition = false;
          this._viewContainer.clear();
        }
      },
      enumerable: true,
      configurable: true
    });
    NgIf = __decorate([metadata_1.Directive({
      selector: '[ng-if]',
      properties: ['ngIf']
    }), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef])], NgIf);
    return NgIf;
  })();
  exports.NgIf = NgIf;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/directives/ng_non_bindable.js", ["npm:angular2@2.0.0-alpha.35/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var NgNonBindable = (function() {
    function NgNonBindable() {}
    NgNonBindable = __decorate([metadata_1.Directive({
      selector: '[ng-non-bindable]',
      compileChildren: false
    }), __metadata('design:paramtypes', [])], NgNonBindable);
    return NgNonBindable;
  })();
  exports.NgNonBindable = NgNonBindable;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/directives/ng_switch.js", ["npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var _WHEN_DEFAULT = lang_1.CONST_EXPR(new Object());
  var SwitchView = (function() {
    function SwitchView(_viewContainerRef, _templateRef) {
      this._viewContainerRef = _viewContainerRef;
      this._templateRef = _templateRef;
    }
    SwitchView.prototype.create = function() {
      this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    SwitchView.prototype.destroy = function() {
      this._viewContainerRef.clear();
    };
    return SwitchView;
  })();
  exports.SwitchView = SwitchView;
  var NgSwitch = (function() {
    function NgSwitch() {
      this._useDefault = false;
      this._valueViews = new collection_1.Map();
      this._activeViews = [];
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
      set: function(value) {
        this._emptyAllActiveViews();
        this._useDefault = false;
        var views = this._valueViews.get(value);
        if (lang_1.isBlank(views)) {
          this._useDefault = true;
          views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
        }
        this._activateViews(views);
        this._switchValue = value;
      },
      enumerable: true,
      configurable: true
    });
    NgSwitch.prototype._onWhenValueChanged = function(oldWhen, newWhen, view) {
      this._deregisterView(oldWhen, view);
      this._registerView(newWhen, view);
      if (oldWhen === this._switchValue) {
        view.destroy();
        collection_1.ListWrapper.remove(this._activeViews, view);
      } else if (newWhen === this._switchValue) {
        if (this._useDefault) {
          this._useDefault = false;
          this._emptyAllActiveViews();
        }
        view.create();
        this._activeViews.push(view);
      }
      if (this._activeViews.length === 0 && !this._useDefault) {
        this._useDefault = true;
        this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
      }
    };
    NgSwitch.prototype._emptyAllActiveViews = function() {
      var activeContainers = this._activeViews;
      for (var i = 0; i < activeContainers.length; i++) {
        activeContainers[i].destroy();
      }
      this._activeViews = [];
    };
    NgSwitch.prototype._activateViews = function(views) {
      if (lang_1.isPresent(views)) {
        for (var i = 0; i < views.length; i++) {
          views[i].create();
        }
        this._activeViews = views;
      }
    };
    NgSwitch.prototype._registerView = function(value, view) {
      var views = this._valueViews.get(value);
      if (lang_1.isBlank(views)) {
        views = [];
        this._valueViews.set(value, views);
      }
      views.push(view);
    };
    NgSwitch.prototype._deregisterView = function(value, view) {
      if (value === _WHEN_DEFAULT)
        return;
      var views = this._valueViews.get(value);
      if (views.length == 1) {
        this._valueViews.delete(value);
      } else {
        collection_1.ListWrapper.remove(views, view);
      }
    };
    NgSwitch = __decorate([metadata_1.Directive({
      selector: '[ng-switch]',
      properties: ['ngSwitch']
    }), __metadata('design:paramtypes', [])], NgSwitch);
    return NgSwitch;
  })();
  exports.NgSwitch = NgSwitch;
  var NgSwitchWhen = (function() {
    function NgSwitchWhen(viewContainer, templateRef, _switch) {
      this._switch = _switch;
      this._value = _WHEN_DEFAULT;
      this._view = new SwitchView(viewContainer, templateRef);
    }
    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
      set: function(value) {
        this._switch._onWhenValueChanged(this._value, value, this._view);
        this._value = value;
      },
      enumerable: true,
      configurable: true
    });
    NgSwitchWhen = __decorate([metadata_1.Directive({
      selector: '[ng-switch-when]',
      properties: ['ngSwitchWhen']
    }), __param(2, di_1.Host()), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch])], NgSwitchWhen);
    return NgSwitchWhen;
  })();
  exports.NgSwitchWhen = NgSwitchWhen;
  var NgSwitchDefault = (function() {
    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
      sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault = __decorate([metadata_1.Directive({selector: '[ng-switch-default]'}), __param(2, di_1.Host()), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch])], NgSwitchDefault);
    return NgSwitchDefault;
  })();
  exports.NgSwitchDefault = NgSwitchDefault;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/directives/ng_style.js", ["npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/change_detection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var NgStyle = (function() {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "rawStyle", {
      set: function(v) {
        this._rawStyle = v;
        if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
          this._differ = this._differs.find(this._rawStyle).create(null);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgStyle.prototype.onCheck = function() {
      if (lang_1.isPresent(this._differ)) {
        var changes = this._differ.diff(this._rawStyle);
        if (lang_1.isPresent(changes)) {
          this._applyChanges(changes);
        }
      }
    };
    NgStyle.prototype._applyChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      });
      changes.forEachRemovedItem(function(record) {
        _this._setStyle(record.key, null);
      });
    };
    NgStyle.prototype._setStyle = function(name, val) {
      this._renderer.setElementStyle(this._ngEl, name, val);
    };
    NgStyle = __decorate([metadata_1.Directive({
      selector: '[ng-style]',
      lifecycle: [metadata_1.LifecycleEvent.onCheck],
      properties: ['rawStyle: ng-style']
    }), __metadata('design:paramtypes', [change_detection_1.KeyValueDiffers, core_1.ElementRef, api_1.Renderer])], NgStyle);
    return NgStyle;
  })();
  exports.NgStyle = NgStyle;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/model.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/forms/validators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/validators.js");
  exports.VALID = "VALID";
  exports.INVALID = "INVALID";
  function isControl(c) {
    return c instanceof AbstractControl;
  }
  exports.isControl = isControl;
  function _find(c, path) {
    if (lang_1.isBlank(path))
      return null;
    if (!(path instanceof collection_1.List)) {
      path = lang_1.StringWrapper.split(path, new RegExp("/"));
    }
    if (path instanceof collection_1.List && collection_1.ListWrapper.isEmpty(path))
      return null;
    return collection_1.ListWrapper.reduce(path, function(v, name) {
      if (v instanceof ControlGroup) {
        return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
      } else if (v instanceof ControlArray) {
        var index = name;
        return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
      } else {
        return null;
      }
    }, c);
  }
  var AbstractControl = (function() {
    function AbstractControl(validator) {
      this.validator = validator;
      this._pristine = true;
      this._touched = false;
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
      get: function() {
        return this._status;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
      get: function() {
        return this._status === exports.VALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
      get: function() {
        return this._errors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
      get: function() {
        return this._pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
      get: function() {
        return !this.pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
      get: function() {
        return this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
      get: function() {
        return !this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
      get: function() {
        return this._valueChanges;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype.markAsTouched = function() {
      this._touched = true;
    };
    AbstractControl.prototype.markAsDirty = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
      this._pristine = false;
      if (lang_1.isPresent(this._parent) && !onlySelf) {
        this._parent.markAsDirty({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.setParent = function(parent) {
      this._parent = parent;
    };
    AbstractControl.prototype.updateValidity = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
      this._errors = this.validator(this);
      this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
      if (lang_1.isPresent(this._parent) && !onlySelf) {
        this._parent.updateValidity({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.updateValueAndValidity = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
      emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
      this._updateValue();
      if (emitEvent) {
        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
      }
      this._errors = this.validator(this);
      this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
      if (lang_1.isPresent(this._parent) && !onlySelf) {
        this._parent.updateValueAndValidity({
          onlySelf: onlySelf,
          emitEvent: emitEvent
        });
      }
    };
    AbstractControl.prototype.find = function(path) {
      return _find(this, path);
    };
    AbstractControl.prototype.getError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      var c = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
      if (lang_1.isPresent(c) && lang_1.isPresent(c._errors)) {
        return collection_1.StringMapWrapper.get(c._errors, errorCode);
      } else {
        return null;
      }
    };
    AbstractControl.prototype.hasError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return lang_1.isPresent(this.getError(errorCode, path));
    };
    AbstractControl.prototype._updateValue = function() {};
    return AbstractControl;
  })();
  exports.AbstractControl = AbstractControl;
  var Control = (function(_super) {
    __extends(Control, _super);
    function Control(value, validator) {
      if (value === void 0) {
        value = null;
      }
      if (validator === void 0) {
        validator = validators_1.Validators.nullValidator;
      }
      _super.call(this, validator);
      this._value = value;
      this.updateValidity({onlySelf: true});
      this._valueChanges = new async_1.EventEmitter();
    }
    Control.prototype.updateValue = function(value, _a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent,
          emitModelToViewChange = _b.emitModelToViewChange;
      emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
      this._value = value;
      if (lang_1.isPresent(this._onChange) && emitModelToViewChange)
        this._onChange(this._value);
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    Control.prototype.registerOnChange = function(fn) {
      this._onChange = fn;
    };
    return Control;
  })(AbstractControl);
  exports.Control = Control;
  var ControlGroup = (function(_super) {
    __extends(ControlGroup, _super);
    function ControlGroup(controls, optionals, validator) {
      if (optionals === void 0) {
        optionals = null;
      }
      if (validator === void 0) {
        validator = validators_1.Validators.group;
      }
      _super.call(this, validator);
      this.controls = controls;
      this._optionals = lang_1.isPresent(optionals) ? optionals : {};
      this._valueChanges = new async_1.EventEmitter();
      this._setParentForControls();
      this._value = this._reduceValue();
      this.updateValidity({onlySelf: true});
    }
    ControlGroup.prototype.addControl = function(name, c) {
      this.controls[name] = c;
      c.setParent(this);
    };
    ControlGroup.prototype.removeControl = function(name) {
      collection_1.StringMapWrapper.delete(this.controls, name);
    };
    ControlGroup.prototype.include = function(controlName) {
      collection_1.StringMapWrapper.set(this._optionals, controlName, true);
      this.updateValueAndValidity();
    };
    ControlGroup.prototype.exclude = function(controlName) {
      collection_1.StringMapWrapper.set(this._optionals, controlName, false);
      this.updateValueAndValidity();
    };
    ControlGroup.prototype.contains = function(controlName) {
      var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
      return c && this._included(controlName);
    };
    ControlGroup.prototype._setParentForControls = function() {
      var _this = this;
      collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
        control.setParent(_this);
      });
    };
    ControlGroup.prototype._updateValue = function() {
      this._value = this._reduceValue();
    };
    ControlGroup.prototype._reduceValue = function() {
      return this._reduceChildren({}, function(acc, control, name) {
        acc[name] = control.value;
        return acc;
      });
    };
    ControlGroup.prototype._reduceChildren = function(initValue, fn) {
      var _this = this;
      var res = initValue;
      collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
        if (_this._included(name)) {
          res = fn(res, control, name);
        }
      });
      return res;
    };
    ControlGroup.prototype._included = function(controlName) {
      var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
      return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
    };
    return ControlGroup;
  })(AbstractControl);
  exports.ControlGroup = ControlGroup;
  var ControlArray = (function(_super) {
    __extends(ControlArray, _super);
    function ControlArray(controls, validator) {
      if (validator === void 0) {
        validator = validators_1.Validators.array;
      }
      _super.call(this, validator);
      this.controls = controls;
      this._valueChanges = new async_1.EventEmitter();
      this._setParentForControls();
      this._updateValue();
      this.updateValidity({onlySelf: true});
    }
    ControlArray.prototype.at = function(index) {
      return this.controls[index];
    };
    ControlArray.prototype.push = function(control) {
      this.controls.push(control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    ControlArray.prototype.insert = function(index, control) {
      collection_1.ListWrapper.insert(this.controls, index, control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    ControlArray.prototype.removeAt = function(index) {
      collection_1.ListWrapper.removeAt(this.controls, index);
      this.updateValueAndValidity();
    };
    Object.defineProperty(ControlArray.prototype, "length", {
      get: function() {
        return this.controls.length;
      },
      enumerable: true,
      configurable: true
    });
    ControlArray.prototype._updateValue = function() {
      this._value = collection_1.ListWrapper.map(this.controls, function(c) {
        return c.value;
      });
    };
    ControlArray.prototype._setParentForControls = function() {
      var _this = this;
      collection_1.ListWrapper.forEach(this.controls, function(control) {
        control.setParent(_this);
      });
    };
    return ControlArray;
  })(AbstractControl);
  exports.ControlArray = ControlArray;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var AbstractControlDirective = (function() {
    function AbstractControlDirective() {}
    Object.defineProperty(AbstractControlDirective.prototype, "control", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
      get: function() {
        return this.control.value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
      get: function() {
        return this.control.valid;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
      get: function() {
        return this.control.errors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
      get: function() {
        return this.control.pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
      get: function() {
        return this.control.dirty;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
      get: function() {
        return this.control.touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
      get: function() {
        return this.control.untouched;
      },
      enumerable: true,
      configurable: true
    });
    return AbstractControlDirective;
  })();
  exports.AbstractControlDirective = AbstractControlDirective;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js", ["npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var abstract_control_directive_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js");
  var ControlContainer = (function(_super) {
    __extends(ControlContainer, _super);
    function ControlContainer() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return ControlContainer;
  })(abstract_control_directive_1.AbstractControlDirective);
  exports.ControlContainer = ControlContainer;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var controlNameBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, {toAlias: di_1.forwardRef(function() {
      return NgControlName;
    })}));
  var NgControlName = (function(_super) {
    __extends(NgControlName, _super);
    function NgControlName(parent, ngValidators) {
      _super.call(this);
      this.update = new async_1.EventEmitter();
      this._added = false;
      this._parent = parent;
      this.ngValidators = ngValidators;
    }
    NgControlName.prototype.onChange = function(c) {
      if (!this._added) {
        this.formDirective.addControl(this);
        this._added = true;
      }
      if (shared_1.isPropertyUpdated(c, this.viewModel)) {
        this.viewModel = this.model;
        this.formDirective.updateModel(this, this.model);
      }
    };
    NgControlName.prototype.onDestroy = function() {
      this.formDirective.removeControl(this);
    };
    NgControlName.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    Object.defineProperty(NgControlName.prototype, "path", {
      get: function() {
        return shared_1.controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "control", {
      get: function() {
        return this.formDirective.getControl(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "validator", {
      get: function() {
        return shared_1.composeNgValidator(this.ngValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgControlName = __decorate([metadata_1.Directive({
      selector: '[ng-control]',
      bindings: [controlNameBinding],
      properties: ['name: ngControl', 'model: ngModel'],
      events: ['update: ngModel'],
      lifecycle: [metadata_1.LifecycleEvent.onDestroy, metadata_1.LifecycleEvent.onChange],
      exportAs: 'form'
    }), __param(0, di_1.Host()), __param(0, di_1.SkipSelf()), __param(1, metadata_1.Query(validators_1.NgValidator)), __metadata('design:paramtypes', [control_container_1.ControlContainer, core_1.QueryList])], NgControlName);
    return NgControlName;
  })(ng_control_1.NgControl);
  exports.NgControlName = NgControlName;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var formControlBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, {toAlias: di_1.forwardRef(function() {
      return NgFormControl;
    })}));
  var NgFormControl = (function(_super) {
    __extends(NgFormControl, _super);
    function NgFormControl(ngValidators) {
      _super.call(this);
      this.update = new async_1.EventEmitter();
      this._added = false;
      this.ngValidators = ngValidators;
    }
    NgFormControl.prototype.onChange = function(c) {
      if (!this._added) {
        shared_1.setUpControl(this.form, this);
        this.form.updateValidity();
        this._added = true;
      }
      if (shared_1.isPropertyUpdated(c, this.viewModel)) {
        this.form.updateValue(this.model);
      }
    };
    Object.defineProperty(NgFormControl.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormControl.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormControl.prototype, "validator", {
      get: function() {
        return shared_1.composeNgValidator(this.ngValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgFormControl.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    NgFormControl = __decorate([metadata_1.Directive({
      selector: '[ng-form-control]',
      bindings: [formControlBinding],
      properties: ['form: ngFormControl', 'model: ngModel'],
      events: ['update: ngModel'],
      lifecycle: [metadata_1.LifecycleEvent.onChange],
      exportAs: 'form'
    }), __param(0, metadata_1.Query(validators_1.NgValidator)), __metadata('design:paramtypes', [core_1.QueryList])], NgFormControl);
    return NgFormControl;
  })(ng_control_1.NgControl);
  exports.NgFormControl = NgFormControl;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  var model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/model.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var formControlBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, {toAlias: di_1.forwardRef(function() {
      return NgModel;
    })}));
  var NgModel = (function(_super) {
    __extends(NgModel, _super);
    function NgModel(ngValidators) {
      _super.call(this);
      this._control = new model_1.Control();
      this._added = false;
      this.update = new async_1.EventEmitter();
      this.ngValidators = ngValidators;
    }
    NgModel.prototype.onChange = function(c) {
      if (!this._added) {
        shared_1.setUpControl(this._control, this);
        this._control.updateValidity();
        this._added = true;
      }
      if (shared_1.isPropertyUpdated(c, this.viewModel)) {
        this._control.updateValue(this.model);
      }
    };
    Object.defineProperty(NgModel.prototype, "control", {
      get: function() {
        return this._control;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
      get: function() {
        return shared_1.composeNgValidator(this.ngValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    NgModel = __decorate([metadata_1.Directive({
      selector: '[ng-model]:not([ng-control]):not([ng-form-control])',
      bindings: [formControlBinding],
      properties: ['model: ngModel'],
      events: ['update: ngModel'],
      lifecycle: [metadata_1.LifecycleEvent.onChange],
      exportAs: 'form'
    }), __param(0, metadata_1.Query(validators_1.NgValidator)), __metadata('design:paramtypes', [core_1.QueryList])], NgModel);
    return NgModel;
  })(ng_control_1.NgControl);
  exports.NgModel = NgModel;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", ["npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var abstract_control_directive_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/abstract_control_directive.js");
  var NgControl = (function(_super) {
    __extends(NgControl, _super);
    function NgControl() {
      _super.apply(this, arguments);
      this.name = null;
      this.valueAccessor = null;
    }
    Object.defineProperty(NgControl.prototype, "validator", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControl.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    NgControl.prototype.viewToModelUpdate = function(newValue) {};
    return NgControl;
  })(abstract_control_directive_1.AbstractControlDirective);
  exports.NgControl = NgControl;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js", ["npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var controlGroupBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, {toAlias: di_1.forwardRef(function() {
      return NgControlGroup;
    })}));
  var NgControlGroup = (function(_super) {
    __extends(NgControlGroup, _super);
    function NgControlGroup(_parent) {
      _super.call(this);
      this._parent = _parent;
    }
    NgControlGroup.prototype.onInit = function() {
      this.formDirective.addControlGroup(this);
    };
    NgControlGroup.prototype.onDestroy = function() {
      this.formDirective.removeControlGroup(this);
    };
    Object.defineProperty(NgControlGroup.prototype, "control", {
      get: function() {
        return this.formDirective.getControlGroup(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlGroup.prototype, "path", {
      get: function() {
        return shared_1.controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlGroup.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    NgControlGroup = __decorate([metadata_1.Directive({
      selector: '[ng-control-group]',
      bindings: [controlGroupBinding],
      properties: ['name: ng-control-group'],
      lifecycle: [metadata_1.LifecycleEvent.onInit, metadata_1.LifecycleEvent.onDestroy],
      exportAs: 'form'
    }), __param(0, di_1.Host()), __param(0, di_1.SkipSelf()), __metadata('design:paramtypes', [control_container_1.ControlContainer])], NgControlGroup);
    return NgControlGroup;
  })(control_container_1.ControlContainer);
  exports.NgControlGroup = NgControlGroup;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var formDirectiveBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, {toAlias: di_1.forwardRef(function() {
      return NgFormModel;
    })}));
  var NgFormModel = (function(_super) {
    __extends(NgFormModel, _super);
    function NgFormModel() {
      _super.apply(this, arguments);
      this.form = null;
      this.directives = [];
      this.ngSubmit = new async_1.EventEmitter();
    }
    NgFormModel.prototype.onChange = function(_) {
      this._updateDomValue();
    };
    Object.defineProperty(NgFormModel.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormModel.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormModel.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    NgFormModel.prototype.addControl = function(dir) {
      var c = this.form.find(dir.path);
      shared_1.setUpControl(c, dir);
      c.updateValidity();
      this.directives.push(dir);
    };
    NgFormModel.prototype.getControl = function(dir) {
      return this.form.find(dir.path);
    };
    NgFormModel.prototype.removeControl = function(dir) {
      collection_1.ListWrapper.remove(this.directives, dir);
    };
    NgFormModel.prototype.addControlGroup = function(dir) {};
    NgFormModel.prototype.removeControlGroup = function(dir) {};
    NgFormModel.prototype.getControlGroup = function(dir) {
      return this.form.find(dir.path);
    };
    NgFormModel.prototype.updateModel = function(dir, value) {
      var c = this.form.find(dir.path);
      c.updateValue(value);
    };
    NgFormModel.prototype.onSubmit = function() {
      async_1.ObservableWrapper.callNext(this.ngSubmit, null);
      return false;
    };
    NgFormModel.prototype._updateDomValue = function() {
      var _this = this;
      collection_1.ListWrapper.forEach(this.directives, function(dir) {
        var c = _this.form.find(dir.path);
        dir.valueAccessor.writeValue(c.value);
      });
    };
    NgFormModel = __decorate([metadata_1.Directive({
      selector: '[ng-form-model]',
      bindings: [formDirectiveBinding],
      properties: ['form: ng-form-model'],
      lifecycle: [metadata_1.LifecycleEvent.onChange],
      host: {'(submit)': 'onSubmit()'},
      events: ['ngSubmit'],
      exportAs: 'form'
    }), __metadata('design:paramtypes', [])], NgFormModel);
    return NgFormModel;
  })(control_container_1.ControlContainer);
  exports.NgFormModel = NgFormModel;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js", ["npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js", "npm:angular2@2.0.0-alpha.35/src/forms/model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/control_container.js");
  var model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/model.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var formDirectiveBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, {toAlias: di_1.forwardRef(function() {
      return NgForm;
    })}));
  var NgForm = (function(_super) {
    __extends(NgForm, _super);
    function NgForm() {
      _super.call(this);
      this.ngSubmit = new async_1.EventEmitter();
      this.form = new model_1.ControlGroup({});
    }
    Object.defineProperty(NgForm.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
      get: function() {
        return this.form.controls;
      },
      enumerable: true,
      configurable: true
    });
    NgForm.prototype.addControl = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        var c = new model_1.Control();
        shared_1.setUpControl(c, dir);
        container.addControl(dir.name, c);
        c.updateValidity();
      });
    };
    NgForm.prototype.getControl = function(dir) {
      return this.form.find(dir.path);
    };
    NgForm.prototype.removeControl = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        if (lang_1.isPresent(container)) {
          container.removeControl(dir.name);
          container.updateValidity();
        }
      });
    };
    NgForm.prototype.addControlGroup = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        var c = new model_1.ControlGroup({});
        container.addControl(dir.name, c);
        c.updateValidity();
      });
    };
    NgForm.prototype.removeControlGroup = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        if (lang_1.isPresent(container)) {
          container.removeControl(dir.name);
          container.updateValidity();
        }
      });
    };
    NgForm.prototype.getControlGroup = function(dir) {
      return this.form.find(dir.path);
    };
    NgForm.prototype.updateModel = function(dir, value) {
      var _this = this;
      this._later(function(_) {
        var c = _this.form.find(dir.path);
        c.updateValue(value);
      });
    };
    NgForm.prototype.onSubmit = function() {
      async_1.ObservableWrapper.callNext(this.ngSubmit, null);
      return false;
    };
    NgForm.prototype._findContainer = function(path) {
      collection_1.ListWrapper.removeLast(path);
      return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
    };
    NgForm.prototype._later = function(fn) {
      var c = async_1.PromiseWrapper.completer();
      async_1.PromiseWrapper.then(c.promise, fn, function(_) {});
      c.resolve(null);
    };
    NgForm = __decorate([metadata_1.Directive({
      selector: 'form:not([ng-no-form]):not([ng-form-model]),ng-form,[ng-form]',
      bindings: [formDirectiveBinding],
      host: {'(submit)': 'onSubmit()'},
      events: ['ngSubmit'],
      exportAs: 'form'
    }), __metadata('design:paramtypes', [])], NgForm);
    return NgForm;
  })(control_container_1.ControlContainer);
  exports.NgForm = NgForm;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js", ["npm:angular2@2.0.0-alpha.35/render.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var render_1 = require("npm:angular2@2.0.0-alpha.35/render.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var DefaultValueAccessor = (function() {
    function DefaultValueAccessor(cd, renderer, elementRef) {
      this.renderer = renderer;
      this.elementRef = elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
      this.cd = cd;
      cd.valueAccessor = this;
    }
    DefaultValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = lang_1.isBlank(value) ? '' : value;
      shared_1.setProperty(this.renderer, this.elementRef, 'value', normalizedValue);
    };
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassUntouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassTouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassPristine", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassDirty", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassValid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassInvalid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    DefaultValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    DefaultValueAccessor = __decorate([metadata_1.Directive({
      selector: 'input:not([type=checkbox])[ng-control],textarea[ng-control],input:not([type=checkbox])[ng-form-control],textarea[ng-form-control],input:not([type=checkbox])[ng-model],textarea[ng-model]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()',
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }), __param(0, di_1.Self()), __metadata('design:paramtypes', [ng_control_1.NgControl, render_1.Renderer, core_1.ElementRef])], DefaultValueAccessor);
    return DefaultValueAccessor;
  })();
  exports.DefaultValueAccessor = DefaultValueAccessor;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js", ["npm:angular2@2.0.0-alpha.35/render.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var render_1 = require("npm:angular2@2.0.0-alpha.35/render.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var CheckboxControlValueAccessor = (function() {
    function CheckboxControlValueAccessor(cd, renderer, elementRef) {
      this.renderer = renderer;
      this.elementRef = elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
      this.cd = cd;
      cd.valueAccessor = this;
    }
    CheckboxControlValueAccessor.prototype.writeValue = function(value) {
      shared_1.setProperty(this.renderer, this.elementRef, "checked", value);
    };
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassUntouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassTouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassPristine", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassDirty", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassValid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassInvalid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    CheckboxControlValueAccessor = __decorate([metadata_1.Directive({
      selector: 'input[type=checkbox][ng-control],input[type=checkbox][ng-form-control],input[type=checkbox][ng-model]',
      host: {
        '(change)': 'onChange($event.target.checked)',
        '(blur)': 'onTouched()',
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }), __param(0, di_1.Self()), __metadata('design:paramtypes', [ng_control_1.NgControl, render_1.Renderer, core_1.ElementRef])], CheckboxControlValueAccessor);
    return CheckboxControlValueAccessor;
  })();
  exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js", ["npm:angular2@2.0.0-alpha.35/render.js", "npm:angular2@2.0.0-alpha.35/core.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var render_1 = require("npm:angular2@2.0.0-alpha.35/render.js");
  var core_1 = require("npm:angular2@2.0.0-alpha.35/core.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var shared_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js");
  var NgSelectOption = (function() {
    function NgSelectOption() {}
    NgSelectOption = __decorate([metadata_1.Directive({selector: 'option'}), __metadata('design:paramtypes', [])], NgSelectOption);
    return NgSelectOption;
  })();
  exports.NgSelectOption = NgSelectOption;
  var SelectControlValueAccessor = (function() {
    function SelectControlValueAccessor(cd, renderer, elementRef, query) {
      this.renderer = renderer;
      this.elementRef = elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
      this.cd = cd;
      cd.valueAccessor = this;
      this._updateValueWhenListOfOptionsChanges(query);
    }
    SelectControlValueAccessor.prototype.writeValue = function(value) {
      this.value = value;
      shared_1.setProperty(this.renderer, this.elementRef, "value", value);
    };
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassUntouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassTouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassPristine", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassDirty", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassValid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassInvalid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function(query) {
      var _this = this;
      query.onChange(function() {
        return _this.writeValue(_this.value);
      });
    };
    SelectControlValueAccessor = __decorate([metadata_1.Directive({
      selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()',
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }), __param(0, di_1.Self()), __param(3, metadata_1.Query(NgSelectOption, {descendants: true})), __metadata('design:paramtypes', [ng_control_1.NgControl, render_1.Renderer, core_1.ElementRef, core_1.QueryList])], SelectControlValueAccessor);
    return SelectControlValueAccessor;
  })();
  exports.SelectControlValueAccessor = SelectControlValueAccessor;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js", "npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ng_control_name_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js");
  var ng_form_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js");
  var ng_model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js");
  var ng_control_group_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js");
  var ng_form_model_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js");
  var ng_form_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js");
  var default_value_accessor_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js");
  var checkbox_value_accessor_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js");
  var select_control_value_accessor_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js");
  var ng_control_name_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_name.js");
  exports.NgControlName = ng_control_name_2.NgControlName;
  var ng_form_control_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_control.js");
  exports.NgFormControl = ng_form_control_2.NgFormControl;
  var ng_model_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_model.js");
  exports.NgModel = ng_model_2.NgModel;
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control.js");
  exports.NgControl = ng_control_1.NgControl;
  var ng_control_group_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_control_group.js");
  exports.NgControlGroup = ng_control_group_2.NgControlGroup;
  var ng_form_model_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form_model.js");
  exports.NgFormModel = ng_form_model_2.NgFormModel;
  var ng_form_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/ng_form.js");
  exports.NgForm = ng_form_2.NgForm;
  var default_value_accessor_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/default_value_accessor.js");
  exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
  var checkbox_value_accessor_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/checkbox_value_accessor.js");
  exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
  var select_control_value_accessor_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/select_control_value_accessor.js");
  exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
  exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
  var validators_2 = require("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js");
  exports.NgValidator = validators_2.NgValidator;
  exports.NgRequiredValidator = validators_2.NgRequiredValidator;
  exports.FORM_DIRECTIVES = lang_1.CONST_EXPR([ng_control_name_1.NgControlName, ng_control_group_1.NgControlGroup, ng_form_control_1.NgFormControl, ng_model_1.NgModel, ng_form_model_1.NgFormModel, ng_form_1.NgForm, select_control_value_accessor_1.NgSelectOption, default_value_accessor_1.DefaultValueAccessor, checkbox_value_accessor_1.CheckboxControlValueAccessor, select_control_value_accessor_1.SelectControlValueAccessor, validators_1.NgRequiredValidator]);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/validators.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var Validators = (function() {
    function Validators() {}
    Validators.required = function(c) {
      return lang_1.isBlank(c.value) || c.value == "" ? {"required": true} : null;
    };
    Validators.nullValidator = function(c) {
      return null;
    };
    Validators.compose = function(validators) {
      return function(c) {
        var res = collection_1.ListWrapper.reduce(validators, function(res, validator) {
          var errors = validator(c);
          return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
        }, {});
        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
      };
    };
    Validators.group = function(c) {
      var res = {};
      collection_1.StringMapWrapper.forEach(c.controls, function(control, name) {
        if (c.contains(name) && lang_1.isPresent(control.errors)) {
          Validators._mergeErrors(control, res);
        }
      });
      return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    };
    Validators.array = function(c) {
      var res = {};
      collection_1.ListWrapper.forEach(c.controls, function(control) {
        if (lang_1.isPresent(control.errors)) {
          Validators._mergeErrors(control, res);
        }
      });
      return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    };
    Validators._mergeErrors = function(control, res) {
      collection_1.StringMapWrapper.forEach(control.errors, function(value, error) {
        if (!collection_1.StringMapWrapper.contains(res, error)) {
          res[error] = [];
        }
        var current = res[error];
        current.push(control);
      });
    };
    return Validators;
  })();
  exports.Validators = Validators;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/validators.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/metadata.js", "npm:angular2@2.0.0-alpha.35/src/forms/validators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/validators.js");
  var NgValidator = (function() {
    function NgValidator() {}
    Object.defineProperty(NgValidator.prototype, "validator", {
      get: function() {
        throw "Is not implemented";
      },
      enumerable: true,
      configurable: true
    });
    return NgValidator;
  })();
  exports.NgValidator = NgValidator;
  var requiredValidatorBinding = lang_1.CONST_EXPR(new di_1.Binding(NgValidator, {toAlias: di_1.forwardRef(function() {
      return NgRequiredValidator;
    })}));
  var NgRequiredValidator = (function(_super) {
    __extends(NgRequiredValidator, _super);
    function NgRequiredValidator() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(NgRequiredValidator.prototype, "validator", {
      get: function() {
        return validators_1.Validators.required;
      },
      enumerable: true,
      configurable: true
    });
    NgRequiredValidator = __decorate([metadata_1.Directive({
      selector: '[required][ng-control],[required][ng-form-control],[required][ng-model]',
      bindings: [requiredValidatorBinding]
    }), __metadata('design:paramtypes', [])], NgRequiredValidator);
    return NgRequiredValidator;
  })(NgValidator);
  exports.NgRequiredValidator = NgRequiredValidator;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/form_builder.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/model.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var modelModule = require("npm:angular2@2.0.0-alpha.35/src/forms/model.js");
  var FormBuilder = (function() {
    function FormBuilder() {}
    FormBuilder.prototype.group = function(controlsConfig, extra) {
      if (extra === void 0) {
        extra = null;
      }
      var controls = this._reduceControls(controlsConfig);
      var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
      var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
      if (lang_1.isPresent(validator)) {
        return new modelModule.ControlGroup(controls, optionals, validator);
      } else {
        return new modelModule.ControlGroup(controls, optionals);
      }
    };
    FormBuilder.prototype.control = function(value, validator) {
      if (validator === void 0) {
        validator = null;
      }
      if (lang_1.isPresent(validator)) {
        return new modelModule.Control(value, validator);
      } else {
        return new modelModule.Control(value);
      }
    };
    FormBuilder.prototype.array = function(controlsConfig, validator) {
      var _this = this;
      if (validator === void 0) {
        validator = null;
      }
      var controls = collection_1.ListWrapper.map(controlsConfig, function(c) {
        return _this._createControl(c);
      });
      if (lang_1.isPresent(validator)) {
        return new modelModule.ControlArray(controls, validator);
      } else {
        return new modelModule.ControlArray(controls);
      }
    };
    FormBuilder.prototype._reduceControls = function(controlsConfig) {
      var _this = this;
      var controls = {};
      collection_1.StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
        controls[controlName] = _this._createControl(controlConfig);
      });
      return controls;
    };
    FormBuilder.prototype._createControl = function(controlConfig) {
      if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
        return controlConfig;
      } else if (lang_1.isArray(controlConfig)) {
        var value = collection_1.ListWrapper.get(controlConfig, 0);
        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
        return this.control(value, validator);
      } else {
        return this.control(controlConfig);
      }
    };
    FormBuilder = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], FormBuilder);
    return FormBuilder;
  })();
  exports.FormBuilder = FormBuilder;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/render.js", ["npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compiler.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/dom_renderer.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compiler.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_renderer.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js"));
  __export(require("npm:angular2@2.0.0-alpha.35/src/render/api.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/profile/profile.js", ["npm:angular2@2.0.0-alpha.35/src/profile/wtf_impl.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var impl = require("npm:angular2@2.0.0-alpha.35/src/profile/wtf_impl.js");
  exports.wtfEnabled = impl.detectWTF();
  function noopScope(arg0, arg1) {
    return null;
  }
  exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function(signature, flags) {
    return noopScope;
  };
  exports.wtfLeave = exports.wtfEnabled ? impl.leave : function(s, r) {
    return r;
  };
  exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function(rangeType, action) {
    return null;
  };
  exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function(r) {
    return null;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/jit_proto_change_detector.js", ["npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_jit_generator.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var change_detection_jit_generator_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_jit_generator.js");
  var proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js");
  var JitProtoChangeDetector = (function() {
    function JitProtoChangeDetector(definition) {
      this.definition = definition;
      this._factory = this._createFactory(definition);
    }
    JitProtoChangeDetector.isSupported = function() {
      return true;
    };
    JitProtoChangeDetector.prototype.instantiate = function(dispatcher) {
      return this._factory(dispatcher);
    };
    JitProtoChangeDetector.prototype._createFactory = function(definition) {
      var propertyBindingRecords = proto_change_detector_1.createPropertyRecords(definition);
      var eventBindingRecords = proto_change_detector_1.createEventRecords(definition);
      return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition.id, definition.strategy, propertyBindingRecords, eventBindingRecords, this.definition.directiveRecords, this.definition.generateCheckNoChanges).generate();
    };
    return JitProtoChangeDetector;
  })();
  exports.JitProtoChangeDetector = JitProtoChangeDetector;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/pregen_proto_change_detector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var PregenProtoChangeDetector = (function() {
    function PregenProtoChangeDetector() {}
    PregenProtoChangeDetector.isSupported = function() {
      return false;
    };
    PregenProtoChangeDetector.prototype.instantiate = function(dispatcher) {
      throw new lang_1.BaseException('Pregen change detection not supported in Js');
    };
    return PregenProtoChangeDetector;
  })();
  exports.PregenProtoChangeDetector = PregenProtoChangeDetector;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_change_detector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/dynamic_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/directive_record.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/event_binding.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/coalesce.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var ast_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js");
  var dynamic_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/dynamic_change_detector.js");
  var directive_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/directive_record.js");
  var event_binding_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/event_binding.js");
  var coalesce_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/coalesce.js");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js");
  var DynamicProtoChangeDetector = (function() {
    function DynamicProtoChangeDetector(definition) {
      this.definition = definition;
      this._propertyBindingRecords = createPropertyRecords(definition);
      this._eventBindingRecords = createEventRecords(definition);
    }
    DynamicProtoChangeDetector.prototype.instantiate = function(dispatcher) {
      return new dynamic_change_detector_1.DynamicChangeDetector(this.definition.id, this.definition.strategy, dispatcher, this._propertyBindingRecords, this._eventBindingRecords, this.definition.directiveRecords);
    };
    return DynamicProtoChangeDetector;
  })();
  exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
  function createPropertyRecords(definition) {
    var recordBuilder = new ProtoRecordBuilder();
    collection_1.ListWrapper.forEach(definition.bindingRecords, function(b) {
      recordBuilder.add(b, definition.variableNames);
    });
    return coalesce_1.coalesce(recordBuilder.records);
  }
  exports.createPropertyRecords = createPropertyRecords;
  function createEventRecords(definition) {
    var varNames = collection_1.ListWrapper.concat(['$event'], definition.variableNames);
    return definition.eventRecords.map(function(er) {
      var records = _ConvertAstIntoProtoRecords.create(er, varNames);
      var dirIndex = er.implicitReceiver instanceof directive_record_1.DirectiveIndex ? er.implicitReceiver : null;
      return new event_binding_1.EventBinding(er.eventName, er.elementIndex, dirIndex, records);
    });
  }
  exports.createEventRecords = createEventRecords;
  var ProtoRecordBuilder = (function() {
    function ProtoRecordBuilder() {
      this.records = [];
    }
    ProtoRecordBuilder.prototype.add = function(b, variableNames) {
      if (variableNames === void 0) {
        variableNames = null;
      }
      var oldLast = collection_1.ListWrapper.last(this.records);
      if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
        oldLast.lastInDirective = false;
      }
      var numberOfRecordsBefore = this.records.length;
      this._appendRecords(b, variableNames);
      var newLast = collection_1.ListWrapper.last(this.records);
      if (lang_1.isPresent(newLast) && newLast !== oldLast) {
        newLast.lastInBinding = true;
        newLast.lastInDirective = true;
        this._setArgumentToPureFunction(numberOfRecordsBefore);
      }
    };
    ProtoRecordBuilder.prototype._setArgumentToPureFunction = function(startIndex) {
      var _this = this;
      for (var i = startIndex; i < this.records.length; ++i) {
        var rec = this.records[i];
        if (rec.isPureFunction()) {
          rec.args.forEach(function(recordIndex) {
            return _this.records[recordIndex - 1].argumentToPureFunction = true;
          });
        }
      }
    };
    ProtoRecordBuilder.prototype._appendRecords = function(b, variableNames) {
      if (b.isDirectiveLifecycle()) {
        this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DIRECTIVE_LIFECYCLE, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, null, false, false, false, false));
      } else {
        _ConvertAstIntoProtoRecords.append(this.records, b, variableNames);
      }
    };
    return ProtoRecordBuilder;
  })();
  exports.ProtoRecordBuilder = ProtoRecordBuilder;
  var _ConvertAstIntoProtoRecords = (function() {
    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _expressionAsString, _variableNames) {
      this._records = _records;
      this._bindingRecord = _bindingRecord;
      this._expressionAsString = _expressionAsString;
      this._variableNames = _variableNames;
    }
    _ConvertAstIntoProtoRecords.append = function(records, b, variableNames) {
      var c = new _ConvertAstIntoProtoRecords(records, b, b.ast.toString(), variableNames);
      b.ast.visit(c);
    };
    _ConvertAstIntoProtoRecords.create = function(b, variableNames) {
      var rec = [];
      _ConvertAstIntoProtoRecords.append(rec, b, variableNames);
      rec[rec.length - 1].lastInBinding = true;
      return rec;
    };
    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function(ast) {
      return this._bindingRecord.implicitReceiver;
    };
    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function(ast) {
      var args = this._visitAll(ast.expressions);
      return this._addRecord(proto_record_1.RecordType.INTERPOLATE, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function(ast) {
      return this._addRecord(proto_record_1.RecordType.CONST, "literal", ast.value, [], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPropertyRead = function(ast) {
      var receiver = ast.receiver.visit(this);
      if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) && ast.receiver instanceof ast_1.ImplicitReceiver) {
        return this._addRecord(proto_record_1.RecordType.LOCAL, ast.name, ast.name, [], null, receiver);
      } else {
        return this._addRecord(proto_record_1.RecordType.PROPERTY_READ, ast.name, ast.getter, [], null, receiver);
      }
    };
    _ConvertAstIntoProtoRecords.prototype.visitPropertyWrite = function(ast) {
      if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) && ast.receiver instanceof ast_1.ImplicitReceiver) {
        throw new lang_1.BaseException("Cannot reassign a variable binding " + ast.name);
      } else {
        var receiver = ast.receiver.visit(this);
        var value = ast.value.visit(this);
        return this._addRecord(proto_record_1.RecordType.PROPERTY_WRITE, ast.name, ast.setter, [value], null, receiver);
      }
    };
    _ConvertAstIntoProtoRecords.prototype.visitKeyedWrite = function(ast) {
      var obj = ast.obj.visit(this);
      var key = ast.key.visit(this);
      var value = ast.value.visit(this);
      return this._addRecord(proto_record_1.RecordType.KEYED_WRITE, null, null, [key, value], null, obj);
    };
    _ConvertAstIntoProtoRecords.prototype.visitSafePropertyRead = function(ast) {
      var receiver = ast.receiver.visit(this);
      return this._addRecord(proto_record_1.RecordType.SAFE_PROPERTY, ast.name, ast.getter, [], null, receiver);
    };
    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function(ast) {
      var receiver = ast.receiver.visit(this);
      var args = this._visitAll(ast.args);
      if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
        var target = this._addRecord(proto_record_1.RecordType.LOCAL, ast.name, ast.name, [], null, receiver);
        return this._addRecord(proto_record_1.RecordType.INVOKE_CLOSURE, "closure", null, args, null, target);
      } else {
        return this._addRecord(proto_record_1.RecordType.INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
      }
    };
    _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function(ast) {
      var receiver = ast.receiver.visit(this);
      var args = this._visitAll(ast.args);
      return this._addRecord(proto_record_1.RecordType.SAFE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
    };
    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function(ast) {
      var target = ast.target.visit(this);
      var args = this._visitAll(ast.args);
      return this._addRecord(proto_record_1.RecordType.INVOKE_CLOSURE, "closure", null, args, null, target);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function(ast) {
      var primitiveName = "arrayFn" + ast.expressions.length;
      return this._addRecord(proto_record_1.RecordType.COLLECTION_LITERAL, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function(ast) {
      return this._addRecord(proto_record_1.RecordType.COLLECTION_LITERAL, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitBinary = function(ast) {
      var left = ast.left.visit(this);
      var right = ast.right.visit(this);
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function(ast) {
      var exp = ast.expression.visit(this);
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitConditional = function(ast) {
      var c = ast.condition.visit(this);
      var t = ast.trueExp.visit(this);
      var f = ast.falseExp.visit(this);
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [c, t, f], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPipe = function(ast) {
      var value = ast.exp.visit(this);
      var args = this._visitAll(ast.args);
      return this._addRecord(proto_record_1.RecordType.PIPE, ast.name, ast.name, args, null, value);
    };
    _ConvertAstIntoProtoRecords.prototype.visitKeyedRead = function(ast) {
      var obj = ast.obj.visit(this);
      var key = ast.key.visit(this);
      return this._addRecord(proto_record_1.RecordType.KEYED_READ, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
    };
    _ConvertAstIntoProtoRecords.prototype.visitChain = function(ast) {
      var _this = this;
      var args = ast.expressions.map(function(e) {
        return e.visit(_this);
      });
      return this._addRecord(proto_record_1.RecordType.CHAIN, "chain", null, args, null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitIf = function(ast) {
      throw new lang_1.BaseException('Not supported');
    };
    _ConvertAstIntoProtoRecords.prototype._visitAll = function(asts) {
      var res = collection_1.ListWrapper.createFixedSize(asts.length);
      for (var i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    };
    _ConvertAstIntoProtoRecords.prototype._addRecord = function(type, name, funcOrValue, args, fixedArgs, context) {
      var selfIndex = this._records.length + 1;
      if (context instanceof directive_record_1.DirectiveIndex) {
        this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, this._expressionAsString, false, false, false, false));
      } else {
        this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, this._expressionAsString, false, false, false, false));
      }
      return selfIndex;
    };
    return _ConvertAstIntoProtoRecords;
  })();
  function _arrayFn(length) {
    switch (length) {
      case 0:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
      case 1:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
      case 2:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
      case 3:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
      case 4:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
      case 5:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
      case 6:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
      case 7:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
      case 8:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
      case 9:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
      default:
        throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
    }
  }
  function _mapPrimitiveName(keys) {
    var stringifiedKeys = collection_1.ListWrapper.join(collection_1.ListWrapper.map(keys, function(k) {
      return lang_1.isString(k) ? "\"" + k + "\"" : "" + k;
    }), ", ");
    return "mapFn([" + stringifiedKeys + "])";
  }
  function _operationToPrimitiveName(operation) {
    switch (operation) {
      case '+':
        return "operation_add";
      case '-':
        return "operation_subtract";
      case '*':
        return "operation_multiply";
      case '/':
        return "operation_divide";
      case '%':
        return "operation_remainder";
      case '==':
        return "operation_equals";
      case '!=':
        return "operation_not_equals";
      case '===':
        return "operation_identical";
      case '!==':
        return "operation_not_identical";
      case '<':
        return "operation_less_then";
      case '>':
        return "operation_greater_then";
      case '<=':
        return "operation_less_or_equals_then";
      case '>=':
        return "operation_greater_or_equals_then";
      case '&&':
        return "operation_logical_and";
      case '||':
        return "operation_logical_or";
      default:
        throw new lang_1.BaseException("Unsupported operation " + operation);
    }
  }
  function _operationToFunction(operation) {
    switch (operation) {
      case '+':
        return change_detection_util_1.ChangeDetectionUtil.operation_add;
      case '-':
        return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
      case '*':
        return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
      case '/':
        return change_detection_util_1.ChangeDetectionUtil.operation_divide;
      case '%':
        return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
      case '==':
        return change_detection_util_1.ChangeDetectionUtil.operation_equals;
      case '!=':
        return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
      case '===':
        return change_detection_util_1.ChangeDetectionUtil.operation_identical;
      case '!==':
        return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
      case '<':
        return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
      case '>':
        return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
      case '<=':
        return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
      case '>=':
        return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
      case '&&':
        return change_detection_util_1.ChangeDetectionUtil.operation_logical_and;
      case '||':
        return change_detection_util_1.ChangeDetectionUtil.operation_logical_or;
      default:
        throw new lang_1.BaseException("Unsupported operation " + operation);
    }
  }
  function s(v) {
    return lang_1.isPresent(v) ? "" + v : '';
  }
  function _interpolationFn(strings) {
    var length = strings.length;
    var c0 = length > 0 ? strings[0] : null;
    var c1 = length > 1 ? strings[1] : null;
    var c2 = length > 2 ? strings[2] : null;
    var c3 = length > 3 ? strings[3] : null;
    var c4 = length > 4 ? strings[4] : null;
    var c5 = length > 5 ? strings[5] : null;
    var c6 = length > 6 ? strings[6] : null;
    var c7 = length > 7 ? strings[7] : null;
    var c8 = length > 8 ? strings[8] : null;
    var c9 = length > 9 ? strings[9] : null;
    switch (length - 1) {
      case 1:
        return function(a1) {
          return c0 + s(a1) + c1;
        };
      case 2:
        return function(a1, a2) {
          return c0 + s(a1) + c1 + s(a2) + c2;
        };
      case 3:
        return function(a1, a2, a3) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;
        };
      case 4:
        return function(a1, a2, a3, a4) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;
        };
      case 5:
        return function(a1, a2, a3, a4, a5) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
        };
      case 6:
        return function(a1, a2, a3, a4, a5, a6) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
        };
      case 7:
        return function(a1, a2, a3, a4, a5, a6, a7) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;
        };
      case 8:
        return function(a1, a2, a3, a4, a5, a6, a7, a8) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;
        };
      case 9:
        return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;
        };
      default:
        throw new lang_1.BaseException("Does not support more than 9 expressions");
    }
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/iterable_differs.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var IterableDiffers = (function() {
    function IterableDiffers(factories) {
      this.factories = factories;
    }
    IterableDiffers.create = function(factories, parent) {
      if (lang_1.isPresent(parent)) {
        var copied = collection_1.ListWrapper.clone(parent.factories);
        factories = factories.concat(copied);
        return new IterableDiffers(factories);
      } else {
        return new IterableDiffers(factories);
      }
    };
    IterableDiffers.extend = function(factories) {
      return new di_1.Binding(IterableDiffers, {
        toFactory: function(parent) {
          if (lang_1.isBlank(parent)) {
            throw new lang_1.BaseException('Cannot extend IterableDiffers without a parent injector');
          }
          return IterableDiffers.create(factories, parent);
        },
        deps: [[IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
      });
    };
    IterableDiffers.prototype.find = function(iterable) {
      var factory = collection_1.ListWrapper.find(this.factories, function(f) {
        return f.supports(iterable);
      });
      if (lang_1.isPresent(factory)) {
        return factory;
      } else {
        throw new lang_1.BaseException("Cannot find a differ supporting object '" + iterable + "'");
      }
    };
    IterableDiffers = __decorate([di_1.Injectable(), lang_1.CONST(), __metadata('design:paramtypes', [Array])], IterableDiffers);
    return IterableDiffers;
  })();
  exports.IterableDiffers = IterableDiffers;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/default_iterable_differ.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_2 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var DefaultIterableDifferFactory = (function() {
    function DefaultIterableDifferFactory() {}
    DefaultIterableDifferFactory.prototype.supports = function(obj) {
      return collection_1.isListLikeIterable(obj);
    };
    DefaultIterableDifferFactory.prototype.create = function(cdRef) {
      return new DefaultIterableDiffer();
    };
    DefaultIterableDifferFactory = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], DefaultIterableDifferFactory);
    return DefaultIterableDifferFactory;
  })();
  exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
  var DefaultIterableDiffer = (function() {
    function DefaultIterableDiffer() {
      this._collection = null;
      this._length = null;
      this._linkedRecords = null;
      this._unlinkedRecords = null;
      this._previousItHead = null;
      this._itHead = null;
      this._itTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._movesHead = null;
      this._movesTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
      get: function() {
        return this._collection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
      get: function() {
        return this._length;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._itHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
      var record;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.diff = function(collection) {
      if (lang_2.isBlank(collection))
        collection = [];
      if (!collection_1.isListLikeIterable(collection)) {
        throw new lang_1.BaseException("Error trying to diff '" + collection + "'");
      }
      if (this.check(collection)) {
        return this;
      } else {
        return null;
      }
    };
    DefaultIterableDiffer.prototype.onDestroy = function() {};
    DefaultIterableDiffer.prototype.check = function(collection) {
      var _this = this;
      this._reset();
      var record = this._itHead;
      var mayBeDirty = false;
      var index;
      var item;
      if (lang_2.isArray(collection)) {
        var list = collection;
        this._length = collection.length;
        for (index = 0; index < this._length; index++) {
          item = list[index];
          if (record === null || !lang_2.looseIdentical(record.item, item)) {
            record = this._mismatch(record, item, index);
            mayBeDirty = true;
          } else if (mayBeDirty) {
            record = this._verifyReinsertion(record, item, index);
          }
          record = record._next;
        }
      } else {
        index = 0;
        collection_1.iterateListLike(collection, function(item) {
          if (record === null || !lang_2.looseIdentical(record.item, item)) {
            record = _this._mismatch(record, item, index);
            mayBeDirty = true;
          } else if (mayBeDirty) {
            record = _this._verifyReinsertion(record, item, index);
          }
          record = record._next;
          index++;
        });
        this._length = index;
      }
      this._truncate(record);
      this._collection = collection;
      return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record;
        var nextRecord;
        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          record.previousIndex = record.currentIndex;
        }
        this._additionsHead = this._additionsTail = null;
        for (record = this._movesHead; record !== null; record = nextRecord) {
          record.previousIndex = record.currentIndex;
          nextRecord = record._nextMoved;
        }
        this._movesHead = this._movesTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    DefaultIterableDiffer.prototype._mismatch = function(record, item, index) {
      var previousRecord;
      if (record === null) {
        previousRecord = this._itTail;
      } else {
        previousRecord = record._prev;
        this._remove(record);
      }
      record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
      if (record !== null) {
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
        if (record !== null) {
          this._reinsertAfter(record, previousRecord, index);
        } else {
          record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
        }
      }
      return record;
    };
    DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, index) {
      var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
      if (reinsertRecord !== null) {
        record = this._reinsertAfter(reinsertRecord, record._prev, index);
      } else if (record.currentIndex != index) {
        record.currentIndex = index;
        this._addToMoves(record, index);
      }
      return record;
    };
    DefaultIterableDiffer.prototype._truncate = function(record) {
      while (record !== null) {
        var nextRecord = record._next;
        this._addToRemovals(this._unlink(record));
        record = nextRecord;
      }
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.clear();
      }
      if (this._additionsTail !== null) {
        this._additionsTail._nextAdded = null;
      }
      if (this._movesTail !== null) {
        this._movesTail._nextMoved = null;
      }
      if (this._itTail !== null) {
        this._itTail._next = null;
      }
      if (this._removalsTail !== null) {
        this._removalsTail._nextRemoved = null;
      }
    };
    DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.remove(record);
      }
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
      this._unlink(record);
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
      this._insertAfter(record, prevRecord, index);
      if (this._additionsTail === null) {
        this._additionsTail = this._additionsHead = record;
      } else {
        this._additionsTail = this._additionsTail._nextAdded = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
      var next = prevRecord === null ? this._itHead : prevRecord._next;
      record._next = next;
      record._prev = prevRecord;
      if (next === null) {
        this._itTail = record;
      } else {
        next._prev = record;
      }
      if (prevRecord === null) {
        this._itHead = record;
      } else {
        prevRecord._next = record;
      }
      if (this._linkedRecords === null) {
        this._linkedRecords = new _DuplicateMap();
      }
      this._linkedRecords.put(record);
      record.currentIndex = index;
      return record;
    };
    DefaultIterableDiffer.prototype._remove = function(record) {
      return this._addToRemovals(this._unlink(record));
    };
    DefaultIterableDiffer.prototype._unlink = function(record) {
      if (this._linkedRecords !== null) {
        this._linkedRecords.remove(record);
      }
      var prev = record._prev;
      var next = record._next;
      if (prev === null) {
        this._itHead = next;
      } else {
        prev._next = next;
      }
      if (next === null) {
        this._itTail = prev;
      } else {
        next._prev = prev;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
      if (record.previousIndex === toIndex) {
        return record;
      }
      if (this._movesTail === null) {
        this._movesTail = this._movesHead = record;
      } else {
        this._movesTail = this._movesTail._nextMoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToRemovals = function(record) {
      if (this._unlinkedRecords === null) {
        this._unlinkedRecords = new _DuplicateMap();
      }
      this._unlinkedRecords.put(record);
      record.currentIndex = null;
      record._nextRemoved = null;
      if (this._removalsTail === null) {
        this._removalsTail = this._removalsHead = record;
        record._prevRemoved = null;
      } else {
        record._prevRemoved = this._removalsTail;
        this._removalsTail = this._removalsTail._nextRemoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype.toString = function() {
      var record;
      var list = [];
      for (record = this._itHead; record !== null; record = record._next) {
        list.push(record);
      }
      var previous = [];
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        previous.push(record);
      }
      var additions = [];
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(record);
      }
      var moves = [];
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        moves.push(record);
      }
      var removals = [];
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(record);
      }
      return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" + "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" + "removals: " + removals.join(', ') + "\n";
    };
    return DefaultIterableDiffer;
  })();
  exports.DefaultIterableDiffer = DefaultIterableDiffer;
  var CollectionChangeRecord = (function() {
    function CollectionChangeRecord(item) {
      this.item = item;
      this.currentIndex = null;
      this.previousIndex = null;
      this._nextPrevious = null;
      this._prev = null;
      this._next = null;
      this._prevDup = null;
      this._nextDup = null;
      this._prevRemoved = null;
      this._nextRemoved = null;
      this._nextAdded = null;
      this._nextMoved = null;
    }
    CollectionChangeRecord.prototype.toString = function() {
      return this.previousIndex === this.currentIndex ? lang_2.stringify(this.item) : lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' + lang_2.stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
  })();
  exports.CollectionChangeRecord = CollectionChangeRecord;
  var _DuplicateItemRecordList = (function() {
    function _DuplicateItemRecordList() {
      this._head = null;
      this._tail = null;
    }
    _DuplicateItemRecordList.prototype.add = function(record) {
      if (this._head === null) {
        this._head = this._tail = record;
        record._nextDup = null;
        record._prevDup = null;
      } else {
        this._tail._nextDup = record;
        record._prevDup = this._tail;
        record._nextDup = null;
        this._tail = record;
      }
    };
    _DuplicateItemRecordList.prototype.get = function(item, afterIndex) {
      var record;
      for (record = this._head; record !== null; record = record._nextDup) {
        if ((afterIndex === null || afterIndex < record.currentIndex) && lang_2.looseIdentical(record.item, item)) {
          return record;
        }
      }
      return null;
    };
    _DuplicateItemRecordList.prototype.remove = function(record) {
      var prev = record._prevDup;
      var next = record._nextDup;
      if (prev === null) {
        this._head = next;
      } else {
        prev._nextDup = next;
      }
      if (next === null) {
        this._tail = prev;
      } else {
        next._prevDup = prev;
      }
      return this._head === null;
    };
    return _DuplicateItemRecordList;
  })();
  var _DuplicateMap = (function() {
    function _DuplicateMap() {
      this.map = new Map();
    }
    _DuplicateMap.prototype.put = function(record) {
      var key = lang_2.getMapKey(record.item);
      var duplicates = this.map.get(key);
      if (!lang_2.isPresent(duplicates)) {
        duplicates = new _DuplicateItemRecordList();
        this.map.set(key, duplicates);
      }
      duplicates.add(record);
    };
    _DuplicateMap.prototype.get = function(value, afterIndex) {
      if (afterIndex === void 0) {
        afterIndex = null;
      }
      var key = lang_2.getMapKey(value);
      var recordList = this.map.get(key);
      return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
    };
    _DuplicateMap.prototype.remove = function(record) {
      var key = lang_2.getMapKey(record.item);
      var recordList = this.map.get(key);
      if (recordList.remove(record)) {
        collection_1.MapWrapper.delete(this.map, key);
      }
      return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
      get: function() {
        return collection_1.MapWrapper.size(this.map) === 0;
      },
      enumerable: true,
      configurable: true
    });
    _DuplicateMap.prototype.clear = function() {
      this.map.clear();
    };
    _DuplicateMap.prototype.toString = function() {
      return '_DuplicateMap(' + lang_2.stringify(this.map) + ')';
    };
    return _DuplicateMap;
  })();
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/keyvalue_differs.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var KeyValueDiffers = (function() {
    function KeyValueDiffers(factories) {
      this.factories = factories;
    }
    KeyValueDiffers.create = function(factories, parent) {
      if (lang_1.isPresent(parent)) {
        var copied = collection_1.ListWrapper.clone(parent.factories);
        factories = factories.concat(copied);
        return new KeyValueDiffers(factories);
      } else {
        return new KeyValueDiffers(factories);
      }
    };
    KeyValueDiffers.extend = function(factories) {
      return new di_1.Binding(KeyValueDiffers, {
        toFactory: function(parent) {
          if (lang_1.isBlank(parent)) {
            throw new lang_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');
          }
          return KeyValueDiffers.create(factories, parent);
        },
        deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
      });
    };
    KeyValueDiffers.prototype.find = function(kv) {
      var factory = collection_1.ListWrapper.find(this.factories, function(f) {
        return f.supports(kv);
      });
      if (lang_1.isPresent(factory)) {
        return factory;
      } else {
        throw new lang_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
      }
    };
    KeyValueDiffers = __decorate([di_1.Injectable(), lang_1.CONST(), __metadata('design:paramtypes', [Array])], KeyValueDiffers);
    return KeyValueDiffers;
  })();
  exports.KeyValueDiffers = KeyValueDiffers;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/differs/default_keyvalue_differ.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var DefaultKeyValueDifferFactory = (function() {
    function DefaultKeyValueDifferFactory() {}
    DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
      return obj instanceof Map || lang_1.isJsObject(obj);
    };
    DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
      return new DefaultKeyValueDiffer();
    };
    DefaultKeyValueDifferFactory = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], DefaultKeyValueDifferFactory);
    return DefaultKeyValueDifferFactory;
  })();
  exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
  var DefaultKeyValueDiffer = (function() {
    function DefaultKeyValueDiffer() {
      this._records = new Map();
      this._mapHead = null;
      this._previousMapHead = null;
      this._changesHead = null;
      this._changesTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
      var record;
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.diff = function(map) {
      if (lang_1.isBlank(map))
        map = collection_1.MapWrapper.createFromPairs([]);
      if (!(map instanceof Map || lang_1.isJsObject(map))) {
        throw new lang_1.BaseException("Error trying to diff '" + map + "'");
      }
      if (this.check(map)) {
        return this;
      } else {
        return null;
      }
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function() {};
    DefaultKeyValueDiffer.prototype.check = function(map) {
      var _this = this;
      this._reset();
      var records = this._records;
      var oldSeqRecord = this._mapHead;
      var lastOldSeqRecord = null;
      var lastNewSeqRecord = null;
      var seqChanged = false;
      this._forEach(map, function(value, key) {
        var newSeqRecord;
        if (oldSeqRecord !== null && key === oldSeqRecord.key) {
          newSeqRecord = oldSeqRecord;
          if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
            oldSeqRecord.previousValue = oldSeqRecord.currentValue;
            oldSeqRecord.currentValue = value;
            _this._addToChanges(oldSeqRecord);
          }
        } else {
          seqChanged = true;
          if (oldSeqRecord !== null) {
            oldSeqRecord._next = null;
            _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
            _this._addToRemovals(oldSeqRecord);
          }
          if (records.has(key)) {
            newSeqRecord = records.get(key);
          } else {
            newSeqRecord = new KVChangeRecord(key);
            records.set(key, newSeqRecord);
            newSeqRecord.currentValue = value;
            _this._addToAdditions(newSeqRecord);
          }
        }
        if (seqChanged) {
          if (_this._isInRemovals(newSeqRecord)) {
            _this._removeFromRemovals(newSeqRecord);
          }
          if (lastNewSeqRecord == null) {
            _this._mapHead = newSeqRecord;
          } else {
            lastNewSeqRecord._next = newSeqRecord;
          }
        }
        lastOldSeqRecord = oldSeqRecord;
        lastNewSeqRecord = newSeqRecord;
        oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
      });
      this._truncate(lastOldSeqRecord, oldSeqRecord);
      return this.isDirty;
    };
    DefaultKeyValueDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record;
        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          record.previousValue = record.currentValue;
        }
        for (record = this._additionsHead; record != null; record = record._nextAdded) {
          record.previousValue = record.currentValue;
        }
        this._changesHead = this._changesTail = null;
        this._additionsHead = this._additionsTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
      while (record !== null) {
        if (lastRecord === null) {
          this._mapHead = null;
        } else {
          lastRecord._next = null;
        }
        var nextRecord = record._next;
        this._addToRemovals(record);
        lastRecord = record;
        record = nextRecord;
      }
      for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
        rec.previousValue = rec.currentValue;
        rec.currentValue = null;
        collection_1.MapWrapper.delete(this._records, rec.key);
      }
    };
    DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
      return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
    };
    DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
      if (this._removalsHead === null) {
        this._removalsHead = this._removalsTail = record;
      } else {
        this._removalsTail._nextRemoved = record;
        record._prevRemoved = this._removalsTail;
        this._removalsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
      var next = record._next;
      if (prev === null) {
        this._mapHead = next;
      } else {
        prev._next = next;
      }
    };
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      record._prevRemoved = record._nextRemoved = null;
    };
    DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
      if (this._additionsHead === null) {
        this._additionsHead = this._additionsTail = record;
      } else {
        this._additionsTail._nextAdded = record;
        this._additionsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
      if (this._changesHead === null) {
        this._changesHead = this._changesTail = record;
      } else {
        this._changesTail._nextChanged = record;
        this._changesTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype.toString = function() {
      var items = [];
      var previous = [];
      var changes = [];
      var additions = [];
      var removals = [];
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        items.push(lang_1.stringify(record));
      }
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        previous.push(lang_1.stringify(record));
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        changes.push(lang_1.stringify(record));
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(lang_1.stringify(record));
      }
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(lang_1.stringify(record));
      }
      return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" + "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" + "removals: " + removals.join(', ') + "\n";
    };
    DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
      if (obj instanceof Map) {
        collection_1.MapWrapper.forEach(obj, fn);
      } else {
        collection_1.StringMapWrapper.forEach(obj, fn);
      }
    };
    return DefaultKeyValueDiffer;
  })();
  exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
  var KVChangeRecord = (function() {
    function KVChangeRecord(key) {
      this.key = key;
      this.previousValue = null;
      this.currentValue = null;
      this._nextPrevious = null;
      this._next = null;
      this._nextAdded = null;
      this._nextRemoved = null;
      this._prevRemoved = null;
      this._nextChanged = null;
    }
    KVChangeRecord.prototype.toString = function() {
      return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' + lang_1.stringify(this.currentValue) + ']');
    };
    return KVChangeRecord;
  })();
  exports.KVChangeRecord = KVChangeRecord;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ChangeDetection = (function() {
    function ChangeDetection() {}
    ChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      return null;
    };
    ChangeDetection = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], ChangeDetection);
    return ChangeDetection;
  })();
  exports.ChangeDetection = ChangeDetection;
  var DebugContext = (function() {
    function DebugContext(element, componentElement, directive, context, locals, injector) {
      this.element = element;
      this.componentElement = componentElement;
      this.directive = directive;
      this.context = context;
      this.locals = locals;
      this.injector = injector;
    }
    return DebugContext;
  })();
  exports.DebugContext = DebugContext;
  var ChangeDetectorDefinition = (function() {
    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, generateCheckNoChanges) {
      this.id = id;
      this.strategy = strategy;
      this.variableNames = variableNames;
      this.bindingRecords = bindingRecords;
      this.eventRecords = eventRecords;
      this.directiveRecords = directiveRecords;
      this.generateCheckNoChanges = generateCheckNoChanges;
    }
    return ChangeDetectorDefinition;
  })();
  exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/facade/collection.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.List = lang_1.global.Array;
  exports.Map = lang_1.global.Map;
  exports.Set = lang_1.global.Set;
  exports.StringMap = lang_1.global.Object;
  var createMapFromPairs = (function() {
    try {
      if (new exports.Map([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new exports.Map(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new exports.Map();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new exports.Map(new exports.Map())) {
        return function createMapFromMap(m) {
          return new exports.Map(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new exports.Map();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new exports.Map()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new exports.Map()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        ListWrapper.set(res, i, getValues ? v : k);
        i++;
      });
      return res;
    };
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new exports.Map();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.toStringMap = function(m) {
      var r = {};
      m.forEach(function(v, k) {
        return r[k] = v;
      });
      return r;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.forEach = function(m, fn) {
      m.forEach(fn);
    };
    MapWrapper.get = function(map, key) {
      return map.get(key);
    };
    MapWrapper.size = function(m) {
      return m.size;
    };
    MapWrapper.delete = function(m, k) {
      m.delete(k);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return _arrayFromMap(m, false);
    };
    MapWrapper.values = function(m) {
      return _arrayFromMap(m, true);
    };
    return MapWrapper;
  })();
  exports.MapWrapper = MapWrapper;
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var prop in map) {
        if (map.hasOwnProperty(prop)) {
          callback(map[prop], prop);
        }
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var attr in m1) {
        if (m1.hasOwnProperty(attr)) {
          m[attr] = m1[attr];
        }
      }
      for (var attr in m2) {
        if (m2.hasOwnProperty(attr)) {
          m[attr] = m2[attr];
        }
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  })();
  exports.StringMapWrapper = StringMapWrapper;
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new exports.List(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new exports.List(size);
    };
    ListWrapper.get = function(m, k) {
      return m[k];
    };
    ListWrapper.set = function(m, k, v) {
      m[k] = v;
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.map = function(array, fn) {
      return array.map(fn);
    };
    ListWrapper.forEach = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i]);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.find = function(list, pred) {
      for (var i = 0; i < list.length; ++i) {
        if (pred(list[i]))
          return list[i];
      }
      return null;
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.reduce = function(list, fn, init) {
      return list.reduce(fn, init);
    };
    ListWrapper.filter = function(array, pred) {
      return array.filter(pred);
    };
    ListWrapper.any = function(list, pred) {
      for (var i = 0; i < list.length; ++i) {
        if (pred(list[i]))
          return true;
      }
      return false;
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.removeLast = function(list) {
      return list.pop();
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.splice(0, list.length);
    };
    ListWrapper.join = function(list, s) {
      return list.join(s);
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? undefined : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (lang_1.isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    return ListWrapper;
  })();
  exports.ListWrapper = ListWrapper;
  function isListLikeIterable(obj) {
    if (!lang_1.isJsObject(obj))
      return false;
    return lang_1.isArray(obj) || (!(obj instanceof exports.Map) && Symbol.iterator in obj);
  }
  exports.isListLikeIterable = isListLikeIterable;
  function iterateListLike(obj, fn) {
    if (lang_1.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[Symbol.iterator]();
      var item;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  exports.iterateListLike = iterateListLike;
  var createSetFromList = (function() {
    var test = new exports.Set([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new exports.Set(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new exports.Set(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var SetWrapper = (function() {
    function SetWrapper() {}
    SetWrapper.createFromList = function(lst) {
      return createSetFromList(lst);
    };
    SetWrapper.has = function(s, key) {
      return s.has(key);
    };
    SetWrapper.delete = function(m, k) {
      m.delete(k);
    };
    return SetWrapper;
  })();
  exports.SetWrapper = SetWrapper;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var AST = (function() {
    function AST() {}
    AST.prototype.visit = function(visitor) {
      return null;
    };
    AST.prototype.toString = function() {
      return "AST";
    };
    return AST;
  })();
  exports.AST = AST;
  var EmptyExpr = (function(_super) {
    __extends(EmptyExpr, _super);
    function EmptyExpr() {
      _super.apply(this, arguments);
    }
    EmptyExpr.prototype.visit = function(visitor) {};
    return EmptyExpr;
  })(AST);
  exports.EmptyExpr = EmptyExpr;
  var ImplicitReceiver = (function(_super) {
    __extends(ImplicitReceiver, _super);
    function ImplicitReceiver() {
      _super.apply(this, arguments);
    }
    ImplicitReceiver.prototype.visit = function(visitor) {
      return visitor.visitImplicitReceiver(this);
    };
    return ImplicitReceiver;
  })(AST);
  exports.ImplicitReceiver = ImplicitReceiver;
  var Chain = (function(_super) {
    __extends(Chain, _super);
    function Chain(expressions) {
      _super.call(this);
      this.expressions = expressions;
    }
    Chain.prototype.visit = function(visitor) {
      return visitor.visitChain(this);
    };
    return Chain;
  })(AST);
  exports.Chain = Chain;
  var Conditional = (function(_super) {
    __extends(Conditional, _super);
    function Conditional(condition, trueExp, falseExp) {
      _super.call(this);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    Conditional.prototype.visit = function(visitor) {
      return visitor.visitConditional(this);
    };
    return Conditional;
  })(AST);
  exports.Conditional = Conditional;
  var If = (function(_super) {
    __extends(If, _super);
    function If(condition, trueExp, falseExp) {
      _super.call(this);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    If.prototype.visit = function(visitor) {
      return visitor.visitIf(this);
    };
    return If;
  })(AST);
  exports.If = If;
  var PropertyRead = (function(_super) {
    __extends(PropertyRead, _super);
    function PropertyRead(receiver, name, getter) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.getter = getter;
    }
    PropertyRead.prototype.visit = function(visitor) {
      return visitor.visitPropertyRead(this);
    };
    return PropertyRead;
  })(AST);
  exports.PropertyRead = PropertyRead;
  var PropertyWrite = (function(_super) {
    __extends(PropertyWrite, _super);
    function PropertyWrite(receiver, name, setter, value) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.setter = setter;
      this.value = value;
    }
    PropertyWrite.prototype.visit = function(visitor) {
      return visitor.visitPropertyWrite(this);
    };
    return PropertyWrite;
  })(AST);
  exports.PropertyWrite = PropertyWrite;
  var SafePropertyRead = (function(_super) {
    __extends(SafePropertyRead, _super);
    function SafePropertyRead(receiver, name, getter) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.getter = getter;
    }
    SafePropertyRead.prototype.visit = function(visitor) {
      return visitor.visitSafePropertyRead(this);
    };
    return SafePropertyRead;
  })(AST);
  exports.SafePropertyRead = SafePropertyRead;
  var KeyedRead = (function(_super) {
    __extends(KeyedRead, _super);
    function KeyedRead(obj, key) {
      _super.call(this);
      this.obj = obj;
      this.key = key;
    }
    KeyedRead.prototype.visit = function(visitor) {
      return visitor.visitKeyedRead(this);
    };
    return KeyedRead;
  })(AST);
  exports.KeyedRead = KeyedRead;
  var KeyedWrite = (function(_super) {
    __extends(KeyedWrite, _super);
    function KeyedWrite(obj, key, value) {
      _super.call(this);
      this.obj = obj;
      this.key = key;
      this.value = value;
    }
    KeyedWrite.prototype.visit = function(visitor) {
      return visitor.visitKeyedWrite(this);
    };
    return KeyedWrite;
  })(AST);
  exports.KeyedWrite = KeyedWrite;
  var BindingPipe = (function(_super) {
    __extends(BindingPipe, _super);
    function BindingPipe(exp, name, args) {
      _super.call(this);
      this.exp = exp;
      this.name = name;
      this.args = args;
    }
    BindingPipe.prototype.visit = function(visitor) {
      return visitor.visitPipe(this);
    };
    return BindingPipe;
  })(AST);
  exports.BindingPipe = BindingPipe;
  var LiteralPrimitive = (function(_super) {
    __extends(LiteralPrimitive, _super);
    function LiteralPrimitive(value) {
      _super.call(this);
      this.value = value;
    }
    LiteralPrimitive.prototype.visit = function(visitor) {
      return visitor.visitLiteralPrimitive(this);
    };
    return LiteralPrimitive;
  })(AST);
  exports.LiteralPrimitive = LiteralPrimitive;
  var LiteralArray = (function(_super) {
    __extends(LiteralArray, _super);
    function LiteralArray(expressions) {
      _super.call(this);
      this.expressions = expressions;
    }
    LiteralArray.prototype.visit = function(visitor) {
      return visitor.visitLiteralArray(this);
    };
    return LiteralArray;
  })(AST);
  exports.LiteralArray = LiteralArray;
  var LiteralMap = (function(_super) {
    __extends(LiteralMap, _super);
    function LiteralMap(keys, values) {
      _super.call(this);
      this.keys = keys;
      this.values = values;
    }
    LiteralMap.prototype.visit = function(visitor) {
      return visitor.visitLiteralMap(this);
    };
    return LiteralMap;
  })(AST);
  exports.LiteralMap = LiteralMap;
  var Interpolation = (function(_super) {
    __extends(Interpolation, _super);
    function Interpolation(strings, expressions) {
      _super.call(this);
      this.strings = strings;
      this.expressions = expressions;
    }
    Interpolation.prototype.visit = function(visitor) {
      visitor.visitInterpolation(this);
    };
    return Interpolation;
  })(AST);
  exports.Interpolation = Interpolation;
  var Binary = (function(_super) {
    __extends(Binary, _super);
    function Binary(operation, left, right) {
      _super.call(this);
      this.operation = operation;
      this.left = left;
      this.right = right;
    }
    Binary.prototype.visit = function(visitor) {
      return visitor.visitBinary(this);
    };
    return Binary;
  })(AST);
  exports.Binary = Binary;
  var PrefixNot = (function(_super) {
    __extends(PrefixNot, _super);
    function PrefixNot(expression) {
      _super.call(this);
      this.expression = expression;
    }
    PrefixNot.prototype.visit = function(visitor) {
      return visitor.visitPrefixNot(this);
    };
    return PrefixNot;
  })(AST);
  exports.PrefixNot = PrefixNot;
  var MethodCall = (function(_super) {
    __extends(MethodCall, _super);
    function MethodCall(receiver, name, fn, args) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.fn = fn;
      this.args = args;
    }
    MethodCall.prototype.visit = function(visitor) {
      return visitor.visitMethodCall(this);
    };
    return MethodCall;
  })(AST);
  exports.MethodCall = MethodCall;
  var SafeMethodCall = (function(_super) {
    __extends(SafeMethodCall, _super);
    function SafeMethodCall(receiver, name, fn, args) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.fn = fn;
      this.args = args;
    }
    SafeMethodCall.prototype.visit = function(visitor) {
      return visitor.visitSafeMethodCall(this);
    };
    return SafeMethodCall;
  })(AST);
  exports.SafeMethodCall = SafeMethodCall;
  var FunctionCall = (function(_super) {
    __extends(FunctionCall, _super);
    function FunctionCall(target, args) {
      _super.call(this);
      this.target = target;
      this.args = args;
    }
    FunctionCall.prototype.visit = function(visitor) {
      return visitor.visitFunctionCall(this);
    };
    return FunctionCall;
  })(AST);
  exports.FunctionCall = FunctionCall;
  var ASTWithSource = (function(_super) {
    __extends(ASTWithSource, _super);
    function ASTWithSource(ast, source, location) {
      _super.call(this);
      this.ast = ast;
      this.source = source;
      this.location = location;
    }
    ASTWithSource.prototype.visit = function(visitor) {
      return this.ast.visit(visitor);
    };
    ASTWithSource.prototype.toString = function() {
      return this.source + " in " + this.location;
    };
    return ASTWithSource;
  })(AST);
  exports.ASTWithSource = ASTWithSource;
  var TemplateBinding = (function() {
    function TemplateBinding(key, keyIsVar, name, expression) {
      this.key = key;
      this.keyIsVar = keyIsVar;
      this.name = name;
      this.expression = expression;
    }
    return TemplateBinding;
  })();
  exports.TemplateBinding = TemplateBinding;
  var AstTransformer = (function() {
    function AstTransformer() {}
    AstTransformer.prototype.visitImplicitReceiver = function(ast) {
      return ast;
    };
    AstTransformer.prototype.visitInterpolation = function(ast) {
      return new Interpolation(ast.strings, this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitLiteralPrimitive = function(ast) {
      return new LiteralPrimitive(ast.value);
    };
    AstTransformer.prototype.visitPropertyRead = function(ast) {
      return new PropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
    };
    AstTransformer.prototype.visitPropertyWrite = function(ast) {
      return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.setter, ast.value);
    };
    AstTransformer.prototype.visitSafePropertyRead = function(ast) {
      return new SafePropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
    };
    AstTransformer.prototype.visitMethodCall = function(ast) {
      return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitSafeMethodCall = function(ast) {
      return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitFunctionCall = function(ast) {
      return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitLiteralArray = function(ast) {
      return new LiteralArray(this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitLiteralMap = function(ast) {
      return new LiteralMap(ast.keys, this.visitAll(ast.values));
    };
    AstTransformer.prototype.visitBinary = function(ast) {
      return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
    };
    AstTransformer.prototype.visitPrefixNot = function(ast) {
      return new PrefixNot(ast.expression.visit(this));
    };
    AstTransformer.prototype.visitConditional = function(ast) {
      return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
    };
    AstTransformer.prototype.visitPipe = function(ast) {
      return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitKeyedRead = function(ast) {
      return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
    };
    AstTransformer.prototype.visitKeyedWrite = function(ast) {
      return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
    };
    AstTransformer.prototype.visitAll = function(asts) {
      var res = collection_1.ListWrapper.createFixedSize(asts.length);
      for (var i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    };
    AstTransformer.prototype.visitChain = function(ast) {
      return new Chain(this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitIf = function(ast) {
      var falseExp = lang_1.isPresent(ast.falseExp) ? ast.falseExp.visit(this) : null;
      return new If(ast.condition.visit(this), ast.trueExp.visit(this), falseExp);
    };
    return AstTransformer;
  })();
  exports.AstTransformer = AstTransformer;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/lexer.js", ["npm:angular2@2.0.0-alpha.35/src/di/decorators.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var decorators_1 = require("npm:angular2@2.0.0-alpha.35/src/di/decorators.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  (function(TokenType) {
    TokenType[TokenType["CHARACTER"] = 0] = "CHARACTER";
    TokenType[TokenType["IDENTIFIER"] = 1] = "IDENTIFIER";
    TokenType[TokenType["KEYWORD"] = 2] = "KEYWORD";
    TokenType[TokenType["STRING"] = 3] = "STRING";
    TokenType[TokenType["OPERATOR"] = 4] = "OPERATOR";
    TokenType[TokenType["NUMBER"] = 5] = "NUMBER";
  })(exports.TokenType || (exports.TokenType = {}));
  var TokenType = exports.TokenType;
  var Lexer = (function() {
    function Lexer() {}
    Lexer.prototype.tokenize = function(text) {
      var scanner = new _Scanner(text);
      var tokens = [];
      var token = scanner.scanToken();
      while (token != null) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    };
    Lexer = __decorate([decorators_1.Injectable(), __metadata('design:paramtypes', [])], Lexer);
    return Lexer;
  })();
  exports.Lexer = Lexer;
  var Token = (function() {
    function Token(index, type, numValue, strValue) {
      this.index = index;
      this.type = type;
      this.numValue = numValue;
      this.strValue = strValue;
    }
    Token.prototype.isCharacter = function(code) {
      return (this.type == TokenType.CHARACTER && this.numValue == code);
    };
    Token.prototype.isNumber = function() {
      return (this.type == TokenType.NUMBER);
    };
    Token.prototype.isString = function() {
      return (this.type == TokenType.STRING);
    };
    Token.prototype.isOperator = function(operater) {
      return (this.type == TokenType.OPERATOR && this.strValue == operater);
    };
    Token.prototype.isIdentifier = function() {
      return (this.type == TokenType.IDENTIFIER);
    };
    Token.prototype.isKeyword = function() {
      return (this.type == TokenType.KEYWORD);
    };
    Token.prototype.isKeywordVar = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "var");
    };
    Token.prototype.isKeywordNull = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "null");
    };
    Token.prototype.isKeywordUndefined = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "undefined");
    };
    Token.prototype.isKeywordTrue = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "true");
    };
    Token.prototype.isKeywordIf = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "if");
    };
    Token.prototype.isKeywordElse = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "else");
    };
    Token.prototype.isKeywordFalse = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "false");
    };
    Token.prototype.toNumber = function() {
      return (this.type == TokenType.NUMBER) ? this.numValue : -1;
    };
    Token.prototype.toString = function() {
      switch (this.type) {
        case TokenType.CHARACTER:
        case TokenType.STRING:
        case TokenType.IDENTIFIER:
        case TokenType.KEYWORD:
          return this.strValue;
        case TokenType.NUMBER:
          return this.numValue.toString();
        default:
          return null;
      }
    };
    return Token;
  })();
  exports.Token = Token;
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.CHARACTER, code, lang_1.StringWrapper.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.IDENTIFIER, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.KEYWORD, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.OPERATOR, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.STRING, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.NUMBER, n, "");
  }
  exports.EOF = new Token(-1, TokenType.CHARACTER, 0, "");
  exports.$EOF = 0;
  exports.$TAB = 9;
  exports.$LF = 10;
  exports.$VTAB = 11;
  exports.$FF = 12;
  exports.$CR = 13;
  exports.$SPACE = 32;
  exports.$BANG = 33;
  exports.$DQ = 34;
  exports.$HASH = 35;
  exports.$$ = 36;
  exports.$PERCENT = 37;
  exports.$AMPERSAND = 38;
  exports.$SQ = 39;
  exports.$LPAREN = 40;
  exports.$RPAREN = 41;
  exports.$STAR = 42;
  exports.$PLUS = 43;
  exports.$COMMA = 44;
  exports.$MINUS = 45;
  exports.$PERIOD = 46;
  exports.$SLASH = 47;
  exports.$COLON = 58;
  exports.$SEMICOLON = 59;
  exports.$LT = 60;
  exports.$EQ = 61;
  exports.$GT = 62;
  exports.$QUESTION = 63;
  var $0 = 48;
  var $9 = 57;
  var $A = 65,
      $E = 69,
      $Z = 90;
  exports.$LBRACKET = 91;
  exports.$BACKSLASH = 92;
  exports.$RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97,
      $e = 101,
      $f = 102,
      $n = 110,
      $r = 114,
      $t = 116,
      $u = 117,
      $v = 118,
      $z = 122;
  exports.$LBRACE = 123;
  exports.$BAR = 124;
  exports.$RBRACE = 125;
  var $NBSP = 160;
  var ScannerError = (function(_super) {
    __extends(ScannerError, _super);
    function ScannerError(message) {
      _super.call(this);
      this.message = message;
    }
    ScannerError.prototype.toString = function() {
      return this.message;
    };
    return ScannerError;
  })(lang_1.BaseException);
  exports.ScannerError = ScannerError;
  var _Scanner = (function() {
    function _Scanner(input) {
      this.input = input;
      this.peek = 0;
      this.index = -1;
      this.length = input.length;
      this.advance();
    }
    _Scanner.prototype.advance = function() {
      this.peek = ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
    };
    _Scanner.prototype.scanToken = function() {
      var input = this.input,
          length = this.length,
          peek = this.peek,
          index = this.index;
      while (peek <= exports.$SPACE) {
        if (++index >= length) {
          peek = exports.$EOF;
          break;
        } else {
          peek = lang_1.StringWrapper.charCodeAt(input, index);
        }
      }
      this.peek = peek;
      this.index = index;
      if (index >= length) {
        return null;
      }
      if (isIdentifierStart(peek))
        return this.scanIdentifier();
      if (isDigit(peek))
        return this.scanNumber(index);
      var start = index;
      switch (peek) {
        case exports.$PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
        case exports.$LPAREN:
        case exports.$RPAREN:
        case exports.$LBRACE:
        case exports.$RBRACE:
        case exports.$LBRACKET:
        case exports.$RBRACKET:
        case exports.$COMMA:
        case exports.$COLON:
        case exports.$SEMICOLON:
          return this.scanCharacter(start, peek);
        case exports.$SQ:
        case exports.$DQ:
          return this.scanString();
        case exports.$HASH:
        case exports.$PLUS:
        case exports.$MINUS:
        case exports.$STAR:
        case exports.$SLASH:
        case exports.$PERCENT:
        case $CARET:
          return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
        case exports.$QUESTION:
          return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
        case exports.$LT:
        case exports.$GT:
          return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
        case exports.$BANG:
        case exports.$EQ:
          return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
        case exports.$AMPERSAND:
          return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
        case exports.$BAR:
          return this.scanComplexOperator(start, '|', exports.$BAR, '|');
        case $NBSP:
          while (isWhitespace(this.peek))
            this.advance();
          return this.scanToken();
      }
      this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
      return null;
    };
    _Scanner.prototype.scanCharacter = function(start, code) {
      assert(this.peek == code);
      this.advance();
      return newCharacterToken(start, code);
    };
    _Scanner.prototype.scanOperator = function(start, str) {
      assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
      assert(collection_1.SetWrapper.has(OPERATORS, str));
      this.advance();
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
      assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
      this.advance();
      var str = one;
      if (this.peek == twoCode) {
        this.advance();
        str += two;
      }
      if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
        this.advance();
        str += three;
      }
      assert(collection_1.SetWrapper.has(OPERATORS, str));
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanIdentifier = function() {
      assert(isIdentifierStart(this.peek));
      var start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek))
        this.advance();
      var str = this.input.substring(start, this.index);
      if (collection_1.SetWrapper.has(KEYWORDS, str)) {
        return newKeywordToken(start, str);
      } else {
        return newIdentifierToken(start, str);
      }
    };
    _Scanner.prototype.scanNumber = function(start) {
      assert(isDigit(this.peek));
      var simple = (this.index === start);
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {} else if (this.peek == exports.$PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek))
            this.advance();
          if (!isDigit(this.peek))
            this.error('Invalid exponent', -1);
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      var str = this.input.substring(start, this.index);
      var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
      return newNumberToken(start, value);
    };
    _Scanner.prototype.scanString = function() {
      assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
      var start = this.index;
      var quote = this.peek;
      this.advance();
      var buffer;
      var marker = this.index;
      var input = this.input;
      while (this.peek != quote) {
        if (this.peek == exports.$BACKSLASH) {
          if (buffer == null)
            buffer = new lang_1.StringJoiner();
          buffer.add(input.substring(marker, this.index));
          this.advance();
          var unescapedCode;
          if (this.peek == $u) {
            var hex = input.substring(this.index + 1, this.index + 5);
            try {
              unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
            } catch (e) {
              this.error("Invalid unicode escape [\\u" + hex + "]", 0);
            }
            for (var i = 0; i < 5; i++) {
              this.advance();
            }
          } else {
            unescapedCode = unescape(this.peek);
            this.advance();
          }
          buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
          marker = this.index;
        } else if (this.peek == exports.$EOF) {
          this.error('Unterminated quote', 0);
        } else {
          this.advance();
        }
      }
      var last = input.substring(marker, this.index);
      this.advance();
      var unescaped = last;
      if (buffer != null) {
        buffer.add(last);
        unescaped = buffer.toString();
      }
      return newStringToken(start, unescaped);
    };
    _Scanner.prototype.error = function(message, offset) {
      var position = this.index + offset;
      throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    };
    return _Scanner;
  })();
  function isWhitespace(code) {
    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
  }
  function isIdentifierStart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
  }
  function isIdentifierPart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) || (code == $_) || (code == exports.$$);
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == exports.$MINUS || code == exports.$PLUS;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return exports.$LF;
      case $f:
        return exports.$FF;
      case $r:
        return exports.$CR;
      case $t:
        return exports.$TAB;
      case $v:
        return exports.$VTAB;
      default:
        return code;
    }
  }
  var OPERATORS = collection_1.SetWrapper.createFromList(['+', '-', '*', '/', '%', '^', '=', '==', '!=', '===', '!==', '<', '>', '<=', '>=', '&&', '||', '&', '|', '!', '?', '#', '?.']);
  var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/parser.js", ["npm:angular2@2.0.0-alpha.35/src/di/decorators.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/lexer.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var decorators_1 = require("npm:angular2@2.0.0-alpha.35/src/di/decorators.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lexer_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/lexer.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var ast_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/ast.js");
  var _implicitReceiver = new ast_1.ImplicitReceiver();
  var INTERPOLATION_REGEXP = /\{\{(.*?)\}\}/g;
  var ParseException = (function(_super) {
    __extends(ParseException, _super);
    function ParseException(message, input, errLocation, ctxLocation) {
      _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation, null, null, ctxLocation);
    }
    return ParseException;
  })(lang_1.BaseException);
  var Parser = (function() {
    function Parser(_lexer, providedReflector) {
      if (providedReflector === void 0) {
        providedReflector = null;
      }
      this._lexer = _lexer;
      this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
    }
    Parser.prototype.parseAction = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
      return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseBinding = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
      return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseSimpleBinding = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseSimpleBinding();
      return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseTemplateBindings = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
    };
    Parser.prototype.parseInterpolation = function(input, location) {
      var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
      if (parts.length <= 1) {
        return null;
      }
      var strings = [];
      var expressions = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (i % 2 === 0) {
          strings.push(part);
        } else if (part.trim().length > 0) {
          var tokens = this._lexer.tokenize(part);
          var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
          expressions.push(ast);
        } else {
          var errLocation = '';
          for (var j = 0; j < i; j++) {
            errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
          }
          throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + errLocation.length + " in", location);
        }
      }
      return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
    };
    Parser.prototype.wrapLiteralPrimitive = function(input, location) {
      return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
    };
    Parser = __decorate([decorators_1.Injectable(), __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])], Parser);
    return Parser;
  })();
  exports.Parser = Parser;
  var _ParseAST = (function() {
    function _ParseAST(input, location, tokens, reflector, parseAction) {
      this.input = input;
      this.location = location;
      this.tokens = tokens;
      this.reflector = reflector;
      this.parseAction = parseAction;
      this.index = 0;
    }
    _ParseAST.prototype.peek = function(offset) {
      var i = this.index + offset;
      return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
    };
    Object.defineProperty(_ParseAST.prototype, "next", {
      get: function() {
        return this.peek(0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
      get: function() {
        return (this.index < this.tokens.length) ? this.next.index : this.input.length;
      },
      enumerable: true,
      configurable: true
    });
    _ParseAST.prototype.advance = function() {
      this.index++;
    };
    _ParseAST.prototype.optionalCharacter = function(code) {
      if (this.next.isCharacter(code)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.optionalKeywordVar = function() {
      if (this.peekKeywordVar()) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.peekKeywordVar = function() {
      return this.next.isKeywordVar() || this.next.isOperator('#');
    };
    _ParseAST.prototype.expectCharacter = function(code) {
      if (this.optionalCharacter(code))
        return;
      this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
    };
    _ParseAST.prototype.optionalOperator = function(op) {
      if (this.next.isOperator(op)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.expectOperator = function(operator) {
      if (this.optionalOperator(operator))
        return;
      this.error("Missing expected operator " + operator);
    };
    _ParseAST.prototype.expectIdentifierOrKeyword = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword()) {
        this.error("Unexpected token " + n + ", expected identifier or keyword");
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.parseChain = function() {
      var exprs = [];
      while (this.index < this.tokens.length) {
        var expr = this.parsePipe();
        exprs.push(expr);
        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
          if (!this.parseAction) {
            this.error("Binding expression cannot contain chained expression");
          }
          while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
        } else if (this.index < this.tokens.length) {
          this.error("Unexpected token '" + this.next + "'");
        }
      }
      if (exprs.length == 0)
        return new ast_1.EmptyExpr();
      if (exprs.length == 1)
        return exprs[0];
      return new ast_1.Chain(exprs);
    };
    _ParseAST.prototype.parseSimpleBinding = function() {
      var ast = this.parseChain();
      if (!SimpleExpressionChecker.check(ast)) {
        this.error("Simple binding expression can only contain field access and constants'");
      }
      return ast;
    };
    _ParseAST.prototype.parsePipe = function() {
      var result = this.parseExpression();
      if (this.optionalOperator("|")) {
        if (this.parseAction) {
          this.error("Cannot have a pipe in an action expression");
        }
        do {
          var name = this.expectIdentifierOrKeyword();
          var args = [];
          while (this.optionalCharacter(lexer_1.$COLON)) {
            args.push(this.parsePipe());
          }
          result = new ast_1.BindingPipe(result, name, args);
        } while (this.optionalOperator("|"));
      }
      return result;
    };
    _ParseAST.prototype.parseExpression = function() {
      return this.parseConditional();
    };
    _ParseAST.prototype.parseConditional = function() {
      var start = this.inputIndex;
      var result = this.parseLogicalOr();
      if (this.optionalOperator('?')) {
        var yes = this.parsePipe();
        if (!this.optionalCharacter(lexer_1.$COLON)) {
          var end = this.inputIndex;
          var expression = this.input.substring(start, end);
          this.error("Conditional expression " + expression + " requires all 3 expressions");
        }
        var no = this.parsePipe();
        return new ast_1.Conditional(result, yes, no);
      } else {
        return result;
      }
    };
    _ParseAST.prototype.parseLogicalOr = function() {
      var result = this.parseLogicalAnd();
      while (this.optionalOperator('||')) {
        result = new ast_1.Binary('||', result, this.parseLogicalAnd());
      }
      return result;
    };
    _ParseAST.prototype.parseLogicalAnd = function() {
      var result = this.parseEquality();
      while (this.optionalOperator('&&')) {
        result = new ast_1.Binary('&&', result, this.parseEquality());
      }
      return result;
    };
    _ParseAST.prototype.parseEquality = function() {
      var result = this.parseRelational();
      while (true) {
        if (this.optionalOperator('==')) {
          result = new ast_1.Binary('==', result, this.parseRelational());
        } else if (this.optionalOperator('===')) {
          result = new ast_1.Binary('===', result, this.parseRelational());
        } else if (this.optionalOperator('!=')) {
          result = new ast_1.Binary('!=', result, this.parseRelational());
        } else if (this.optionalOperator('!==')) {
          result = new ast_1.Binary('!==', result, this.parseRelational());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parseRelational = function() {
      var result = this.parseAdditive();
      while (true) {
        if (this.optionalOperator('<')) {
          result = new ast_1.Binary('<', result, this.parseAdditive());
        } else if (this.optionalOperator('>')) {
          result = new ast_1.Binary('>', result, this.parseAdditive());
        } else if (this.optionalOperator('<=')) {
          result = new ast_1.Binary('<=', result, this.parseAdditive());
        } else if (this.optionalOperator('>=')) {
          result = new ast_1.Binary('>=', result, this.parseAdditive());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parseAdditive = function() {
      var result = this.parseMultiplicative();
      while (true) {
        if (this.optionalOperator('+')) {
          result = new ast_1.Binary('+', result, this.parseMultiplicative());
        } else if (this.optionalOperator('-')) {
          result = new ast_1.Binary('-', result, this.parseMultiplicative());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parseMultiplicative = function() {
      var result = this.parsePrefix();
      while (true) {
        if (this.optionalOperator('*')) {
          result = new ast_1.Binary('*', result, this.parsePrefix());
        } else if (this.optionalOperator('%')) {
          result = new ast_1.Binary('%', result, this.parsePrefix());
        } else if (this.optionalOperator('/')) {
          result = new ast_1.Binary('/', result, this.parsePrefix());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrefix = function() {
      if (this.optionalOperator('+')) {
        return this.parsePrefix();
      } else if (this.optionalOperator('-')) {
        return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
      } else if (this.optionalOperator('!')) {
        return new ast_1.PrefixNot(this.parsePrefix());
      } else {
        return this.parseCallChain();
      }
    };
    _ParseAST.prototype.parseCallChain = function() {
      var result = this.parsePrimary();
      while (true) {
        if (this.optionalCharacter(lexer_1.$PERIOD)) {
          result = this.parseAccessMemberOrMethodCall(result, false);
        } else if (this.optionalOperator('?.')) {
          result = this.parseAccessMemberOrMethodCall(result, true);
        } else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
          var key = this.parsePipe();
          this.expectCharacter(lexer_1.$RBRACKET);
          if (this.optionalOperator("=")) {
            var value = this.parseConditional();
            result = new ast_1.KeyedWrite(result, key, value);
          } else {
            result = new ast_1.KeyedRead(result, key);
          }
        } else if (this.optionalCharacter(lexer_1.$LPAREN)) {
          var args = this.parseCallArguments();
          this.expectCharacter(lexer_1.$RPAREN);
          result = new ast_1.FunctionCall(result, args);
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrimary = function() {
      if (this.optionalCharacter(lexer_1.$LPAREN)) {
        var result = this.parsePipe();
        this.expectCharacter(lexer_1.$RPAREN);
        return result;
      } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
        this.advance();
        return new ast_1.LiteralPrimitive(null);
      } else if (this.next.isKeywordTrue()) {
        this.advance();
        return new ast_1.LiteralPrimitive(true);
      } else if (this.next.isKeywordFalse()) {
        this.advance();
        return new ast_1.LiteralPrimitive(false);
      } else if (this.parseAction && this.next.isKeywordIf()) {
        this.advance();
        this.expectCharacter(lexer_1.$LPAREN);
        var condition = this.parseExpression();
        this.expectCharacter(lexer_1.$RPAREN);
        var ifExp = this.parseExpressionOrBlock();
        var elseExp;
        if (this.next.isKeywordElse()) {
          this.advance();
          elseExp = this.parseExpressionOrBlock();
        }
        return new ast_1.If(condition, ifExp, elseExp);
      } else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
        var elements = this.parseExpressionList(lexer_1.$RBRACKET);
        this.expectCharacter(lexer_1.$RBRACKET);
        return new ast_1.LiteralArray(elements);
      } else if (this.next.isCharacter(lexer_1.$LBRACE)) {
        return this.parseLiteralMap();
      } else if (this.next.isIdentifier()) {
        return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
      } else if (this.next.isNumber()) {
        var value = this.next.toNumber();
        this.advance();
        return new ast_1.LiteralPrimitive(value);
      } else if (this.next.isString()) {
        var literalValue = this.next.toString();
        this.advance();
        return new ast_1.LiteralPrimitive(literalValue);
      } else if (this.index >= this.tokens.length) {
        this.error("Unexpected end of expression: " + this.input);
      } else {
        this.error("Unexpected token " + this.next);
      }
      throw new lang_1.BaseException("Fell through all cases in parsePrimary");
    };
    _ParseAST.prototype.parseExpressionList = function(terminator) {
      var result = [];
      if (!this.next.isCharacter(terminator)) {
        do {
          result.push(this.parsePipe());
        } while (this.optionalCharacter(lexer_1.$COMMA));
      }
      return result;
    };
    _ParseAST.prototype.parseLiteralMap = function() {
      var keys = [];
      var values = [];
      this.expectCharacter(lexer_1.$LBRACE);
      if (!this.optionalCharacter(lexer_1.$RBRACE)) {
        do {
          var key = this.expectIdentifierOrKeywordOrString();
          keys.push(key);
          this.expectCharacter(lexer_1.$COLON);
          values.push(this.parsePipe());
        } while (this.optionalCharacter(lexer_1.$COMMA));
        this.expectCharacter(lexer_1.$RBRACE);
      }
      return new ast_1.LiteralMap(keys, values);
    };
    _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
      if (isSafe === void 0) {
        isSafe = false;
      }
      var id = this.expectIdentifierOrKeyword();
      if (this.optionalCharacter(lexer_1.$LPAREN)) {
        var args = this.parseCallArguments();
        this.expectCharacter(lexer_1.$RPAREN);
        var fn = this.reflector.method(id);
        return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) : new ast_1.MethodCall(receiver, id, fn, args);
      } else {
        var getter = this.reflector.getter(id);
        var setter = this.reflector.setter(id);
        if (isSafe) {
          if (this.optionalOperator("=")) {
            this.error("The '?.' operator cannot be used in the assignment");
          } else {
            return new ast_1.SafePropertyRead(receiver, id, getter);
          }
        } else {
          if (this.optionalOperator("=")) {
            if (!this.parseAction) {
              this.error("Bindings cannot contain assignments");
            }
            var value = this.parseConditional();
            return new ast_1.PropertyWrite(receiver, id, setter, value);
          } else {
            return new ast_1.PropertyRead(receiver, id, getter);
          }
        }
      }
      return null;
    };
    _ParseAST.prototype.parseCallArguments = function() {
      if (this.next.isCharacter(lexer_1.$RPAREN))
        return [];
      var positionals = [];
      do {
        positionals.push(this.parsePipe());
      } while (this.optionalCharacter(lexer_1.$COMMA));
      return positionals;
    };
    _ParseAST.prototype.parseExpressionOrBlock = function() {
      if (this.optionalCharacter(lexer_1.$LBRACE)) {
        var block = this.parseBlockContent();
        this.expectCharacter(lexer_1.$RBRACE);
        return block;
      }
      return this.parseExpression();
    };
    _ParseAST.prototype.parseBlockContent = function() {
      if (!this.parseAction) {
        this.error("Binding expression cannot contain chained expression");
      }
      var exprs = [];
      while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
        var expr = this.parseExpression();
        exprs.push(expr);
        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
          while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
        }
      }
      if (exprs.length == 0)
        return new ast_1.EmptyExpr();
      if (exprs.length == 1)
        return exprs[0];
      return new ast_1.Chain(exprs);
    };
    _ParseAST.prototype.expectTemplateBindingKey = function() {
      var result = '';
      var operatorFound = false;
      do {
        result += this.expectIdentifierOrKeywordOrString();
        operatorFound = this.optionalOperator('-');
        if (operatorFound) {
          result += '-';
        }
      } while (operatorFound);
      return result.toString();
    };
    _ParseAST.prototype.parseTemplateBindings = function() {
      var bindings = [];
      var prefix = null;
      while (this.index < this.tokens.length) {
        var keyIsVar = this.optionalKeywordVar();
        var key = this.expectTemplateBindingKey();
        if (!keyIsVar) {
          if (prefix == null) {
            prefix = key;
          } else {
            key = prefix + '-' + key;
          }
        }
        this.optionalCharacter(lexer_1.$COLON);
        var name = null;
        var expression = null;
        if (keyIsVar) {
          if (this.optionalOperator("=")) {
            name = this.expectTemplateBindingKey();
          } else {
            name = '\$implicit';
          }
        } else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
          var start = this.inputIndex;
          var ast = this.parsePipe();
          var source = this.input.substring(start, this.inputIndex);
          expression = new ast_1.ASTWithSource(ast, source, this.location);
        }
        bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
        if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
          this.optionalCharacter(lexer_1.$COMMA);
        }
      }
      return bindings;
    };
    _ParseAST.prototype.error = function(message, index) {
      if (index === void 0) {
        index = null;
      }
      if (lang_1.isBlank(index))
        index = this.index;
      var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
      throw new ParseException(message, this.input, location, this.location);
    };
    return _ParseAST;
  })();
  exports._ParseAST = _ParseAST;
  var SimpleExpressionChecker = (function() {
    function SimpleExpressionChecker() {
      this.simple = true;
    }
    SimpleExpressionChecker.check = function(ast) {
      var s = new SimpleExpressionChecker();
      ast.visit(s);
      return s.simple;
    };
    SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast) {};
    SimpleExpressionChecker.prototype.visitInterpolation = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast) {};
    SimpleExpressionChecker.prototype.visitPropertyRead = function(ast) {};
    SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitMethodCall = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitFunctionCall = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitLiteralArray = function(ast) {
      this.visitAll(ast.expressions);
    };
    SimpleExpressionChecker.prototype.visitLiteralMap = function(ast) {
      this.visitAll(ast.values);
    };
    SimpleExpressionChecker.prototype.visitBinary = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitPrefixNot = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitConditional = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitPipe = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitKeyedRead = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitAll = function(asts) {
      var res = collection_1.ListWrapper.createFixedSize(asts.length);
      for (var i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    };
    SimpleExpressionChecker.prototype.visitChain = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitIf = function(ast) {
      this.simple = false;
    };
    return SimpleExpressionChecker;
  })();
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/parser/locals.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var Locals = (function() {
    function Locals(parent, current) {
      this.parent = parent;
      this.current = current;
    }
    Locals.prototype.contains = function(name) {
      if (this.current.has(name)) {
        return true;
      }
      if (lang_1.isPresent(this.parent)) {
        return this.parent.contains(name);
      }
      return false;
    };
    Locals.prototype.get = function(name) {
      if (this.current.has(name)) {
        return this.current.get(name);
      }
      if (lang_1.isPresent(this.parent)) {
        return this.parent.get(name);
      }
      throw new lang_1.BaseException("Cannot find '" + name + "'");
    };
    Locals.prototype.set = function(name, value) {
      if (this.current.has(name)) {
        this.current.set(name, value);
      } else {
        throw new lang_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
      }
    };
    Locals.prototype.clearValues = function() {
      collection_1.MapWrapper.clearValues(this.current);
    };
    return Locals;
  })();
  exports.Locals = Locals;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/exceptions.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ExpressionChangedAfterItHasBeenCheckedException = (function(_super) {
    __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
    function ExpressionChangedAfterItHasBeenCheckedException(proto, change, context) {
      _super.call(this, ("Expression '" + proto.expressionAsString + "' has changed after it was checked. ") + ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'"));
    }
    return ExpressionChangedAfterItHasBeenCheckedException;
  })(lang_1.BaseException);
  exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
  var ChangeDetectionError = (function(_super) {
    __extends(ChangeDetectionError, _super);
    function ChangeDetectionError(proto, originalException, originalStack, context) {
      _super.call(this, originalException + " in [" + proto.expressionAsString + "]", originalException, originalStack, context);
      this.location = proto.expressionAsString;
    }
    return ChangeDetectionError;
  })(lang_1.BaseException);
  exports.ChangeDetectionError = ChangeDetectionError;
  var DehydratedException = (function(_super) {
    __extends(DehydratedException, _super);
    function DehydratedException() {
      _super.call(this, 'Attempt to detect changes on a dehydrated detector.');
    }
    return DehydratedException;
  })(lang_1.BaseException);
  exports.DehydratedException = DehydratedException;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.CHECK_ONCE = "CHECK_ONCE";
  exports.CHECKED = "CHECKED";
  exports.CHECK_ALWAYS = "ALWAYS_CHECK";
  exports.DETACHED = "DETACHED";
  exports.ON_PUSH = "ON_PUSH";
  exports.DEFAULT = "DEFAULT";
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return lang_1.isBlank(changeDetectionStrategy) || lang_1.StringWrapper.equals(changeDetectionStrategy, exports.DEFAULT);
  }
  exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/binding_record.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var DIRECTIVE = "directive";
  var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
  var ELEMENT_PROPERTY = "elementProperty";
  var ELEMENT_ATTRIBUTE = "elementAttribute";
  var ELEMENT_CLASS = "elementClass";
  var ELEMENT_STYLE = "elementStyle";
  var TEXT_NODE = "textNode";
  var EVENT = "event";
  var HOST_EVENT = "hostEvent";
  var BindingRecord = (function() {
    function BindingRecord(mode, implicitReceiver, ast, elementIndex, propertyName, propertyUnit, eventName, setter, lifecycleEvent, directiveRecord) {
      this.mode = mode;
      this.implicitReceiver = implicitReceiver;
      this.ast = ast;
      this.elementIndex = elementIndex;
      this.propertyName = propertyName;
      this.propertyUnit = propertyUnit;
      this.eventName = eventName;
      this.setter = setter;
      this.lifecycleEvent = lifecycleEvent;
      this.directiveRecord = directiveRecord;
    }
    BindingRecord.prototype.callOnChange = function() {
      return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChange;
    };
    BindingRecord.prototype.isDefaultChangeDetection = function() {
      return lang_1.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
    };
    BindingRecord.prototype.isDirective = function() {
      return this.mode === DIRECTIVE;
    };
    BindingRecord.prototype.isDirectiveLifecycle = function() {
      return this.mode === DIRECTIVE_LIFECYCLE;
    };
    BindingRecord.prototype.isElementProperty = function() {
      return this.mode === ELEMENT_PROPERTY;
    };
    BindingRecord.prototype.isElementAttribute = function() {
      return this.mode === ELEMENT_ATTRIBUTE;
    };
    BindingRecord.prototype.isElementClass = function() {
      return this.mode === ELEMENT_CLASS;
    };
    BindingRecord.prototype.isElementStyle = function() {
      return this.mode === ELEMENT_STYLE;
    };
    BindingRecord.prototype.isTextNode = function() {
      return this.mode === TEXT_NODE;
    };
    BindingRecord.createForDirective = function(ast, propertyName, setter, directiveRecord) {
      return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, null, null, setter, null, directiveRecord);
    };
    BindingRecord.createDirectiveOnCheck = function(directiveRecord) {
      return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, null, "onCheck", directiveRecord);
    };
    BindingRecord.createDirectiveOnInit = function(directiveRecord) {
      return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, null, "onInit", directiveRecord);
    };
    BindingRecord.createDirectiveOnChange = function(directiveRecord) {
      return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, null, "onChange", directiveRecord);
    };
    BindingRecord.createForElementProperty = function(ast, elementIndex, propertyName) {
      return new BindingRecord(ELEMENT_PROPERTY, 0, ast, elementIndex, propertyName, null, null, null, null, null);
    };
    BindingRecord.createForElementAttribute = function(ast, elementIndex, attributeName) {
      return new BindingRecord(ELEMENT_ATTRIBUTE, 0, ast, elementIndex, attributeName, null, null, null, null, null);
    };
    BindingRecord.createForElementClass = function(ast, elementIndex, className) {
      return new BindingRecord(ELEMENT_CLASS, 0, ast, elementIndex, className, null, null, null, null, null);
    };
    BindingRecord.createForElementStyle = function(ast, elementIndex, styleName, unit) {
      return new BindingRecord(ELEMENT_STYLE, 0, ast, elementIndex, styleName, unit, null, null, null, null);
    };
    BindingRecord.createForHostProperty = function(directiveIndex, ast, propertyName) {
      return new BindingRecord(ELEMENT_PROPERTY, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null, null, null, null);
    };
    BindingRecord.createForHostAttribute = function(directiveIndex, ast, attributeName) {
      return new BindingRecord(ELEMENT_ATTRIBUTE, directiveIndex, ast, directiveIndex.elementIndex, attributeName, null, null, null, null, null);
    };
    BindingRecord.createForHostClass = function(directiveIndex, ast, className) {
      return new BindingRecord(ELEMENT_CLASS, directiveIndex, ast, directiveIndex.elementIndex, className, null, null, null, null, null);
    };
    BindingRecord.createForHostStyle = function(directiveIndex, ast, styleName, unit) {
      return new BindingRecord(ELEMENT_STYLE, directiveIndex, ast, directiveIndex.elementIndex, styleName, unit, null, null, null, null);
    };
    BindingRecord.createForTextNode = function(ast, elementIndex) {
      return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null, null, null, null);
    };
    BindingRecord.createForEvent = function(ast, eventName, elementIndex) {
      return new BindingRecord(EVENT, 0, ast, elementIndex, null, null, eventName, null, null, null);
    };
    BindingRecord.createForHostEvent = function(ast, eventName, directiveRecord) {
      var directiveIndex = directiveRecord.directiveIndex;
      return new BindingRecord(EVENT, directiveIndex, ast, directiveIndex.elementIndex, null, null, eventName, null, null, directiveRecord);
    };
    return BindingRecord;
  })();
  exports.BindingRecord = BindingRecord;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/directive_record.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var constants_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js");
  var DirectiveIndex = (function() {
    function DirectiveIndex(elementIndex, directiveIndex) {
      this.elementIndex = elementIndex;
      this.directiveIndex = directiveIndex;
    }
    Object.defineProperty(DirectiveIndex.prototype, "name", {
      get: function() {
        return this.elementIndex + "_" + this.directiveIndex;
      },
      enumerable: true,
      configurable: true
    });
    return DirectiveIndex;
  })();
  exports.DirectiveIndex = DirectiveIndex;
  var DirectiveRecord = (function() {
    function DirectiveRecord(_a) {
      var _b = _a === void 0 ? {} : _a,
          directiveIndex = _b.directiveIndex,
          callOnAllChangesDone = _b.callOnAllChangesDone,
          callOnChange = _b.callOnChange,
          callOnCheck = _b.callOnCheck,
          callOnInit = _b.callOnInit,
          changeDetection = _b.changeDetection;
      this.directiveIndex = directiveIndex;
      this.callOnAllChangesDone = lang_1.normalizeBool(callOnAllChangesDone);
      this.callOnChange = lang_1.normalizeBool(callOnChange);
      this.callOnCheck = lang_1.normalizeBool(callOnCheck);
      this.callOnInit = lang_1.normalizeBool(callOnInit);
      this.changeDetection = changeDetection;
    }
    DirectiveRecord.prototype.isDefaultChangeDetection = function() {
      return constants_1.isDefaultChangeDetectionStrategy(this.changeDetection);
    };
    return DirectiveRecord;
  })();
  exports.DirectiveRecord = DirectiveRecord;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/dynamic_change_detector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/abstract_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var abstract_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/abstract_change_detector.js");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js");
  var DynamicChangeDetector = (function(_super) {
    __extends(DynamicChangeDetector, _super);
    function DynamicChangeDetector(id, changeDetectionStrategy, dispatcher, protos, eventBindings, directiveRecords) {
      _super.call(this, id, dispatcher, protos, directiveRecords, change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(changeDetectionStrategy));
      this.eventBindings = eventBindings;
      this.directives = null;
      var len = protos.length + 1;
      this.values = collection_1.ListWrapper.createFixedSize(len);
      this.localPipes = collection_1.ListWrapper.createFixedSize(len);
      this.prevContexts = collection_1.ListWrapper.createFixedSize(len);
      this.changes = collection_1.ListWrapper.createFixedSize(len);
      this.dehydrateDirectives(false);
    }
    DynamicChangeDetector.prototype.handleEventInternal = function(eventName, elIndex, locals) {
      var _this = this;
      var preventDefault = false;
      this._matchingEventBindings(eventName, elIndex).forEach(function(rec) {
        var res = _this._processEventBinding(rec, locals);
        if (res === false) {
          preventDefault = true;
        }
      });
      return preventDefault;
    };
    DynamicChangeDetector.prototype._processEventBinding = function(eb, locals) {
      var values = collection_1.ListWrapper.createFixedSize(eb.records.length);
      values[0] = this.values[0];
      for (var i = 0; i < eb.records.length; ++i) {
        var proto = eb.records[i];
        var res = this._calculateCurrValue(proto, values, locals);
        if (proto.lastInBinding) {
          this._markPathAsCheckOnce(proto);
          return res;
        } else {
          this._writeSelf(proto, res, values);
        }
      }
      throw new lang_1.BaseException("Cannot be reached");
    };
    DynamicChangeDetector.prototype._markPathAsCheckOnce = function(proto) {
      if (!proto.bindingRecord.isDefaultChangeDetection()) {
        var dir = proto.bindingRecord.directiveRecord;
        this._getDetectorFor(dir.directiveIndex).markPathToRootAsCheckOnce();
      }
    };
    DynamicChangeDetector.prototype._matchingEventBindings = function(eventName, elIndex) {
      return collection_1.ListWrapper.filter(this.eventBindings, function(eb) {
        return eb.eventName == eventName && eb.elIndex === elIndex;
      });
    };
    DynamicChangeDetector.prototype.hydrateDirectives = function(directives) {
      this.values[0] = this.context;
      this.directives = directives;
    };
    DynamicChangeDetector.prototype.dehydrateDirectives = function(destroyPipes) {
      if (destroyPipes) {
        this._destroyPipes();
      }
      this.values[0] = null;
      this.directives = null;
      collection_1.ListWrapper.fill(this.values, change_detection_util_1.ChangeDetectionUtil.uninitialized, 1);
      collection_1.ListWrapper.fill(this.changes, false);
      collection_1.ListWrapper.fill(this.localPipes, null);
      collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.ChangeDetectionUtil.uninitialized);
    };
    DynamicChangeDetector.prototype._destroyPipes = function() {
      for (var i = 0; i < this.localPipes.length; ++i) {
        if (lang_1.isPresent(this.localPipes[i])) {
          change_detection_util_1.ChangeDetectionUtil.callPipeOnDestroy(this.localPipes[i]);
        }
      }
    };
    DynamicChangeDetector.prototype.checkNoChanges = function() {
      this.runDetectChanges(true);
    };
    DynamicChangeDetector.prototype.detectChangesInRecordsInternal = function(throwOnChange) {
      var protos = this.protos;
      var changes = null;
      var isChanged = false;
      for (var i = 0; i < protos.length; ++i) {
        var proto = protos[i];
        var bindingRecord = proto.bindingRecord;
        var directiveRecord = bindingRecord.directiveRecord;
        if (this._firstInBinding(proto)) {
          this.firstProtoInCurrentBinding = proto.selfIndex;
        }
        if (proto.isLifeCycleRecord()) {
          if (proto.name === "onCheck" && !throwOnChange) {
            this._getDirectiveFor(directiveRecord.directiveIndex).onCheck();
          } else if (proto.name === "onInit" && !throwOnChange && !this.alreadyChecked) {
            this._getDirectiveFor(directiveRecord.directiveIndex).onInit();
          } else if (proto.name === "onChange" && lang_1.isPresent(changes) && !throwOnChange) {
            this._getDirectiveFor(directiveRecord.directiveIndex).onChange(changes);
          }
        } else {
          var change = this._check(proto, throwOnChange, this.values, this.locals);
          if (lang_1.isPresent(change)) {
            this._updateDirectiveOrElement(change, bindingRecord);
            isChanged = true;
            changes = this._addChange(bindingRecord, change, changes);
          }
        }
        if (proto.lastInDirective) {
          changes = null;
          if (isChanged && !bindingRecord.isDefaultChangeDetection()) {
            this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
          }
          isChanged = false;
        }
      }
      this.alreadyChecked = true;
    };
    DynamicChangeDetector.prototype._firstInBinding = function(r) {
      var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.protos, r.selfIndex - 1);
      return lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
    };
    DynamicChangeDetector.prototype.callOnAllChangesDone = function() {
      _super.prototype.callOnAllChangesDone.call(this);
      var dirs = this.directiveRecords;
      for (var i = dirs.length - 1; i >= 0; --i) {
        var dir = dirs[i];
        if (dir.callOnAllChangesDone) {
          this._getDirectiveFor(dir.directiveIndex).onAllChangesDone();
        }
      }
    };
    DynamicChangeDetector.prototype._updateDirectiveOrElement = function(change, bindingRecord) {
      if (lang_1.isBlank(bindingRecord.directiveRecord)) {
        this.dispatcher.notifyOnBinding(bindingRecord, change.currentValue);
      } else {
        var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
        bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
      }
    };
    DynamicChangeDetector.prototype._addChange = function(bindingRecord, change, changes) {
      if (bindingRecord.callOnChange()) {
        return _super.prototype.addChange.call(this, changes, change.previousValue, change.currentValue);
      } else {
        return changes;
      }
    };
    DynamicChangeDetector.prototype._getDirectiveFor = function(directiveIndex) {
      return this.directives.getDirectiveFor(directiveIndex);
    };
    DynamicChangeDetector.prototype._getDetectorFor = function(directiveIndex) {
      return this.directives.getDetectorFor(directiveIndex);
    };
    DynamicChangeDetector.prototype._check = function(proto, throwOnChange, values, locals) {
      if (proto.isPipeRecord()) {
        return this._pipeCheck(proto, throwOnChange, values);
      } else {
        return this._referenceCheck(proto, throwOnChange, values, locals);
      }
    };
    DynamicChangeDetector.prototype._referenceCheck = function(proto, throwOnChange, values, locals) {
      if (this._pureFuncAndArgsDidNotChange(proto)) {
        this._setChanged(proto, false);
        return null;
      }
      var currValue = this.observe(this._calculateCurrValue(proto, values, locals), proto.selfIndex);
      if (proto.shouldBeChecked()) {
        var prevValue = this._readSelf(proto, values);
        if (!isSame(prevValue, currValue)) {
          if (proto.lastInBinding) {
            var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
            if (throwOnChange)
              this.throwOnChangeError(prevValue, currValue);
            this._writeSelf(proto, currValue, values);
            this._setChanged(proto, true);
            return change;
          } else {
            this._writeSelf(proto, currValue, values);
            this._setChanged(proto, true);
            return null;
          }
        } else {
          this._setChanged(proto, false);
          return null;
        }
      } else {
        this._writeSelf(proto, currValue, values);
        this._setChanged(proto, true);
        return null;
      }
    };
    DynamicChangeDetector.prototype._calculateCurrValue = function(proto, values, locals) {
      switch (proto.mode) {
        case proto_record_1.RecordType.SELF:
          return this._readContext(proto, values);
        case proto_record_1.RecordType.CONST:
          return proto.funcOrValue;
        case proto_record_1.RecordType.PROPERTY_READ:
          var context = this._readContext(proto, values);
          return proto.funcOrValue(context);
        case proto_record_1.RecordType.SAFE_PROPERTY:
          var context = this._readContext(proto, values);
          return lang_1.isBlank(context) ? null : proto.funcOrValue(context);
        case proto_record_1.RecordType.PROPERTY_WRITE:
          var context = this._readContext(proto, values);
          var value = this._readArgs(proto, values)[0];
          proto.funcOrValue(context, value);
          return value;
        case proto_record_1.RecordType.KEYED_WRITE:
          var context = this._readContext(proto, values);
          var key = this._readArgs(proto, values)[0];
          var value = this._readArgs(proto, values)[1];
          context[key] = value;
          return value;
        case proto_record_1.RecordType.LOCAL:
          return locals.get(proto.name);
        case proto_record_1.RecordType.INVOKE_METHOD:
          var context = this._readContext(proto, values);
          var args = this._readArgs(proto, values);
          return proto.funcOrValue(context, args);
        case proto_record_1.RecordType.SAFE_INVOKE_METHOD:
          var context = this._readContext(proto, values);
          if (lang_1.isBlank(context)) {
            return null;
          }
          var args = this._readArgs(proto, values);
          return proto.funcOrValue(context, args);
        case proto_record_1.RecordType.KEYED_READ:
          var arg = this._readArgs(proto, values)[0];
          return this._readContext(proto, values)[arg];
        case proto_record_1.RecordType.CHAIN:
          var args = this._readArgs(proto, values);
          return args[args.length - 1];
        case proto_record_1.RecordType.INVOKE_CLOSURE:
          return lang_1.FunctionWrapper.apply(this._readContext(proto, values), this._readArgs(proto, values));
        case proto_record_1.RecordType.INTERPOLATE:
        case proto_record_1.RecordType.PRIMITIVE_OP:
        case proto_record_1.RecordType.COLLECTION_LITERAL:
          return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto, values));
        default:
          throw new lang_1.BaseException("Unknown operation " + proto.mode);
      }
    };
    DynamicChangeDetector.prototype._pipeCheck = function(proto, throwOnChange, values) {
      var context = this._readContext(proto, values);
      var args = this._readArgs(proto, values);
      var pipe = this._pipeFor(proto, context);
      var currValue = pipe.transform(context, args);
      if (proto.shouldBeChecked()) {
        var prevValue = this._readSelf(proto, values);
        if (!isSame(prevValue, currValue)) {
          currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
          if (proto.lastInBinding) {
            var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
            if (throwOnChange)
              this.throwOnChangeError(prevValue, currValue);
            this._writeSelf(proto, currValue, values);
            this._setChanged(proto, true);
            return change;
          } else {
            this._writeSelf(proto, currValue, values);
            this._setChanged(proto, true);
            return null;
          }
        } else {
          this._setChanged(proto, false);
          return null;
        }
      } else {
        this._writeSelf(proto, currValue, values);
        this._setChanged(proto, true);
        return null;
      }
    };
    DynamicChangeDetector.prototype._pipeFor = function(proto, context) {
      var storedPipe = this._readPipe(proto);
      if (lang_1.isPresent(storedPipe))
        return storedPipe;
      var pipe = this.pipes.get(proto.name);
      this._writePipe(proto, pipe);
      return pipe;
    };
    DynamicChangeDetector.prototype._readContext = function(proto, values) {
      if (proto.contextIndex == -1) {
        return this._getDirectiveFor(proto.directiveIndex);
      } else {
        return values[proto.contextIndex];
      }
      return values[proto.contextIndex];
    };
    DynamicChangeDetector.prototype._readSelf = function(proto, values) {
      return values[proto.selfIndex];
    };
    DynamicChangeDetector.prototype._writeSelf = function(proto, value, values) {
      values[proto.selfIndex] = value;
    };
    DynamicChangeDetector.prototype._readPipe = function(proto) {
      return this.localPipes[proto.selfIndex];
    };
    DynamicChangeDetector.prototype._writePipe = function(proto, value) {
      this.localPipes[proto.selfIndex] = value;
    };
    DynamicChangeDetector.prototype._setChanged = function(proto, value) {
      if (proto.argumentToPureFunction)
        this.changes[proto.selfIndex] = value;
    };
    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function(proto) {
      return proto.isPureFunction() && !this._argsChanged(proto);
    };
    DynamicChangeDetector.prototype._argsChanged = function(proto) {
      var args = proto.args;
      for (var i = 0; i < args.length; ++i) {
        if (this.changes[args[i]]) {
          return true;
        }
      }
      return false;
    };
    DynamicChangeDetector.prototype._readArgs = function(proto, values) {
      var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
      var args = proto.args;
      for (var i = 0; i < args.length; ++i) {
        res[i] = values[args[i]];
      }
      return res;
    };
    return DynamicChangeDetector;
  })(abstract_change_detector_1.AbstractChangeDetector);
  exports.DynamicChangeDetector = DynamicChangeDetector;
  function isSame(a, b) {
    if (a === b)
      return true;
    if (a instanceof String && b instanceof String && a == b)
      return true;
    if ((a !== a) && (b !== b))
      return true;
    return false;
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detector_ref.js", ["npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var constants_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js");
  var ChangeDetectorRef = (function() {
    function ChangeDetectorRef(_cd) {
      this._cd = _cd;
    }
    ChangeDetectorRef.prototype.requestCheck = function() {
      this._cd.markPathToRootAsCheckOnce();
    };
    ChangeDetectorRef.prototype.detach = function() {
      this._cd.mode = constants_1.DETACHED;
    };
    ChangeDetectorRef.prototype.reattach = function() {
      this._cd.mode = constants_1.CHECK_ALWAYS;
      this.requestCheck();
    };
    return ChangeDetectorRef;
  })();
  exports.ChangeDetectorRef = ChangeDetectorRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/pipe_lifecycle_reflector.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var constants_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js");
  var pipe_lifecycle_reflector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/pipe_lifecycle_reflector.js");
  var WrappedValue = (function() {
    function WrappedValue(wrapped) {
      this.wrapped = wrapped;
    }
    WrappedValue.wrap = function(value) {
      var w = _wrappedValues[_wrappedIndex++ % 5];
      w.wrapped = value;
      return w;
    };
    return WrappedValue;
  })();
  exports.WrappedValue = WrappedValue;
  var _wrappedValues = [new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null)];
  var _wrappedIndex = 0;
  var SimpleChange = (function() {
    function SimpleChange(previousValue, currentValue) {
      this.previousValue = previousValue;
      this.currentValue = currentValue;
    }
    SimpleChange.prototype.isFirstChange = function() {
      return this.previousValue === ChangeDetectionUtil.uninitialized;
    };
    return SimpleChange;
  })();
  exports.SimpleChange = SimpleChange;
  var _simpleChangesIndex = 0;
  var _simpleChanges = [new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null)];
  function _simpleChange(previousValue, currentValue) {
    var index = _simpleChangesIndex++ % 20;
    var s = _simpleChanges[index];
    s.previousValue = previousValue;
    s.currentValue = currentValue;
    return s;
  }
  var ChangeDetectionUtil = (function() {
    function ChangeDetectionUtil() {}
    ChangeDetectionUtil.arrayFn0 = function() {
      return [];
    };
    ChangeDetectionUtil.arrayFn1 = function(a1) {
      return [a1];
    };
    ChangeDetectionUtil.arrayFn2 = function(a1, a2) {
      return [a1, a2];
    };
    ChangeDetectionUtil.arrayFn3 = function(a1, a2, a3) {
      return [a1, a2, a3];
    };
    ChangeDetectionUtil.arrayFn4 = function(a1, a2, a3, a4) {
      return [a1, a2, a3, a4];
    };
    ChangeDetectionUtil.arrayFn5 = function(a1, a2, a3, a4, a5) {
      return [a1, a2, a3, a4, a5];
    };
    ChangeDetectionUtil.arrayFn6 = function(a1, a2, a3, a4, a5, a6) {
      return [a1, a2, a3, a4, a5, a6];
    };
    ChangeDetectionUtil.arrayFn7 = function(a1, a2, a3, a4, a5, a6, a7) {
      return [a1, a2, a3, a4, a5, a6, a7];
    };
    ChangeDetectionUtil.arrayFn8 = function(a1, a2, a3, a4, a5, a6, a7, a8) {
      return [a1, a2, a3, a4, a5, a6, a7, a8];
    };
    ChangeDetectionUtil.arrayFn9 = function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
    };
    ChangeDetectionUtil.operation_negate = function(value) {
      return !value;
    };
    ChangeDetectionUtil.operation_add = function(left, right) {
      return left + right;
    };
    ChangeDetectionUtil.operation_subtract = function(left, right) {
      return left - right;
    };
    ChangeDetectionUtil.operation_multiply = function(left, right) {
      return left * right;
    };
    ChangeDetectionUtil.operation_divide = function(left, right) {
      return left / right;
    };
    ChangeDetectionUtil.operation_remainder = function(left, right) {
      return left % right;
    };
    ChangeDetectionUtil.operation_equals = function(left, right) {
      return left == right;
    };
    ChangeDetectionUtil.operation_not_equals = function(left, right) {
      return left != right;
    };
    ChangeDetectionUtil.operation_identical = function(left, right) {
      return left === right;
    };
    ChangeDetectionUtil.operation_not_identical = function(left, right) {
      return left !== right;
    };
    ChangeDetectionUtil.operation_less_then = function(left, right) {
      return left < right;
    };
    ChangeDetectionUtil.operation_greater_then = function(left, right) {
      return left > right;
    };
    ChangeDetectionUtil.operation_less_or_equals_then = function(left, right) {
      return left <= right;
    };
    ChangeDetectionUtil.operation_greater_or_equals_then = function(left, right) {
      return left >= right;
    };
    ChangeDetectionUtil.operation_logical_and = function(left, right) {
      return left && right;
    };
    ChangeDetectionUtil.operation_logical_or = function(left, right) {
      return left || right;
    };
    ChangeDetectionUtil.cond = function(cond, trueVal, falseVal) {
      return cond ? trueVal : falseVal;
    };
    ChangeDetectionUtil.mapFn = function(keys) {
      function buildMap(values) {
        var res = collection_1.StringMapWrapper.create();
        for (var i = 0; i < keys.length; ++i) {
          collection_1.StringMapWrapper.set(res, keys[i], values[i]);
        }
        return res;
      }
      switch (keys.length) {
        case 0:
          return function() {
            return [];
          };
        case 1:
          return function(a1) {
            return buildMap([a1]);
          };
        case 2:
          return function(a1, a2) {
            return buildMap([a1, a2]);
          };
        case 3:
          return function(a1, a2, a3) {
            return buildMap([a1, a2, a3]);
          };
        case 4:
          return function(a1, a2, a3, a4) {
            return buildMap([a1, a2, a3, a4]);
          };
        case 5:
          return function(a1, a2, a3, a4, a5) {
            return buildMap([a1, a2, a3, a4, a5]);
          };
        case 6:
          return function(a1, a2, a3, a4, a5, a6) {
            return buildMap([a1, a2, a3, a4, a5, a6]);
          };
        case 7:
          return function(a1, a2, a3, a4, a5, a6, a7) {
            return buildMap([a1, a2, a3, a4, a5, a6, a7]);
          };
        case 8:
          return function(a1, a2, a3, a4, a5, a6, a7, a8) {
            return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]);
          };
        case 9:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
          };
        default:
          throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
      }
    };
    ChangeDetectionUtil.keyedAccess = function(obj, args) {
      return obj[args[0]];
    };
    ChangeDetectionUtil.unwrapValue = function(value) {
      if (value instanceof WrappedValue) {
        return value.wrapped;
      } else {
        return value;
      }
    };
    ChangeDetectionUtil.changeDetectionMode = function(strategy) {
      return constants_1.isDefaultChangeDetectionStrategy(strategy) ? constants_1.CHECK_ALWAYS : constants_1.CHECK_ONCE;
    };
    ChangeDetectionUtil.simpleChange = function(previousValue, currentValue) {
      return _simpleChange(previousValue, currentValue);
    };
    ChangeDetectionUtil.isValueBlank = function(value) {
      return lang_1.isBlank(value);
    };
    ChangeDetectionUtil.s = function(value) {
      return lang_1.isPresent(value) ? "" + value : '';
    };
    ChangeDetectionUtil.protoByIndex = function(protos, selfIndex) {
      return selfIndex < 1 ? null : protos[selfIndex - 1];
    };
    ChangeDetectionUtil.callPipeOnDestroy = function(pipe) {
      if (pipe_lifecycle_reflector_1.implementsOnDestroy(pipe)) {
        pipe.onDestroy();
      }
    };
    ChangeDetectionUtil.uninitialized = lang_1.CONST_EXPR(new Object());
    return ChangeDetectionUtil;
  })();
  exports.ChangeDetectionUtil = ChangeDetectionUtil;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/di/metadata.js", "npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/di/metadata.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var AttributeMetadata = (function(_super) {
    __extends(AttributeMetadata, _super);
    function AttributeMetadata(attributeName) {
      _super.call(this);
      this.attributeName = attributeName;
    }
    Object.defineProperty(AttributeMetadata.prototype, "token", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    AttributeMetadata.prototype.toString = function() {
      return "@Attribute(" + lang_1.stringify(this.attributeName) + ")";
    };
    AttributeMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [String])], AttributeMetadata);
    return AttributeMetadata;
  })(metadata_1.DependencyMetadata);
  exports.AttributeMetadata = AttributeMetadata;
  var QueryMetadata = (function(_super) {
    __extends(QueryMetadata, _super);
    function QueryMetadata(_selector, _a) {
      var _b = (_a === void 0 ? {} : _a).descendants,
          descendants = _b === void 0 ? false : _b;
      _super.call(this);
      this._selector = _selector;
      this.descendants = descendants;
    }
    Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
      get: function() {
        return false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "selector", {
      get: function() {
        return di_1.resolveForwardRef(this._selector);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
      get: function() {
        return lang_1.isString(this.selector);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "varBindings", {
      get: function() {
        return lang_1.StringWrapper.split(this.selector, new RegExp(","));
      },
      enumerable: true,
      configurable: true
    });
    QueryMetadata.prototype.toString = function() {
      return "@Query(" + lang_1.stringify(this.selector) + ")";
    };
    QueryMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object, Object])], QueryMetadata);
    return QueryMetadata;
  })(metadata_1.DependencyMetadata);
  exports.QueryMetadata = QueryMetadata;
  var ViewQueryMetadata = (function(_super) {
    __extends(ViewQueryMetadata, _super);
    function ViewQueryMetadata(_selector, _a) {
      var _b = (_a === void 0 ? {} : _a).descendants,
          descendants = _b === void 0 ? false : _b;
      _super.call(this, _selector, {descendants: descendants});
    }
    Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
      get: function() {
        return true;
      },
      enumerable: true,
      configurable: true
    });
    ViewQueryMetadata.prototype.toString = function() {
      return "@ViewQuery(" + lang_1.stringify(this.selector) + ")";
    };
    ViewQueryMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object, Object])], ViewQueryMetadata);
    return ViewQueryMetadata;
  })(QueryMetadata);
  exports.ViewQueryMetadata = ViewQueryMetadata;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/di/metadata.js", "npm:angular2@2.0.0-alpha.35/change_detection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/di/metadata.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/change_detection.js");
  var DirectiveMetadata = (function(_super) {
    __extends(DirectiveMetadata, _super);
    function DirectiveMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          selector = _b.selector,
          properties = _b.properties,
          events = _b.events,
          host = _b.host,
          lifecycle = _b.lifecycle,
          bindings = _b.bindings,
          exportAs = _b.exportAs,
          _c = _b.compileChildren,
          compileChildren = _c === void 0 ? true : _c;
      _super.call(this);
      this.selector = selector;
      this.properties = properties;
      this.events = events;
      this.host = host;
      this.exportAs = exportAs;
      this.lifecycle = lifecycle;
      this.compileChildren = compileChildren;
      this.bindings = bindings;
    }
    DirectiveMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], DirectiveMetadata);
    return DirectiveMetadata;
  })(metadata_1.InjectableMetadata);
  exports.DirectiveMetadata = DirectiveMetadata;
  var ComponentMetadata = (function(_super) {
    __extends(ComponentMetadata, _super);
    function ComponentMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          selector = _b.selector,
          properties = _b.properties,
          events = _b.events,
          host = _b.host,
          exportAs = _b.exportAs,
          lifecycle = _b.lifecycle,
          bindings = _b.bindings,
          viewBindings = _b.viewBindings,
          _c = _b.changeDetection,
          changeDetection = _c === void 0 ? change_detection_1.DEFAULT : _c,
          _d = _b.compileChildren,
          compileChildren = _d === void 0 ? true : _d;
      _super.call(this, {
        selector: selector,
        properties: properties,
        events: events,
        host: host,
        exportAs: exportAs,
        bindings: bindings,
        lifecycle: lifecycle,
        compileChildren: compileChildren
      });
      this.changeDetection = changeDetection;
      this.viewBindings = viewBindings;
    }
    ComponentMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], ComponentMetadata);
    return ComponentMetadata;
  })(DirectiveMetadata);
  exports.ComponentMetadata = ComponentMetadata;
  (function(LifecycleEvent) {
    LifecycleEvent[LifecycleEvent["onDestroy"] = 0] = "onDestroy";
    LifecycleEvent[LifecycleEvent["onChange"] = 1] = "onChange";
    LifecycleEvent[LifecycleEvent["onCheck"] = 2] = "onCheck";
    LifecycleEvent[LifecycleEvent["onInit"] = 3] = "onInit";
    LifecycleEvent[LifecycleEvent["onAllChangesDone"] = 4] = "onAllChangesDone";
  })(exports.LifecycleEvent || (exports.LifecycleEvent = {}));
  var LifecycleEvent = exports.LifecycleEvent;
  var PipeMetadata = (function(_super) {
    __extends(PipeMetadata, _super);
    function PipeMetadata(_a) {
      var name = _a.name;
      _super.call(this);
      this.name = name;
    }
    PipeMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], PipeMetadata);
    return PipeMetadata;
  })(metadata_1.InjectableMetadata);
  exports.PipeMetadata = PipeMetadata;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  exports.ViewEncapsulation = api_1.ViewEncapsulation;
  var ViewMetadata = (function() {
    function ViewMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          directives = _b.directives,
          pipes = _b.pipes,
          encapsulation = _b.encapsulation,
          styles = _b.styles,
          styleUrls = _b.styleUrls;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.directives = directives;
      this.pipes = pipes;
      this.encapsulation = encapsulation;
    }
    ViewMetadata = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], ViewMetadata);
    return ViewMetadata;
  })();
  exports.ViewMetadata = ViewMetadata;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("github:jspm/nodelibs-process@0.1.1.js", ["github:jspm/nodelibs-process@0.1.1/index.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("github:jspm/nodelibs-process@0.1.1/index.js");
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/dom/browser_adapter.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/dom/generic_browser_adapter.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var generic_browser_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/generic_browser_adapter.js");
  var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DOM_KEY_LOCATION_NUMPAD = 3;
  var _keyMap = {
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
  };
  var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
  };
  var BrowserDomAdapter = (function(_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    BrowserDomAdapter.makeCurrent = function() {
      dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter());
    };
    BrowserDomAdapter.prototype.hasProperty = function(element, name) {
      return name in element;
    };
    BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
      el[name] = value;
    };
    BrowserDomAdapter.prototype.getProperty = function(el, name) {
      return el[name];
    };
    BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
      el[methodName].apply(el, args);
    };
    BrowserDomAdapter.prototype.logError = function(error) {
      window.console.error(error);
    };
    BrowserDomAdapter.prototype.log = function(error) {
      window.console.log(error);
    };
    BrowserDomAdapter.prototype.logGroup = function(error) {
      if (window.console.group) {
        window.console.group(error);
      } else {
        window.console.log(error);
      }
    };
    BrowserDomAdapter.prototype.logGroupEnd = function() {
      if (window.console.groupEnd) {
        window.console.groupEnd();
      }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return _attrToPropMap;
      },
      enumerable: true,
      configurable: true
    });
    BrowserDomAdapter.prototype.query = function(selector) {
      return document.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelector = function(el, selector) {
      return el.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
      return el.querySelectorAll(selector);
    };
    BrowserDomAdapter.prototype.on = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
    };
    BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
      return function() {
        el.removeEventListener(evt, listener, false);
      };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
      el.dispatchEvent(evt);
    };
    BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
      var evt = document.createEvent('MouseEvent');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function(eventType) {
      var evt = document.createEvent('Event');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function(evt) {
      evt.preventDefault();
      evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.isPrevented = function(evt) {
      return evt.defaultPrevented || lang_1.isPresent(evt.returnValue) && !evt.returnValue;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function(el) {
      return el.innerHTML;
    };
    BrowserDomAdapter.prototype.getOuterHTML = function(el) {
      return el.outerHTML;
    };
    BrowserDomAdapter.prototype.nodeName = function(node) {
      return node.nodeName;
    };
    BrowserDomAdapter.prototype.nodeValue = function(node) {
      return node.nodeValue;
    };
    BrowserDomAdapter.prototype.type = function(node) {
      return node.type;
    };
    BrowserDomAdapter.prototype.content = function(node) {
      if (this.hasProperty(node, "content")) {
        return node.content;
      } else {
        return node;
      }
    };
    BrowserDomAdapter.prototype.firstChild = function(el) {
      return el.firstChild;
    };
    BrowserDomAdapter.prototype.nextSibling = function(el) {
      return el.nextSibling;
    };
    BrowserDomAdapter.prototype.parentElement = function(el) {
      return el.parentNode;
    };
    BrowserDomAdapter.prototype.childNodes = function(el) {
      return el.childNodes;
    };
    BrowserDomAdapter.prototype.childNodesAsList = function(el) {
      var childNodes = el.childNodes;
      var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
      for (var i = 0; i < childNodes.length; i++) {
        res[i] = childNodes[i];
      }
      return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
    BrowserDomAdapter.prototype.appendChild = function(el, node) {
      el.appendChild(node);
    };
    BrowserDomAdapter.prototype.removeChild = function(el, node) {
      el.removeChild(node);
    };
    BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    };
    BrowserDomAdapter.prototype.remove = function(node) {
      node.parentNode.removeChild(node);
      return node;
    };
    BrowserDomAdapter.prototype.insertBefore = function(el, node) {
      el.parentNode.insertBefore(node, el);
    };
    BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
      collection_1.ListWrapper.forEach(nodes, function(n) {
        el.parentNode.insertBefore(n, el);
      });
    };
    BrowserDomAdapter.prototype.insertAfter = function(el, node) {
      el.parentNode.insertBefore(node, el.nextSibling);
    };
    BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
      el.innerHTML = value;
    };
    BrowserDomAdapter.prototype.getText = function(el) {
      return el.textContent;
    };
    BrowserDomAdapter.prototype.setText = function(el, value) {
      el.textContent = value;
    };
    BrowserDomAdapter.prototype.getValue = function(el) {
      return el.value;
    };
    BrowserDomAdapter.prototype.setValue = function(el, value) {
      el.value = value;
    };
    BrowserDomAdapter.prototype.getChecked = function(el) {
      return el.checked;
    };
    BrowserDomAdapter.prototype.setChecked = function(el, value) {
      el.checked = value;
    };
    BrowserDomAdapter.prototype.createComment = function(text) {
      return document.createComment(text);
    };
    BrowserDomAdapter.prototype.createTemplate = function(html) {
      var t = document.createElement('template');
      t.innerHTML = html;
      return t;
    };
    BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var el = doc.createElement('SCRIPT');
      el.setAttribute(attrName, attrValue);
      return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var style = doc.createElement('style');
      this.appendChild(style, this.createTextNode(css));
      return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function(el) {
      return el.createShadowRoot();
    };
    BrowserDomAdapter.prototype.getShadowRoot = function(el) {
      return el.shadowRoot;
    };
    BrowserDomAdapter.prototype.getHost = function(el) {
      return el.host;
    };
    BrowserDomAdapter.prototype.clone = function(node) {
      return node.cloneNode(true);
    };
    BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
      return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
      return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function(element) {
      return Array.prototype.slice.call(element.classList, 0);
    };
    BrowserDomAdapter.prototype.addClass = function(element, classname) {
      element.classList.add(classname);
    };
    BrowserDomAdapter.prototype.removeClass = function(element, classname) {
      element.classList.remove(classname);
    };
    BrowserDomAdapter.prototype.hasClass = function(element, classname) {
      return element.classList.contains(classname);
    };
    BrowserDomAdapter.prototype.setStyle = function(element, stylename, stylevalue) {
      element.style[stylename] = stylevalue;
    };
    BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
      element.style[stylename] = null;
    };
    BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
      return element.style[stylename];
    };
    BrowserDomAdapter.prototype.tagName = function(element) {
      return element.tagName;
    };
    BrowserDomAdapter.prototype.attributeMap = function(element) {
      var res = new Map();
      var elAttrs = element.attributes;
      for (var i = 0; i < elAttrs.length; i++) {
        var attrib = elAttrs[i];
        res.set(attrib.name, attrib.value);
      }
      return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
      return element.hasAttribute(attribute);
    };
    BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
      return element.getAttribute(attribute);
    };
    BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
      element.setAttribute(name, value);
    };
    BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
      element.removeAttribute(attribute);
    };
    BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    };
    BrowserDomAdapter.prototype.createHtmlDocument = function() {
      return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function() {
      return document;
    };
    BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          width: 0,
          height: 0
        };
      }
    };
    BrowserDomAdapter.prototype.getTitle = function() {
      return document.title;
    };
    BrowserDomAdapter.prototype.setTitle = function(newTitle) {
      document.title = newTitle || '';
    };
    BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
      return n instanceof HTMLElement && n.matches ? n.matches(selector) : n.msMatchesSelector(selector);
    };
    BrowserDomAdapter.prototype.isTemplateElement = function(el) {
      return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
    };
    BrowserDomAdapter.prototype.isTextNode = function(node) {
      return node.nodeType === Node.TEXT_NODE;
    };
    BrowserDomAdapter.prototype.isCommentNode = function(node) {
      return node.nodeType === Node.COMMENT_NODE;
    };
    BrowserDomAdapter.prototype.isElementNode = function(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    };
    BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
      return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot);
    };
    BrowserDomAdapter.prototype.isShadowRoot = function(node) {
      return node instanceof DocumentFragment;
    };
    BrowserDomAdapter.prototype.importIntoDoc = function(node) {
      var toImport = node;
      if (this.isTemplateElement(node)) {
        toImport = this.content(node);
      }
      return document.importNode(toImport, true);
    };
    BrowserDomAdapter.prototype.adoptNode = function(node) {
      return document.adoptNode(node);
    };
    BrowserDomAdapter.prototype.isPageRule = function(rule) {
      return rule.type === CSSRule.PAGE_RULE;
    };
    BrowserDomAdapter.prototype.isStyleRule = function(rule) {
      return rule.type === CSSRule.STYLE_RULE;
    };
    BrowserDomAdapter.prototype.isMediaRule = function(rule) {
      return rule.type === CSSRule.MEDIA_RULE;
    };
    BrowserDomAdapter.prototype.isKeyframesRule = function(rule) {
      return rule.type === CSSRule.KEYFRAMES_RULE;
    };
    BrowserDomAdapter.prototype.getHref = function(el) {
      return el.href;
    };
    BrowserDomAdapter.prototype.getEventKey = function(event) {
      var key = event.key;
      if (lang_1.isBlank(key)) {
        key = event.keyIdentifier;
        if (lang_1.isBlank(key)) {
          return 'Unidentified';
        }
        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));
          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            key = _chromeNumKeyPadMap[key];
          }
        }
      }
      if (_keyMap.hasOwnProperty(key)) {
        key = _keyMap[key];
      }
      return key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
      if (target == "window") {
        return window;
      } else if (target == "document") {
        return document;
      } else if (target == "body") {
        return document.body;
      }
    };
    BrowserDomAdapter.prototype.getHistory = function() {
      return window.history;
    };
    BrowserDomAdapter.prototype.getLocation = function() {
      return window.location;
    };
    BrowserDomAdapter.prototype.getBaseHref = function() {
      var href = getBaseElementHref();
      if (lang_1.isBlank(href)) {
        return null;
      }
      return relativePath(href);
    };
    BrowserDomAdapter.prototype.resetBaseElement = function() {
      baseElement = null;
    };
    BrowserDomAdapter.prototype.getUserAgent = function() {
      return window.navigator.userAgent;
    };
    BrowserDomAdapter.prototype.setData = function(element, name, value) {
      element.dataset[name] = value;
    };
    BrowserDomAdapter.prototype.getData = function(element, name) {
      return element.dataset[name];
    };
    BrowserDomAdapter.prototype.setGlobalVar = function(name, value) {
      lang_1.global[name] = value;
    };
    return BrowserDomAdapter;
  })(generic_browser_adapter_1.GenericBrowserDomAdapter);
  exports.BrowserDomAdapter = BrowserDomAdapter;
  var baseElement = null;
  function getBaseElementHref() {
    if (lang_1.isBlank(baseElement)) {
      baseElement = document.querySelector('base');
      if (lang_1.isBlank(baseElement)) {
        return null;
      }
    }
    return baseElement.getAttribute('href');
  }
  var urlParsingNode = null;
  function relativePath(url) {
    if (lang_1.isBlank(urlParsingNode)) {
      urlParsingNode = document.createElement("a");
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.DOM;
  function setRootDomAdapter(adapter) {
    if (lang_1.isBlank(exports.DOM)) {
      exports.DOM = adapter;
    }
  }
  exports.setRootDomAdapter = setRootDomAdapter;
  function _abstract() {
    return new lang_1.BaseException('This method is abstract');
  }
  var DomAdapter = (function() {
    function DomAdapter() {}
    DomAdapter.prototype.hasProperty = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.setProperty = function(el, name, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getProperty = function(el, name) {
      throw _abstract();
    };
    DomAdapter.prototype.invoke = function(el, methodName, args) {
      throw _abstract();
    };
    DomAdapter.prototype.logError = function(error) {
      throw _abstract();
    };
    DomAdapter.prototype.log = function(error) {
      throw _abstract();
    };
    DomAdapter.prototype.logGroup = function(error) {
      throw _abstract();
    };
    DomAdapter.prototype.logGroupEnd = function() {
      throw _abstract();
    };
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
      get: function() {
        throw _abstract();
      },
      enumerable: true,
      configurable: true
    });
    DomAdapter.prototype.parse = function(templateHtml) {
      throw _abstract();
    };
    DomAdapter.prototype.query = function(selector) {
      throw _abstract();
    };
    DomAdapter.prototype.querySelector = function(el, selector) {
      throw _abstract();
    };
    DomAdapter.prototype.querySelectorAll = function(el, selector) {
      throw _abstract();
    };
    DomAdapter.prototype.on = function(el, evt, listener) {
      throw _abstract();
    };
    DomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      throw _abstract();
    };
    DomAdapter.prototype.dispatchEvent = function(el, evt) {
      throw _abstract();
    };
    DomAdapter.prototype.createMouseEvent = function(eventType) {
      throw _abstract();
    };
    DomAdapter.prototype.createEvent = function(eventType) {
      throw _abstract();
    };
    DomAdapter.prototype.preventDefault = function(evt) {
      throw _abstract();
    };
    DomAdapter.prototype.isPrevented = function(evt) {
      throw _abstract();
    };
    DomAdapter.prototype.getInnerHTML = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getOuterHTML = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.nodeName = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.nodeValue = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.type = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.content = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.firstChild = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.nextSibling = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.parentElement = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.childNodes = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.childNodesAsList = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.clearNodes = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.appendChild = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.removeChild = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {
      throw _abstract();
    };
    DomAdapter.prototype.remove = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.insertBefore = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.insertAllBefore = function(el, nodes) {
      throw _abstract();
    };
    DomAdapter.prototype.insertAfter = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.setInnerHTML = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getText = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.setText = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getValue = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.setValue = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getChecked = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.setChecked = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.createComment = function(text) {
      throw _abstract();
    };
    DomAdapter.prototype.createTemplate = function(html) {
      throw _abstract();
    };
    DomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createShadowRoot = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getShadowRoot = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getHost = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getDistributedNodes = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.clone = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.getElementsByClassName = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.getElementsByTagName = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.classList = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.addClass = function(element, classname) {
      throw _abstract();
    };
    DomAdapter.prototype.removeClass = function(element, classname) {
      throw _abstract();
    };
    DomAdapter.prototype.hasClass = function(element, classname) {
      throw _abstract();
    };
    DomAdapter.prototype.setStyle = function(element, stylename, stylevalue) {
      throw _abstract();
    };
    DomAdapter.prototype.removeStyle = function(element, stylename) {
      throw _abstract();
    };
    DomAdapter.prototype.getStyle = function(element, stylename) {
      throw _abstract();
    };
    DomAdapter.prototype.tagName = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.attributeMap = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.hasAttribute = function(element, attribute) {
      throw _abstract();
    };
    DomAdapter.prototype.getAttribute = function(element, attribute) {
      throw _abstract();
    };
    DomAdapter.prototype.setAttribute = function(element, name, value) {
      throw _abstract();
    };
    DomAdapter.prototype.removeAttribute = function(element, attribute) {
      throw _abstract();
    };
    DomAdapter.prototype.templateAwareRoot = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.createHtmlDocument = function() {
      throw _abstract();
    };
    DomAdapter.prototype.defaultDoc = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getBoundingClientRect = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getTitle = function() {
      throw _abstract();
    };
    DomAdapter.prototype.setTitle = function(newTitle) {
      throw _abstract();
    };
    DomAdapter.prototype.elementMatches = function(n, selector) {
      throw _abstract();
    };
    DomAdapter.prototype.isTemplateElement = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.isTextNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isCommentNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isElementNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.hasShadowRoot = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isShadowRoot = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.importIntoDoc = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.adoptNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isPageRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.isStyleRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.isMediaRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.isKeyframesRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.getHref = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.getEventKey = function(event) {
      throw _abstract();
    };
    DomAdapter.prototype.resolveAndSetHref = function(element, baseUrl, href) {
      throw _abstract();
    };
    DomAdapter.prototype.cssToRules = function(css) {
      throw _abstract();
    };
    DomAdapter.prototype.supportsDOMEvents = function() {
      throw _abstract();
    };
    DomAdapter.prototype.supportsNativeShadowDOM = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getGlobalEventTarget = function(target) {
      throw _abstract();
    };
    DomAdapter.prototype.getHistory = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getLocation = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getBaseHref = function() {
      throw _abstract();
    };
    DomAdapter.prototype.resetBaseElement = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getUserAgent = function() {
      throw _abstract();
    };
    DomAdapter.prototype.setData = function(element, name, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getData = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.setGlobalVar = function(name, value) {
      throw _abstract();
    };
    return DomAdapter;
  })();
  exports.DomAdapter = DomAdapter;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js", ["npm:angular2@2.0.0-alpha.35/src/reflection/reflector.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflector.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection_capabilities.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var reflector_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflector.js");
  var reflector_2 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflector.js");
  exports.Reflector = reflector_2.Reflector;
  exports.ReflectionInfo = reflector_2.ReflectionInfo;
  var reflection_capabilities_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection_capabilities.js");
  exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/pipes.js", ["npm:angular2@2.0.0-alpha.35/src/pipes/uppercase_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/lowercase_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/async_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/json_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/date_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/number_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/limit_to_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/default_pipes.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var uppercase_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/uppercase_pipe.js");
  exports.UpperCasePipe = uppercase_pipe_1.UpperCasePipe;
  var lowercase_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/lowercase_pipe.js");
  exports.LowerCasePipe = lowercase_pipe_1.LowerCasePipe;
  var async_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/async_pipe.js");
  exports.AsyncPipe = async_pipe_1.AsyncPipe;
  var json_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/json_pipe.js");
  exports.JsonPipe = json_pipe_1.JsonPipe;
  var date_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/date_pipe.js");
  exports.DatePipe = date_pipe_1.DatePipe;
  var number_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/number_pipe.js");
  exports.DecimalPipe = number_pipe_1.DecimalPipe;
  exports.PercentPipe = number_pipe_1.PercentPipe;
  exports.CurrencyPipe = number_pipe_1.CurrencyPipe;
  var limit_to_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/limit_to_pipe.js");
  exports.LimitToPipe = limit_to_pipe_1.LimitToPipe;
  var default_pipes_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/default_pipes.js");
  exports.DEFAULT_PIPES_TOKEN = default_pipes_1.DEFAULT_PIPES_TOKEN;
  exports.DEFAULT_PIPES = default_pipes_1.DEFAULT_PIPES;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/exception_handler.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var _ArrayLogger = (function() {
    function _ArrayLogger() {
      this.res = [];
    }
    _ArrayLogger.prototype.log = function(s) {
      this.res.push(s);
    };
    _ArrayLogger.prototype.logGroup = function(s) {
      this.res.push(s);
    };
    _ArrayLogger.prototype.logGroupEnd = function() {};
    ;
    return _ArrayLogger;
  })();
  var ExceptionHandler = (function() {
    function ExceptionHandler(logger, rethrowException) {
      if (rethrowException === void 0) {
        rethrowException = true;
      }
      this.logger = logger;
      this.rethrowException = rethrowException;
    }
    ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
      if (stackTrace === void 0) {
        stackTrace = null;
      }
      if (reason === void 0) {
        reason = null;
      }
      var l = new _ArrayLogger();
      var e = new ExceptionHandler(l, false);
      e.call(exception, stackTrace, reason);
      return l.res.join("\n");
    };
    ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
      if (stackTrace === void 0) {
        stackTrace = null;
      }
      if (reason === void 0) {
        reason = null;
      }
      var originalException = this._findOriginalException(exception);
      var originalStack = this._findOriginalStack(exception);
      var context = this._findContext(exception);
      this.logger.logGroup("EXCEPTION: " + exception);
      if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
        this.logger.log("STACKTRACE:");
        this.logger.log(this._longStackTrace(stackTrace));
      }
      if (lang_1.isPresent(reason)) {
        this.logger.log("REASON: " + reason);
      }
      if (lang_1.isPresent(originalException)) {
        this.logger.log("ORIGINAL EXCEPTION: " + originalException);
      }
      if (lang_1.isPresent(originalStack)) {
        this.logger.log("ORIGINAL STACKTRACE:");
        this.logger.log(this._longStackTrace(originalStack));
      }
      if (lang_1.isPresent(context)) {
        this.logger.log("ERROR CONTEXT:");
        this.logger.log(context);
      }
      this.logger.logGroupEnd();
      if (this.rethrowException)
        throw exception;
    };
    ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
      return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
    };
    ExceptionHandler.prototype._findContext = function(exception) {
      try {
        if (!(exception instanceof lang_1.BaseException))
          return null;
        return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
      } catch (e) {
        return null;
      }
    };
    ExceptionHandler.prototype._findOriginalException = function(exception) {
      if (!(exception instanceof lang_1.BaseException))
        return null;
      var e = exception.originalException;
      while (e instanceof lang_1.BaseException && lang_1.isPresent(e.originalException)) {
        e = e.originalException;
      }
      return e;
    };
    ExceptionHandler.prototype._findOriginalStack = function(exception) {
      if (!(exception instanceof lang_1.BaseException))
        return null;
      var e = exception;
      var stack = exception.originalStack;
      while (e instanceof lang_1.BaseException && lang_1.isPresent(e.originalException)) {
        e = e.originalException;
        if (e instanceof lang_1.BaseException && lang_1.isPresent(e.originalException)) {
          stack = e.originalStack;
        }
      }
      return stack;
    };
    ExceptionHandler = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [Object, Boolean])], ExceptionHandler);
    return ExceptionHandler;
  })();
  exports.ExceptionHandler = ExceptionHandler;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/xhr.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_inliner.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        return Reflect.decorate(decorators, target, key, desc);
      switch (arguments.length) {
        case 2:
          return decorators.reduceRight(function(o, d) {
            return (d && d(o)) || o;
          }, target);
        case 3:
          return decorators.reduceRight(function(o, d) {
            return (d && d(target, key)), void 0;
          }, void 0);
        case 4:
          return decorators.reduceRight(function(o, d) {
            return (d && d(target, key, o)) || o;
          }, desc);
      }
    };
    var __metadata = (this && this.__metadata) || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
    };
    var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
    var xhr_1 = require("npm:angular2@2.0.0-alpha.35/src/render/xhr.js");
    var style_inliner_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_inliner.js");
    var style_url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js");
    var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
    var TemplateAndStyles = (function() {
      function TemplateAndStyles(template, styles) {
        this.template = template;
        this.styles = styles;
      }
      return TemplateAndStyles;
    })();
    exports.TemplateAndStyles = TemplateAndStyles;
    var ViewLoader = (function() {
      function ViewLoader(_xhr, _styleInliner, _styleUrlResolver) {
        this._xhr = _xhr;
        this._styleInliner = _styleInliner;
        this._styleUrlResolver = _styleUrlResolver;
        this._cache = new collection_1.Map();
      }
      ViewLoader.prototype.load = function(viewDef) {
        var _this = this;
        var r = profile_1.wtfStartTimeRange('ViewLoader#load()', lang_1.stringify(viewDef.componentId));
        var tplAndStyles = [this._loadHtml(viewDef.template, viewDef.templateAbsUrl)];
        if (lang_1.isPresent(viewDef.styles)) {
          viewDef.styles.forEach(function(cssText) {
            var textOrPromise = _this._resolveAndInlineCssText(cssText, viewDef.templateAbsUrl);
            tplAndStyles.push(textOrPromise);
          });
        }
        if (lang_1.isPresent(viewDef.styleAbsUrls)) {
          viewDef.styleAbsUrls.forEach(function(url) {
            var promise = _this._loadText(url).then(function(cssText) {
              return _this._resolveAndInlineCssText(cssText, viewDef.templateAbsUrl);
            });
            tplAndStyles.push(promise);
          });
        }
        return async_1.PromiseWrapper.all(tplAndStyles).then(function(res) {
          var loadedTplAndStyles = res[0];
          var styles = collection_1.ListWrapper.slice(res, 1);
          var templateAndStyles = new TemplateAndStyles(loadedTplAndStyles.template, loadedTplAndStyles.styles.concat(styles));
          profile_1.wtfEndTimeRange(r);
          return templateAndStyles;
        });
      };
      ViewLoader.prototype._loadText = function(url) {
        var response = this._cache.get(url);
        if (lang_1.isBlank(response)) {
          response = async_1.PromiseWrapper.catchError(this._xhr.get(url), function(_) {
            return async_1.PromiseWrapper.reject(new lang_1.BaseException("Failed to fetch url \"" + url + "\""), null);
          });
          this._cache.set(url, response);
        }
        return response;
      };
      ViewLoader.prototype._loadHtml = function(template, templateAbsUrl) {
        var _this = this;
        var html;
        if (lang_1.isPresent(template)) {
          html = async_1.PromiseWrapper.resolve(template);
        } else if (lang_1.isPresent(templateAbsUrl)) {
          html = this._loadText(templateAbsUrl);
        } else {
          throw new lang_1.BaseException('View should have either the templateUrl or template property set');
        }
        return html.then(function(html) {
          var tplEl = dom_adapter_1.DOM.createTemplate(html);
          if (lang_1.isPresent(templateAbsUrl) && templateAbsUrl.indexOf("/") >= 0) {
            var baseUrl = templateAbsUrl.substring(0, templateAbsUrl.lastIndexOf("/"));
            _this._substituteBaseUrl(dom_adapter_1.DOM.content(tplEl), baseUrl);
          }
          var styleEls = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(tplEl), 'STYLE');
          var unresolvedStyles = [];
          for (var i = 0; i < styleEls.length; i++) {
            var styleEl = styleEls[i];
            unresolvedStyles.push(dom_adapter_1.DOM.getText(styleEl));
            dom_adapter_1.DOM.remove(styleEl);
          }
          var syncStyles = [];
          var asyncStyles = [];
          for (var i = 0; i < styleEls.length; i++) {
            var styleEl_1 = styleEls[i];
            var resolvedStyled = _this._resolveAndInlineCssText(dom_adapter_1.DOM.getText(styleEl_1), templateAbsUrl);
            if (lang_1.isPromise(resolvedStyled)) {
              asyncStyles.push(resolvedStyled);
            } else {
              syncStyles.push(resolvedStyled);
            }
          }
          if (asyncStyles.length === 0) {
            return async_1.PromiseWrapper.resolve(new TemplateAndStyles(dom_adapter_1.DOM.getInnerHTML(tplEl), syncStyles));
          } else {
            return async_1.PromiseWrapper.all(asyncStyles).then(function(loadedStyles) {
              return new TemplateAndStyles(dom_adapter_1.DOM.getInnerHTML(tplEl), syncStyles.concat(loadedStyles));
            });
          }
        });
      };
      ViewLoader.prototype._substituteBaseUrl = function(element, baseUrl) {
        if (dom_adapter_1.DOM.isElementNode(element)) {
          var attrs = dom_adapter_1.DOM.attributeMap(element);
          collection_1.MapWrapper.forEach(attrs, function(v, k) {
            if (lang_1.isPresent(v) && v.indexOf('$baseUrl') >= 0) {
              dom_adapter_1.DOM.setAttribute(element, k, lang_1.StringWrapper.replaceAll(v, /\$baseUrl/g, baseUrl));
            }
          });
        }
        var children = dom_adapter_1.DOM.childNodes(element);
        for (var i = 0; i < children.length; i++) {
          if (dom_adapter_1.DOM.isElementNode(children[i])) {
            this._substituteBaseUrl(children[i], baseUrl);
          }
        }
      };
      ViewLoader.prototype._resolveAndInlineCssText = function(cssText, baseUrl) {
        cssText = this._styleUrlResolver.resolveUrls(cssText, baseUrl);
        return this._styleInliner.inlineImports(cssText, baseUrl);
      };
      ViewLoader = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [xhr_1.XHR, style_inliner_1.StyleInliner, style_url_resolver_1.StyleUrlResolver])], ViewLoader);
      return ViewLoader;
    })();
    exports.ViewLoader = ViewLoader;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js");
  var StyleUrlResolver = (function() {
    function StyleUrlResolver(_resolver) {
      this._resolver = _resolver;
    }
    StyleUrlResolver.prototype.resolveUrls = function(cssText, baseUrl) {
      cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
      cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
      return cssText;
    };
    StyleUrlResolver.prototype._replaceUrls = function(cssText, re, baseUrl) {
      var _this = this;
      return lang_1.StringWrapper.replaceAllMapped(cssText, re, function(m) {
        var pre = m[1];
        var originalUrl = m[2];
        if (lang_1.RegExpWrapper.test(_dataUrlRe, originalUrl)) {
          return m[0];
        }
        var url = lang_1.StringWrapper.replaceAll(originalUrl, _quoteRe, '');
        var post = m[3];
        var resolvedUrl = _this._resolver.resolve(baseUrl, url);
        return pre + "'" + resolvedUrl + "'" + post;
      });
    };
    StyleUrlResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [url_resolver_1.UrlResolver])], StyleUrlResolver);
    return StyleUrlResolver;
  })();
  exports.StyleUrlResolver = StyleUrlResolver;
  var _cssUrlRe = /(url\()([^)]*)(\))/g;
  var _cssImportRe = /(@import[\s]+(?!url\())['"]([^'"]*)['"](.*;)/g;
  var _quoteRe = /['"]/g;
  var _dataUrlRe = /^['"]?data:/g;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_inliner.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/render/xhr.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var xhr_1 = require("npm:angular2@2.0.0-alpha.35/src/render/xhr.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/services/url_resolver.js");
  var style_url_resolver_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_url_resolver.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var StyleInliner = (function() {
    function StyleInliner(_xhr, _styleUrlResolver, _urlResolver) {
      this._xhr = _xhr;
      this._styleUrlResolver = _styleUrlResolver;
      this._urlResolver = _urlResolver;
    }
    StyleInliner.prototype.inlineImports = function(cssText, baseUrl) {
      return this._inlineImports(cssText, baseUrl, []);
    };
    StyleInliner.prototype._inlineImports = function(cssText, baseUrl, inlinedUrls) {
      var _this = this;
      var partIndex = 0;
      var parts = lang_1.StringWrapper.split(cssText, _importRe);
      if (parts.length === 1) {
        return cssText;
      }
      var promises = [];
      while (partIndex < parts.length - 1) {
        var prefix = parts[partIndex];
        var rule = parts[partIndex + 1];
        var url = _extractUrl(rule);
        if (lang_1.isPresent(url)) {
          url = this._urlResolver.resolve(baseUrl, url);
        }
        var mediaQuery = _extractMediaQuery(rule);
        var promise;
        if (lang_1.isBlank(url)) {
          promise = async_1.PromiseWrapper.resolve("/* Invalid import rule: \"@import " + rule + ";\" */");
        } else if (collection_1.ListWrapper.contains(inlinedUrls, url)) {
          promise = async_1.PromiseWrapper.resolve(prefix);
        } else {
          inlinedUrls.push(url);
          promise = async_1.PromiseWrapper.then(this._xhr.get(url), function(rawCss) {
            var inlinedCss = _this._inlineImports(rawCss, url, inlinedUrls);
            if (lang_1.isPromise(inlinedCss)) {
              return inlinedCss.then(function(css) {
                return prefix + _this._transformImportedCss(css, mediaQuery, url) + '\n';
              });
            } else {
              return prefix + _this._transformImportedCss(inlinedCss, mediaQuery, url) + '\n';
            }
          }, function(error) {
            return ("/* failed to import " + url + " */\n");
          });
        }
        promises.push(promise);
        partIndex += 2;
      }
      return async_1.PromiseWrapper.all(promises).then(function(cssParts) {
        var cssText = cssParts.join('');
        if (partIndex < parts.length) {
          cssText += parts[partIndex];
        }
        return cssText;
      });
    };
    StyleInliner.prototype._transformImportedCss = function(css, mediaQuery, url) {
      css = this._styleUrlResolver.resolveUrls(css, url);
      return _wrapInMediaRule(css, mediaQuery);
    };
    StyleInliner = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [xhr_1.XHR, style_url_resolver_1.StyleUrlResolver, url_resolver_1.UrlResolver])], StyleInliner);
    return StyleInliner;
  })();
  exports.StyleInliner = StyleInliner;
  function _extractUrl(importRule) {
    var match = lang_1.RegExpWrapper.firstMatch(_urlRe, importRule);
    if (lang_1.isBlank(match))
      return null;
    return lang_1.isPresent(match[1]) ? match[1] : match[2];
  }
  function _extractMediaQuery(importRule) {
    var match = lang_1.RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
    if (lang_1.isBlank(match))
      return null;
    var mediaQuery = match[1].trim();
    return (mediaQuery.length > 0) ? mediaQuery : null;
  }
  function _wrapInMediaRule(css, query) {
    return (lang_1.isBlank(query)) ? css : "@media " + query + " {\n" + css + "\n}";
  }
  var _importRe = /@import\s+([^;]+);/g;
  var _urlRe = lang_1.RegExpWrapper.create('url\\(\\s*?[\'"]?([^\'")]+)[\'"]?|' + '[\'"]([^\'")]+)[\'"]');
  var _mediaQueryRe = /['"][^'"]+['"]\s*\)?\s*(.*)/g;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_resolver.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var view_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/view.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var ViewResolver = (function() {
    function ViewResolver() {
      this._cache = new collection_1.Map();
    }
    ViewResolver.prototype.resolve = function(component) {
      var view = this._cache.get(component);
      if (lang_1.isBlank(view)) {
        view = this._resolve(component);
        this._cache.set(component, view);
      }
      return view;
    };
    ViewResolver.prototype._resolve = function(component) {
      var annotations = reflection_1.reflector.annotations(component);
      for (var i = 0; i < annotations.length; i++) {
        var annotation = annotations[i];
        if (annotation instanceof view_1.ViewMetadata) {
          return annotation;
        }
      }
      throw new lang_1.BaseException("No View annotation found on component " + lang_1.stringify(component));
    };
    ViewResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], ViewResolver);
    return ViewResolver;
  })();
  exports.ViewResolver = ViewResolver;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/pipe_resolver.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var directives_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var PipeResolver = (function() {
    function PipeResolver() {}
    PipeResolver.prototype.resolve = function(type) {
      var metas = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
      if (lang_1.isPresent(metas)) {
        for (var i = 0; i < metas.length; i++) {
          var annotation = metas[i];
          if (annotation instanceof directives_1.PipeMetadata) {
            return annotation;
          }
        }
      }
      throw new lang_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
    };
    PipeResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], PipeResolver);
    return PipeResolver;
  })();
  exports.PipeResolver = PipeResolver;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/xhr.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var XHR = (function() {
    function XHR() {}
    XHR.prototype.get = function(url) {
      return null;
    };
    return XHR;
  })();
  exports.XHR = XHR;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/xhr_impl.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/render/xhr.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var xhr_1 = require("npm:angular2@2.0.0-alpha.35/src/render/xhr.js");
  var XHRImpl = (function(_super) {
    __extends(XHRImpl, _super);
    function XHRImpl() {
      _super.apply(this, arguments);
    }
    XHRImpl.prototype.get = function(url) {
      var completer = async_1.PromiseWrapper.completer();
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.responseType = 'text';
      xhr.onload = function() {
        var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
        var status = xhr.status === 1223 ? 204 : xhr.status;
        if (status === 0) {
          status = response ? 200 : 0;
        }
        if (200 <= status && status <= 300) {
          completer.resolve(response);
        } else {
          completer.reject("Failed to load " + url, null);
        }
      };
      xhr.onerror = function() {
        completer.reject("Failed to load " + url, null);
      };
      xhr.send();
      return completer.promise;
    };
    XHRImpl = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], XHRImpl);
    return XHRImpl;
  })(xhr_1.XHR);
  exports.XHRImpl = XHRImpl;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var BUBBLE_SYMBOL = '^';
  var EventManager = (function() {
    function EventManager(_plugins, _zone) {
      this._plugins = _plugins;
      this._zone = _zone;
      for (var i = 0; i < _plugins.length; i++) {
        _plugins[i].manager = this;
      }
    }
    EventManager.prototype.addEventListener = function(element, eventName, handler) {
      var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
      var plugin = this._findPluginFor(withoutBubbleSymbol);
      plugin.addEventListener(element, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
    };
    EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
      var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
      var plugin = this._findPluginFor(withoutBubbleSymbol);
      return plugin.addGlobalEventListener(target, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
    };
    EventManager.prototype.getZone = function() {
      return this._zone;
    };
    EventManager.prototype._findPluginFor = function(eventName) {
      var plugins = this._plugins;
      for (var i = 0; i < plugins.length; i++) {
        var plugin = plugins[i];
        if (plugin.supports(eventName)) {
          return plugin;
        }
      }
      throw new lang_1.BaseException("No event manager plugin found for event " + eventName);
    };
    EventManager.prototype._removeBubbleSymbol = function(eventName) {
      return eventName[0] == BUBBLE_SYMBOL ? lang_1.StringWrapper.substring(eventName, 1) : eventName;
    };
    return EventManager;
  })();
  exports.EventManager = EventManager;
  var EventManagerPlugin = (function() {
    function EventManagerPlugin() {}
    EventManagerPlugin.prototype.supports = function(eventName) {
      return false;
    };
    EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
      throw "not implemented";
    };
    EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler, shouldSupportBubble) {
      throw "not implemented";
    };
    return EventManagerPlugin;
  })();
  exports.EventManagerPlugin = EventManagerPlugin;
  var DomEventsPlugin = (function(_super) {
    __extends(DomEventsPlugin, _super);
    function DomEventsPlugin() {
      _super.apply(this, arguments);
    }
    DomEventsPlugin.prototype.supports = function(eventName) {
      return true;
    };
    DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
      var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
      this.manager._zone.runOutsideAngular(function() {
        dom_adapter_1.DOM.on(element, eventName, outsideHandler);
      });
    };
    DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler, shouldSupportBubble) {
      var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
      var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
      return this.manager._zone.runOutsideAngular(function() {
        return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler);
      });
    };
    DomEventsPlugin.prototype._getOutsideHandler = function(shouldSupportBubble, element, handler, zone) {
      return shouldSupportBubble ? DomEventsPlugin.bubbleCallback(element, handler, zone) : DomEventsPlugin.sameElementCallback(element, handler, zone);
    };
    DomEventsPlugin.sameElementCallback = function(element, handler, zone) {
      return function(event) {
        if (event.target === element) {
          zone.run(function() {
            return handler(event);
          });
        }
      };
    };
    DomEventsPlugin.bubbleCallback = function(element, handler, zone) {
      return function(event) {
        return zone.run(function() {
          return handler(event);
        });
      };
    };
    return DomEventsPlugin;
  })(EventManagerPlugin);
  exports.DomEventsPlugin = DomEventsPlugin;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/events/key_events.js", ["npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var __extends = (this && this.__extends) || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      __.prototype = b.prototype;
      d.prototype = new __();
    };
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var event_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js");
    var modifierKeys = ['alt', 'control', 'meta', 'shift'];
    var modifierKeyGetters = {
      'alt': function(event) {
        return event.altKey;
      },
      'control': function(event) {
        return event.ctrlKey;
      },
      'meta': function(event) {
        return event.metaKey;
      },
      'shift': function(event) {
        return event.shiftKey;
      }
    };
    var KeyEventsPlugin = (function(_super) {
      __extends(KeyEventsPlugin, _super);
      function KeyEventsPlugin() {
        _super.call(this);
      }
      KeyEventsPlugin.prototype.supports = function(eventName) {
        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
      };
      KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
        var outsideHandler = KeyEventsPlugin.eventCallback(element, shouldSupportBubble, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
        this.manager.getZone().runOutsideAngular(function() {
          dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
        });
      };
      KeyEventsPlugin.parseEventName = function(eventName) {
        var parts = eventName.toLowerCase().split('.');
        var domEventName = collection_1.ListWrapper.removeAt(parts, 0);
        if ((parts.length === 0) || !(lang_1.StringWrapper.equals(domEventName, 'keydown') || lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
          return null;
        }
        var key = KeyEventsPlugin._normalizeKey(collection_1.ListWrapper.removeLast(parts));
        var fullKey = '';
        collection_1.ListWrapper.forEach(modifierKeys, function(modifierName) {
          if (collection_1.ListWrapper.contains(parts, modifierName)) {
            collection_1.ListWrapper.remove(parts, modifierName);
            fullKey += modifierName + '.';
          }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
          return null;
        }
        var result = collection_1.StringMapWrapper.create();
        collection_1.StringMapWrapper.set(result, 'domEventName', domEventName);
        collection_1.StringMapWrapper.set(result, 'fullKey', fullKey);
        return result;
      };
      KeyEventsPlugin.getEventFullKey = function(event) {
        var fullKey = '';
        var key = dom_adapter_1.DOM.getEventKey(event);
        key = key.toLowerCase();
        if (lang_1.StringWrapper.equals(key, ' ')) {
          key = 'space';
        } else if (lang_1.StringWrapper.equals(key, '.')) {
          key = 'dot';
        }
        collection_1.ListWrapper.forEach(modifierKeys, function(modifierName) {
          if (modifierName != key) {
            var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
            if (modifierGetter(event)) {
              fullKey += modifierName + '.';
            }
          }
        });
        fullKey += key;
        return fullKey;
      };
      KeyEventsPlugin.eventCallback = function(element, shouldSupportBubble, fullKey, handler, zone) {
        return function(event) {
          var correctElement = shouldSupportBubble || event.target === element;
          if (correctElement && lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
            zone.run(function() {
              return handler(event);
            });
          }
        };
      };
      KeyEventsPlugin._normalizeKey = function(keyName) {
        switch (keyName) {
          case 'esc':
            return 'escape';
          default:
            return keyName;
        }
      };
      return KeyEventsPlugin;
    })(event_manager_1.EventManagerPlugin);
    exports.KeyEventsPlugin = KeyEventsPlugin;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/events/hammer_gestures.js", ["npm:angular2@2.0.0-alpha.35/src/render/dom/events/hammer_common.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var hammer_common_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/hammer_common.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var HammerGesturesPlugin = (function(_super) {
    __extends(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin() {
      _super.call(this);
    }
    HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!_super.prototype.supports.call(this, eventName))
        return false;
      if (!lang_1.isPresent(window['Hammer'])) {
        throw new lang_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
      }
      return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
      if (shouldSupportBubble)
        throw new lang_1.BaseException('Hammer.js plugin does not support bubbling gestures.');
      var zone = this.manager.getZone();
      eventName = eventName.toLowerCase();
      zone.runOutsideAngular(function() {
        var mc = new Hammer(element);
        mc.get('pinch').set({enable: true});
        mc.get('rotate').set({enable: true});
        mc.on(eventName, function(eventObj) {
          zone.run(function() {
            handler(eventObj);
          });
        });
      });
    };
    return HammerGesturesPlugin;
  })(hammer_common_1.HammerGesturesPluginCommon);
  exports.HammerGesturesPlugin = HammerGesturesPlugin;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/services/anchor_based_app_root_url.js", ["npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var app_root_url_1 = require("npm:angular2@2.0.0-alpha.35/src/services/app_root_url.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var AnchorBasedAppRootUrl = (function(_super) {
    __extends(AnchorBasedAppRootUrl, _super);
    function AnchorBasedAppRootUrl() {
      _super.call(this, "");
      var rootUrl;
      var a = dom_adapter_1.DOM.createElement('a');
      dom_adapter_1.DOM.resolveAndSetHref(a, './', null);
      rootUrl = dom_adapter_1.DOM.getHref(a);
      this.value = rootUrl;
    }
    AnchorBasedAppRootUrl = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], AnchorBasedAppRootUrl);
    return AnchorBasedAppRootUrl;
  })(app_root_url_1.AppRootUrl);
  exports.AnchorBasedAppRootUrl = AnchorBasedAppRootUrl;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/testability/testability.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/core/testability/get_testability.js", "npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var getTestabilityModule = require("npm:angular2@2.0.0-alpha.35/src/core/testability/get_testability.js");
  var ng_zone_1 = require("npm:angular2@2.0.0-alpha.35/src/core/zone/ng_zone.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var Testability = (function() {
    function Testability(_ngZone) {
      this._ngZone = _ngZone;
      this._pendingCount = 0;
      this._callbacks = [];
      this._isAngularEventPending = false;
      this._watchAngularEvents(_ngZone);
    }
    Testability.prototype._watchAngularEvents = function(_ngZone) {
      var _this = this;
      _ngZone.overrideOnTurnStart(function() {
        _this._isAngularEventPending = true;
      });
      _ngZone.overrideOnEventDone(function() {
        _this._isAngularEventPending = false;
        _this._runCallbacksIfReady();
      }, true);
    };
    Testability.prototype.increasePendingRequestCount = function() {
      this._pendingCount += 1;
      return this._pendingCount;
    };
    Testability.prototype.decreasePendingRequestCount = function() {
      this._pendingCount -= 1;
      if (this._pendingCount < 0) {
        throw new lang_1.BaseException('pending async requests below zero');
      }
      this._runCallbacksIfReady();
      return this._pendingCount;
    };
    Testability.prototype._runCallbacksIfReady = function() {
      var _this = this;
      if (this._pendingCount != 0 || this._isAngularEventPending) {
        return;
      }
      async_1.PromiseWrapper.resolve(null).then(function(_) {
        while (_this._callbacks.length !== 0) {
          (_this._callbacks.pop())();
        }
      });
    };
    Testability.prototype.whenStable = function(callback) {
      this._callbacks.push(callback);
      this._runCallbacksIfReady();
    };
    Testability.prototype.getPendingRequestCount = function() {
      return this._pendingCount;
    };
    Testability.prototype.isAngularEventPending = function() {
      return this._isAngularEventPending;
    };
    Testability.prototype.findBindings = function(using, binding, exactMatch) {
      return [];
    };
    Testability = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [ng_zone_1.NgZone])], Testability);
    return Testability;
  })();
  exports.Testability = Testability;
  var TestabilityRegistry = (function() {
    function TestabilityRegistry() {
      this._applications = new collection_1.Map();
      getTestabilityModule.GetTestability.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.getAllTestabilities = function() {
      return collection_1.MapWrapper.values(this._applications);
    };
    TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
      if (findInAncestors === void 0) {
        findInAncestors = true;
      }
      if (elem == null) {
        return null;
      }
      if (this._applications.has(elem)) {
        return this._applications.get(elem);
      } else if (!findInAncestors) {
        return null;
      }
      if (dom_adapter_1.DOM.isShadowRoot(elem)) {
        return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
      }
      return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
    };
    TestabilityRegistry = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], TestabilityRegistry);
    return TestabilityRegistry;
  })();
  exports.TestabilityRegistry = TestabilityRegistry;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_pool.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.APP_VIEW_POOL_CAPACITY = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppViewPool.viewPoolCapacity'));
  var AppViewPool = (function() {
    function AppViewPool(poolCapacityPerProtoView) {
      this._pooledViewsPerProtoView = new collection_1.Map();
      this._poolCapacityPerProtoView = poolCapacityPerProtoView;
    }
    AppViewPool.prototype.getView = function(protoView) {
      var pooledViews = this._pooledViewsPerProtoView.get(protoView);
      if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
        return collection_1.ListWrapper.removeLast(pooledViews);
      }
      return null;
    };
    AppViewPool.prototype.returnView = function(view) {
      var protoView = view.proto;
      var pooledViews = this._pooledViewsPerProtoView.get(protoView);
      if (lang_1.isBlank(pooledViews)) {
        pooledViews = [];
        this._pooledViewsPerProtoView.set(protoView, pooledViews);
      }
      var haveRemainingCapacity = pooledViews.length < this._poolCapacityPerProtoView;
      if (haveRemainingCapacity) {
        pooledViews.push(view);
      }
      return haveRemainingCapacity;
    };
    AppViewPool = __decorate([di_1.Injectable(), __param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), __metadata('design:paramtypes', [Object])], AppViewPool);
    return AppViewPool;
  })();
  exports.AppViewPool = AppViewPool;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager_utils.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/pipes/pipes.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var eli = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var viewModule = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
  var element_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js");
  var template_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js");
  var pipes_1 = require("npm:angular2@2.0.0-alpha.35/src/core/pipes/pipes.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var AppViewManagerUtils = (function() {
    function AppViewManagerUtils() {}
    AppViewManagerUtils.prototype.getComponentInstance = function(parentView, boundElementIndex) {
      var eli = parentView.elementInjectors[boundElementIndex];
      return eli.getComponent();
    };
    AppViewManagerUtils.prototype.createView = function(mergedParentViewProto, renderViewWithFragments, viewManager, renderer) {
      var renderFragments = renderViewWithFragments.fragmentRefs;
      var renderView = renderViewWithFragments.viewRef;
      var elementCount = mergedParentViewProto.mergeMapping.renderElementIndices.length;
      var viewCount = mergedParentViewProto.mergeMapping.nestedViewCountByViewIndex[0] + 1;
      var elementRefs = collection_1.ListWrapper.createFixedSize(elementCount);
      var viewContainers = collection_1.ListWrapper.createFixedSize(elementCount);
      var preBuiltObjects = collection_1.ListWrapper.createFixedSize(elementCount);
      var elementInjectors = collection_1.ListWrapper.createFixedSize(elementCount);
      var views = collection_1.ListWrapper.createFixedSize(viewCount);
      var elementOffset = 0;
      var textOffset = 0;
      var fragmentIdx = 0;
      for (var viewOffset = 0; viewOffset < viewCount; viewOffset++) {
        var hostElementIndex = mergedParentViewProto.mergeMapping.hostElementIndicesByViewIndex[viewOffset];
        var parentView = lang_1.isPresent(hostElementIndex) ? view_ref_1.internalView(elementRefs[hostElementIndex].parentView) : null;
        var protoView = lang_1.isPresent(hostElementIndex) ? parentView.proto.elementBinders[hostElementIndex - parentView.elementOffset].nestedProtoView : mergedParentViewProto;
        var renderFragment = null;
        if (viewOffset === 0 || protoView.type === api_1.ViewType.EMBEDDED) {
          renderFragment = renderFragments[fragmentIdx++];
        }
        var currentView = new viewModule.AppView(renderer, protoView, mergedParentViewProto.mergeMapping, viewOffset, elementOffset, textOffset, protoView.protoLocals, renderView, renderFragment);
        views[viewOffset] = currentView;
        var rootElementInjectors = [];
        for (var binderIdx = 0; binderIdx < protoView.elementBinders.length; binderIdx++) {
          var binder = protoView.elementBinders[binderIdx];
          var boundElementIndex = elementOffset + binderIdx;
          var elementInjector = null;
          var protoElementInjector = binder.protoElementInjector;
          if (lang_1.isPresent(protoElementInjector)) {
            if (lang_1.isPresent(protoElementInjector.parent)) {
              var parentElementInjector = elementInjectors[elementOffset + protoElementInjector.parent.index];
              elementInjector = protoElementInjector.instantiate(parentElementInjector);
            } else {
              elementInjector = protoElementInjector.instantiate(null);
              rootElementInjectors.push(elementInjector);
            }
          }
          elementInjectors[boundElementIndex] = elementInjector;
          var el = new element_ref_1.ElementRef(currentView.ref, boundElementIndex, mergedParentViewProto.mergeMapping.renderElementIndices[boundElementIndex], renderer);
          elementRefs[el.boundElementIndex] = el;
          if (lang_1.isPresent(elementInjector)) {
            var templateRef = binder.hasEmbeddedProtoView() ? new template_ref_1.TemplateRef(el) : null;
            preBuiltObjects[boundElementIndex] = new eli.PreBuiltObjects(viewManager, currentView, el, templateRef);
          }
        }
        currentView.init(protoView.protoChangeDetector.instantiate(currentView), elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers);
        if (lang_1.isPresent(parentView) && protoView.type === api_1.ViewType.COMPONENT) {
          parentView.changeDetector.addShadowDomChild(currentView.changeDetector);
        }
        elementOffset += protoView.elementBinders.length;
        textOffset += protoView.textBindingCount;
      }
      return views[0];
    };
    AppViewManagerUtils.prototype.hydrateRootHostView = function(hostView, injector) {
      this._hydrateView(hostView, injector, null, new Object(), null);
    };
    AppViewManagerUtils.prototype.attachViewInContainer = function(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view) {
      if (lang_1.isBlank(contextView)) {
        contextView = parentView;
        contextBoundElementIndex = boundElementIndex;
      }
      parentView.changeDetector.addChild(view.changeDetector);
      var viewContainer = parentView.viewContainers[boundElementIndex];
      if (lang_1.isBlank(viewContainer)) {
        viewContainer = new viewModule.AppViewContainer();
        parentView.viewContainers[boundElementIndex] = viewContainer;
      }
      collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
      var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
      var sibling;
      if (atIndex == 0) {
        sibling = elementInjector;
      } else {
        sibling = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootElementInjectors);
      }
      for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
        if (lang_1.isPresent(elementInjector.parent)) {
          view.rootElementInjectors[i].linkAfter(elementInjector.parent, sibling);
        } else {
          contextView.rootElementInjectors.push(view.rootElementInjectors[i]);
        }
      }
    };
    AppViewManagerUtils.prototype.detachViewInContainer = function(parentView, boundElementIndex, atIndex) {
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      view.changeDetector.remove();
      collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
      for (var i = 0; i < view.rootElementInjectors.length; ++i) {
        var inj = view.rootElementInjectors[i];
        if (lang_1.isPresent(inj.parent)) {
          inj.unlink();
        } else {
          var removeIdx = collection_1.ListWrapper.indexOf(parentView.rootElementInjectors, inj);
          if (removeIdx >= 0) {
            collection_1.ListWrapper.removeAt(parentView.rootElementInjectors, removeIdx);
          }
        }
      }
    };
    AppViewManagerUtils.prototype.hydrateViewInContainer = function(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, imperativelyCreatedBindings) {
      if (lang_1.isBlank(contextView)) {
        contextView = parentView;
        contextBoundElementIndex = boundElementIndex;
      }
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
      var injector = lang_1.isPresent(imperativelyCreatedBindings) ? di_1.Injector.fromResolvedBindings(imperativelyCreatedBindings) : null;
      this._hydrateView(view, injector, elementInjector.getHost(), contextView.context, contextView.locals);
    };
    AppViewManagerUtils.prototype._hydrateView = function(initView, imperativelyCreatedInjector, hostElementInjector, context, parentLocals) {
      var viewIdx = initView.viewOffset;
      var endViewOffset = viewIdx + initView.mainMergeMapping.nestedViewCountByViewIndex[viewIdx];
      while (viewIdx <= endViewOffset) {
        var currView = initView.views[viewIdx];
        var currProtoView = currView.proto;
        if (currView !== initView && currView.proto.type === api_1.ViewType.EMBEDDED) {
          viewIdx += initView.mainMergeMapping.nestedViewCountByViewIndex[viewIdx] + 1;
        } else {
          if (currView !== initView) {
            imperativelyCreatedInjector = null;
            parentLocals = null;
            var hostElementIndex = initView.mainMergeMapping.hostElementIndicesByViewIndex[viewIdx];
            hostElementInjector = initView.elementInjectors[hostElementIndex];
            context = hostElementInjector.getComponent();
          }
          currView.context = context;
          currView.locals.parent = parentLocals;
          var binders = currProtoView.elementBinders;
          for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
            var boundElementIndex = binderIdx + currView.elementOffset;
            var elementInjector = initView.elementInjectors[boundElementIndex];
            if (lang_1.isPresent(elementInjector)) {
              elementInjector.hydrate(imperativelyCreatedInjector, hostElementInjector, currView.preBuiltObjects[boundElementIndex]);
              this._populateViewLocals(currView, elementInjector, boundElementIndex);
              this._setUpEventEmitters(currView, elementInjector, boundElementIndex);
              this._setUpHostActions(currView, elementInjector, boundElementIndex);
            }
          }
          var pipes = lang_1.isPresent(hostElementInjector) ? new pipes_1.Pipes(currView.proto.pipes, hostElementInjector.getInjector()) : null;
          currView.changeDetector.hydrate(currView.context, currView.locals, currView, pipes);
          viewIdx++;
        }
      }
    };
    AppViewManagerUtils.prototype._populateViewLocals = function(view, elementInjector, boundElementIdx) {
      if (lang_1.isPresent(elementInjector.getDirectiveVariableBindings())) {
        collection_1.MapWrapper.forEach(elementInjector.getDirectiveVariableBindings(), function(directiveIndex, name) {
          if (lang_1.isBlank(directiveIndex)) {
            view.locals.set(name, view.elementRefs[boundElementIdx].nativeElement);
          } else {
            view.locals.set(name, elementInjector.getDirectiveAtIndex(directiveIndex));
          }
        });
      }
    };
    AppViewManagerUtils.prototype._setUpEventEmitters = function(view, elementInjector, boundElementIndex) {
      var emitters = elementInjector.getEventEmitterAccessors();
      for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
        var directiveEmitters = emitters[directiveIndex];
        var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
        for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
          var eventEmitterAccessor = directiveEmitters[eventIndex];
          eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
        }
      }
    };
    AppViewManagerUtils.prototype._setUpHostActions = function(view, elementInjector, boundElementIndex) {
      var hostActions = elementInjector.getHostActionAccessors();
      for (var directiveIndex = 0; directiveIndex < hostActions.length; ++directiveIndex) {
        var directiveHostActions = hostActions[directiveIndex];
        var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
        for (var index = 0; index < directiveHostActions.length; ++index) {
          var hostActionAccessor = directiveHostActions[index];
          hostActionAccessor.subscribe(view, boundElementIndex, directive);
        }
      }
    };
    AppViewManagerUtils.prototype.dehydrateView = function(initView) {
      var endViewOffset = initView.viewOffset + initView.mainMergeMapping.nestedViewCountByViewIndex[initView.viewOffset];
      for (var viewIdx = initView.viewOffset; viewIdx <= endViewOffset; viewIdx++) {
        var currView = initView.views[viewIdx];
        if (currView.hydrated()) {
          if (lang_1.isPresent(currView.locals)) {
            currView.locals.clearValues();
          }
          currView.context = null;
          currView.changeDetector.dehydrate();
          var binders = currView.proto.elementBinders;
          for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
            var eli = initView.elementInjectors[currView.elementOffset + binderIdx];
            if (lang_1.isPresent(eli)) {
              eli.dehydrate();
            }
          }
        }
      }
    };
    AppViewManagerUtils = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], AppViewManagerUtils);
    return AppViewManagerUtils;
  })();
  exports.AppViewManagerUtils = AppViewManagerUtils;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_listener.js", ["npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var AppViewListener = (function() {
    function AppViewListener() {}
    AppViewListener.prototype.viewCreated = function(view) {};
    AppViewListener.prototype.viewDestroyed = function(view) {};
    AppViewListener = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], AppViewListener);
    return AppViewListener;
  })();
  exports.AppViewListener = AppViewListener;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/proto_view_factory.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/core/pipes/pipes.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
  var pipes_1 = require("npm:angular2@2.0.0-alpha.35/src/core/pipes/pipes.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var view_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js");
  var element_injector_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js");
  var BindingRecordsCreator = (function() {
    function BindingRecordsCreator() {
      this._directiveRecordsMap = new Map();
    }
    BindingRecordsCreator.prototype.getEventBindingRecords = function(elementBinders, allDirectiveMetadatas) {
      var res = [];
      for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; boundElementIndex++) {
        var renderElementBinder = elementBinders[boundElementIndex];
        this._createTemplateEventRecords(res, renderElementBinder, boundElementIndex);
        this._createHostEventRecords(res, renderElementBinder, allDirectiveMetadatas, boundElementIndex);
      }
      return res;
    };
    BindingRecordsCreator.prototype._createTemplateEventRecords = function(res, renderElementBinder, boundElementIndex) {
      renderElementBinder.eventBindings.forEach(function(eb) {
        res.push(change_detection_1.BindingRecord.createForEvent(eb.source, eb.fullName, boundElementIndex));
      });
    };
    BindingRecordsCreator.prototype._createHostEventRecords = function(res, renderElementBinder, allDirectiveMetadatas, boundElementIndex) {
      for (var i = 0; i < renderElementBinder.directives.length; ++i) {
        var dir = renderElementBinder.directives[i];
        var directiveMetadata = allDirectiveMetadatas[dir.directiveIndex];
        var dirRecord = this._getDirectiveRecord(boundElementIndex, i, directiveMetadata);
        dir.eventBindings.forEach(function(heb) {
          res.push(change_detection_1.BindingRecord.createForHostEvent(heb.source, heb.fullName, dirRecord));
        });
      }
    };
    BindingRecordsCreator.prototype.getPropertyBindingRecords = function(textBindings, elementBinders, allDirectiveMetadatas) {
      var bindings = [];
      this._createTextNodeRecords(bindings, textBindings);
      for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; boundElementIndex++) {
        var renderElementBinder = elementBinders[boundElementIndex];
        this._createElementPropertyRecords(bindings, boundElementIndex, renderElementBinder);
        this._createDirectiveRecords(bindings, boundElementIndex, renderElementBinder.directives, allDirectiveMetadatas);
      }
      return bindings;
    };
    BindingRecordsCreator.prototype.getDirectiveRecords = function(elementBinders, allDirectiveMetadatas) {
      var directiveRecords = [];
      for (var elementIndex = 0; elementIndex < elementBinders.length; ++elementIndex) {
        var dirs = elementBinders[elementIndex].directives;
        for (var dirIndex = 0; dirIndex < dirs.length; ++dirIndex) {
          directiveRecords.push(this._getDirectiveRecord(elementIndex, dirIndex, allDirectiveMetadatas[dirs[dirIndex].directiveIndex]));
        }
      }
      return directiveRecords;
    };
    BindingRecordsCreator.prototype._createTextNodeRecords = function(bindings, textBindings) {
      for (var i = 0; i < textBindings.length; i++) {
        bindings.push(change_detection_1.BindingRecord.createForTextNode(textBindings[i], i));
      }
    };
    BindingRecordsCreator.prototype._createElementPropertyRecords = function(bindings, boundElementIndex, renderElementBinder) {
      collection_1.ListWrapper.forEach(renderElementBinder.propertyBindings, function(binding) {
        if (binding.type === api_1.PropertyBindingType.PROPERTY) {
          bindings.push(change_detection_1.BindingRecord.createForElementProperty(binding.astWithSource, boundElementIndex, binding.property));
        } else if (binding.type === api_1.PropertyBindingType.ATTRIBUTE) {
          bindings.push(change_detection_1.BindingRecord.createForElementAttribute(binding.astWithSource, boundElementIndex, binding.property));
        } else if (binding.type === api_1.PropertyBindingType.CLASS) {
          bindings.push(change_detection_1.BindingRecord.createForElementClass(binding.astWithSource, boundElementIndex, binding.property));
        } else if (binding.type === api_1.PropertyBindingType.STYLE) {
          bindings.push(change_detection_1.BindingRecord.createForElementStyle(binding.astWithSource, boundElementIndex, binding.property, binding.unit));
        }
      });
    };
    BindingRecordsCreator.prototype._createDirectiveRecords = function(bindings, boundElementIndex, directiveBinders, allDirectiveMetadatas) {
      for (var i = 0; i < directiveBinders.length; i++) {
        var directiveBinder = directiveBinders[i];
        var directiveMetadata = allDirectiveMetadatas[directiveBinder.directiveIndex];
        var directiveRecord = this._getDirectiveRecord(boundElementIndex, i, directiveMetadata);
        collection_1.MapWrapper.forEach(directiveBinder.propertyBindings, function(astWithSource, propertyName) {
          var setter = reflection_1.reflector.setter(propertyName);
          bindings.push(change_detection_1.BindingRecord.createForDirective(astWithSource, propertyName, setter, directiveRecord));
        });
        if (directiveRecord.callOnChange) {
          bindings.push(change_detection_1.BindingRecord.createDirectiveOnChange(directiveRecord));
        }
        if (directiveRecord.callOnInit) {
          bindings.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
        }
        if (directiveRecord.callOnCheck) {
          bindings.push(change_detection_1.BindingRecord.createDirectiveOnCheck(directiveRecord));
        }
      }
      for (var i = 0; i < directiveBinders.length; i++) {
        var directiveBinder = directiveBinders[i];
        collection_1.ListWrapper.forEach(directiveBinder.hostPropertyBindings, function(binding) {
          var dirIndex = new change_detection_1.DirectiveIndex(boundElementIndex, i);
          if (binding.type === api_1.PropertyBindingType.PROPERTY) {
            bindings.push(change_detection_1.BindingRecord.createForHostProperty(dirIndex, binding.astWithSource, binding.property));
          } else if (binding.type === api_1.PropertyBindingType.ATTRIBUTE) {
            bindings.push(change_detection_1.BindingRecord.createForHostAttribute(dirIndex, binding.astWithSource, binding.property));
          } else if (binding.type === api_1.PropertyBindingType.CLASS) {
            bindings.push(change_detection_1.BindingRecord.createForHostClass(dirIndex, binding.astWithSource, binding.property));
          } else if (binding.type === api_1.PropertyBindingType.STYLE) {
            bindings.push(change_detection_1.BindingRecord.createForHostStyle(dirIndex, binding.astWithSource, binding.property, binding.unit));
          }
        });
      }
    };
    BindingRecordsCreator.prototype._getDirectiveRecord = function(boundElementIndex, directiveIndex, directiveMetadata) {
      var id = boundElementIndex * 100 + directiveIndex;
      if (!this._directiveRecordsMap.has(id)) {
        this._directiveRecordsMap.set(id, new change_detection_1.DirectiveRecord({
          directiveIndex: new change_detection_1.DirectiveIndex(boundElementIndex, directiveIndex),
          callOnAllChangesDone: directiveMetadata.callOnAllChangesDone,
          callOnChange: directiveMetadata.callOnChange,
          callOnCheck: directiveMetadata.callOnCheck,
          callOnInit: directiveMetadata.callOnInit,
          changeDetection: directiveMetadata.changeDetection
        }));
      }
      return this._directiveRecordsMap.get(id);
    };
    return BindingRecordsCreator;
  })();
  exports.BindingRecordsCreator = BindingRecordsCreator;
  var ProtoViewFactory = (function() {
    function ProtoViewFactory(_changeDetection) {
      this._changeDetection = _changeDetection;
    }
    ProtoViewFactory.prototype.createAppProtoViews = function(hostComponentBinding, rootRenderProtoView, allDirectives, pipes) {
      var _this = this;
      var allRenderDirectiveMetadata = collection_1.ListWrapper.map(allDirectives, function(directiveBinding) {
        return directiveBinding.metadata;
      });
      var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
      var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
      var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex);
      var changeDetectorDefs = _getChangeDetectorDefinitions(hostComponentBinding.metadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
      var protoChangeDetectors = collection_1.ListWrapper.map(changeDetectorDefs, function(changeDetectorDef) {
        return _this._changeDetection.createProtoChangeDetector(changeDetectorDef);
      });
      var appProtoViews = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
      collection_1.ListWrapper.forEach(nestedPvsWithIndex, function(pvWithIndex) {
        var appProtoView = _createAppProtoView(pvWithIndex.renderProtoView, protoChangeDetectors[pvWithIndex.index], nestedPvVariableBindings[pvWithIndex.index], allDirectives, pipes);
        if (lang_1.isPresent(pvWithIndex.parentIndex)) {
          var parentView = appProtoViews[pvWithIndex.parentIndex];
          parentView.elementBinders[pvWithIndex.boundElementIndex].nestedProtoView = appProtoView;
        }
        appProtoViews[pvWithIndex.index] = appProtoView;
      });
      return appProtoViews;
    };
    ProtoViewFactory = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [change_detection_1.ChangeDetection])], ProtoViewFactory);
    return ProtoViewFactory;
  })();
  exports.ProtoViewFactory = ProtoViewFactory;
  function getChangeDetectorDefinitions(hostComponentMetadata, rootRenderProtoView, allRenderDirectiveMetadata) {
    var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
    var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex);
    return _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
  }
  exports.getChangeDetectorDefinitions = getChangeDetectorDefinitions;
  function _collectNestedProtoViews(renderProtoView, parentIndex, boundElementIndex, result) {
    if (parentIndex === void 0) {
      parentIndex = null;
    }
    if (boundElementIndex === void 0) {
      boundElementIndex = null;
    }
    if (result === void 0) {
      result = null;
    }
    if (lang_1.isBlank(result)) {
      result = [];
    }
    result.push(new RenderProtoViewWithIndex(renderProtoView, result.length, parentIndex, boundElementIndex));
    var currentIndex = result.length - 1;
    var childBoundElementIndex = 0;
    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function(elementBinder) {
      if (lang_1.isPresent(elementBinder.nestedProtoView)) {
        _collectNestedProtoViews(elementBinder.nestedProtoView, currentIndex, childBoundElementIndex, result);
      }
      childBoundElementIndex++;
    });
    return result;
  }
  function _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata) {
    return collection_1.ListWrapper.map(nestedPvsWithIndex, function(pvWithIndex) {
      var elementBinders = pvWithIndex.renderProtoView.elementBinders;
      var bindingRecordsCreator = new BindingRecordsCreator();
      var propBindingRecords = bindingRecordsCreator.getPropertyBindingRecords(pvWithIndex.renderProtoView.textBindings, elementBinders, allRenderDirectiveMetadata);
      var eventBindingRecords = bindingRecordsCreator.getEventBindingRecords(elementBinders, allRenderDirectiveMetadata);
      var directiveRecords = bindingRecordsCreator.getDirectiveRecords(elementBinders, allRenderDirectiveMetadata);
      var strategyName = change_detection_1.DEFAULT;
      var typeString;
      if (pvWithIndex.renderProtoView.type === api_1.ViewType.COMPONENT) {
        strategyName = hostComponentMetadata.changeDetection;
        typeString = 'comp';
      } else if (pvWithIndex.renderProtoView.type === api_1.ViewType.HOST) {
        typeString = 'host';
      } else {
        typeString = 'embedded';
      }
      var id = hostComponentMetadata.id + "_" + typeString + "_" + pvWithIndex.index;
      var variableNames = nestedPvVariableNames[pvWithIndex.index];
      return new change_detection_1.ChangeDetectorDefinition(id, strategyName, variableNames, propBindingRecords, eventBindingRecords, directiveRecords, lang_1.assertionsEnabled());
    });
  }
  function _createAppProtoView(renderProtoView, protoChangeDetector, variableBindings, allDirectives, pipes) {
    var elementBinders = renderProtoView.elementBinders;
    var protoPipes = new pipes_1.ProtoPipes(pipes);
    var protoView = new view_1.AppProtoView(renderProtoView.type, renderProtoView.transitiveNgContentCount > 0, renderProtoView.render, protoChangeDetector, variableBindings, createVariableLocations(elementBinders), renderProtoView.textBindings.length, protoPipes);
    _createElementBinders(protoView, elementBinders, allDirectives);
    return protoView;
  }
  function _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex) {
    return collection_1.ListWrapper.map(nestedPvsWithIndex, function(pvWithIndex) {
      return _createVariableBindings(pvWithIndex.renderProtoView);
    });
  }
  function _createVariableBindings(renderProtoView) {
    var variableBindings = new Map();
    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function(mappedName, varName) {
      variableBindings.set(varName, mappedName);
    });
    return variableBindings;
  }
  function _collectNestedProtoViewsVariableNames(nestedPvsWithIndex) {
    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
    collection_1.ListWrapper.forEach(nestedPvsWithIndex, function(pvWithIndex) {
      var parentVariableNames = lang_1.isPresent(pvWithIndex.parentIndex) ? nestedPvVariableNames[pvWithIndex.parentIndex] : null;
      nestedPvVariableNames[pvWithIndex.index] = _createVariableNames(parentVariableNames, pvWithIndex.renderProtoView);
    });
    return nestedPvVariableNames;
  }
  function _createVariableNames(parentVariableNames, renderProtoView) {
    var res = lang_1.isBlank(parentVariableNames) ? [] : collection_1.ListWrapper.clone(parentVariableNames);
    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function(mappedName, varName) {
      res.push(mappedName);
    });
    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function(binder) {
      collection_1.MapWrapper.forEach(binder.variableBindings, function(mappedName, varName) {
        res.push(mappedName);
      });
    });
    return res;
  }
  function createVariableLocations(elementBinders) {
    var variableLocations = new Map();
    for (var i = 0; i < elementBinders.length; i++) {
      var binder = elementBinders[i];
      collection_1.MapWrapper.forEach(binder.variableBindings, function(mappedName, varName) {
        variableLocations.set(mappedName, i);
      });
    }
    return variableLocations;
  }
  exports.createVariableLocations = createVariableLocations;
  function _createElementBinders(protoView, elementBinders, allDirectiveBindings) {
    for (var i = 0; i < elementBinders.length; i++) {
      var renderElementBinder = elementBinders[i];
      var dirs = elementBinders[i].directives;
      var parentPeiWithDistance = _findParentProtoElementInjectorWithDistance(i, protoView.elementBinders, elementBinders);
      var directiveBindings = collection_1.ListWrapper.map(dirs, function(dir) {
        return allDirectiveBindings[dir.directiveIndex];
      });
      var componentDirectiveBinding = null;
      if (directiveBindings.length > 0) {
        if (directiveBindings[0].metadata.type === api_1.RenderDirectiveMetadata.COMPONENT_TYPE) {
          componentDirectiveBinding = directiveBindings[0];
        }
      }
      var protoElementInjector = _createProtoElementInjector(i, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings);
      _createElementBinder(protoView, i, renderElementBinder, protoElementInjector, componentDirectiveBinding, directiveBindings);
    }
  }
  function _findParentProtoElementInjectorWithDistance(binderIndex, elementBinders, renderElementBinders) {
    var distance = 0;
    do {
      var renderElementBinder = renderElementBinders[binderIndex];
      binderIndex = renderElementBinder.parentIndex;
      if (binderIndex !== -1) {
        distance += renderElementBinder.distanceToParent;
        var elementBinder = elementBinders[binderIndex];
        if (lang_1.isPresent(elementBinder.protoElementInjector)) {
          return new ParentProtoElementInjectorWithDistance(elementBinder.protoElementInjector, distance);
        }
      }
    } while (binderIndex !== -1);
    return new ParentProtoElementInjectorWithDistance(null, 0);
  }
  function _createProtoElementInjector(binderIndex, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings) {
    var protoElementInjector = null;
    var hasVariables = collection_1.MapWrapper.size(renderElementBinder.variableBindings) > 0;
    if (directiveBindings.length > 0 || hasVariables || lang_1.isPresent(renderElementBinder.nestedProtoView)) {
      var directiveVariableBindings = createDirectiveVariableBindings(renderElementBinder, directiveBindings);
      protoElementInjector = element_injector_1.ProtoElementInjector.create(parentPeiWithDistance.protoElementInjector, binderIndex, directiveBindings, lang_1.isPresent(componentDirectiveBinding), parentPeiWithDistance.distance, directiveVariableBindings);
      protoElementInjector.attributes = renderElementBinder.readAttributes;
    }
    return protoElementInjector;
  }
  function _createElementBinder(protoView, boundElementIndex, renderElementBinder, protoElementInjector, componentDirectiveBinding, directiveBindings) {
    var parent = null;
    if (renderElementBinder.parentIndex !== -1) {
      parent = protoView.elementBinders[renderElementBinder.parentIndex];
    }
    var elBinder = protoView.bindElement(parent, renderElementBinder.distanceToParent, protoElementInjector, componentDirectiveBinding);
    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function(mappedName, varName) {
      protoView.protoLocals.set(mappedName, null);
    });
    return elBinder;
  }
  function createDirectiveVariableBindings(renderElementBinder, directiveBindings) {
    var directiveVariableBindings = new Map();
    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function(templateName, exportAs) {
      var dirIndex = _findDirectiveIndexByExportAs(renderElementBinder, directiveBindings, exportAs);
      directiveVariableBindings.set(templateName, dirIndex);
    });
    return directiveVariableBindings;
  }
  exports.createDirectiveVariableBindings = createDirectiveVariableBindings;
  function _findDirectiveIndexByExportAs(renderElementBinder, directiveBindings, exportAs) {
    var matchedDirectiveIndex = null;
    var matchedDirective;
    for (var i = 0; i < directiveBindings.length; ++i) {
      var directive = directiveBindings[i];
      if (_directiveExportAs(directive) == exportAs) {
        if (lang_1.isPresent(matchedDirective)) {
          throw new lang_1.BaseException("More than one directive have exportAs = '" + exportAs + "'. Directives: [" + matchedDirective.displayName + ", " + directive.displayName + "]");
        }
        matchedDirectiveIndex = i;
        matchedDirective = directive;
      }
    }
    if (lang_1.isBlank(matchedDirective) && exportAs !== "$implicit") {
      throw new lang_1.BaseException("Cannot find directive with exportAs = '" + exportAs + "'");
    }
    return matchedDirectiveIndex;
  }
  function _directiveExportAs(directive) {
    var directiveExportAs = directive.metadata.exportAs;
    if (lang_1.isBlank(directiveExportAs) && directive.metadata.type === api_1.RenderDirectiveMetadata.COMPONENT_TYPE) {
      return "$implicit";
    } else {
      return directiveExportAs;
    }
  }
  var RenderProtoViewWithIndex = (function() {
    function RenderProtoViewWithIndex(renderProtoView, index, parentIndex, boundElementIndex) {
      this.renderProtoView = renderProtoView;
      this.index = index;
      this.parentIndex = parentIndex;
      this.boundElementIndex = boundElementIndex;
    }
    return RenderProtoViewWithIndex;
  })();
  var ParentProtoElementInjectorWithDistance = (function() {
    function ParentProtoElementInjectorWithDistance(protoElementInjector, distance) {
      this.protoElementInjector = protoElementInjector;
      this.distance = distance;
    }
    return ParentProtoElementInjectorWithDistance;
  })();
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/api.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var EventBinding = (function() {
      function EventBinding(fullName, source) {
        this.fullName = fullName;
        this.source = source;
      }
      return EventBinding;
    })();
    exports.EventBinding = EventBinding;
    (function(PropertyBindingType) {
      PropertyBindingType[PropertyBindingType["PROPERTY"] = 0] = "PROPERTY";
      PropertyBindingType[PropertyBindingType["ATTRIBUTE"] = 1] = "ATTRIBUTE";
      PropertyBindingType[PropertyBindingType["CLASS"] = 2] = "CLASS";
      PropertyBindingType[PropertyBindingType["STYLE"] = 3] = "STYLE";
    })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
    var PropertyBindingType = exports.PropertyBindingType;
    var ElementPropertyBinding = (function() {
      function ElementPropertyBinding(type, astWithSource, property, unit) {
        if (unit === void 0) {
          unit = null;
        }
        this.type = type;
        this.astWithSource = astWithSource;
        this.property = property;
        this.unit = unit;
      }
      return ElementPropertyBinding;
    })();
    exports.ElementPropertyBinding = ElementPropertyBinding;
    var RenderElementBinder = (function() {
      function RenderElementBinder(_a) {
        var _b = _a === void 0 ? {} : _a,
            index = _b.index,
            parentIndex = _b.parentIndex,
            distanceToParent = _b.distanceToParent,
            directives = _b.directives,
            nestedProtoView = _b.nestedProtoView,
            propertyBindings = _b.propertyBindings,
            variableBindings = _b.variableBindings,
            eventBindings = _b.eventBindings,
            readAttributes = _b.readAttributes;
        this.index = index;
        this.parentIndex = parentIndex;
        this.distanceToParent = distanceToParent;
        this.directives = directives;
        this.nestedProtoView = nestedProtoView;
        this.propertyBindings = propertyBindings;
        this.variableBindings = variableBindings;
        this.eventBindings = eventBindings;
        this.readAttributes = readAttributes;
      }
      return RenderElementBinder;
    })();
    exports.RenderElementBinder = RenderElementBinder;
    var DirectiveBinder = (function() {
      function DirectiveBinder(_a) {
        var directiveIndex = _a.directiveIndex,
            propertyBindings = _a.propertyBindings,
            eventBindings = _a.eventBindings,
            hostPropertyBindings = _a.hostPropertyBindings;
        this.directiveIndex = directiveIndex;
        this.propertyBindings = propertyBindings;
        this.eventBindings = eventBindings;
        this.hostPropertyBindings = hostPropertyBindings;
      }
      return DirectiveBinder;
    })();
    exports.DirectiveBinder = DirectiveBinder;
    (function(ViewType) {
      ViewType[ViewType["HOST"] = 0] = "HOST";
      ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
      ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
    })(exports.ViewType || (exports.ViewType = {}));
    var ViewType = exports.ViewType;
    var ProtoViewDto = (function() {
      function ProtoViewDto(_a) {
        var render = _a.render,
            elementBinders = _a.elementBinders,
            variableBindings = _a.variableBindings,
            type = _a.type,
            textBindings = _a.textBindings,
            transitiveNgContentCount = _a.transitiveNgContentCount;
        this.render = render;
        this.elementBinders = elementBinders;
        this.variableBindings = variableBindings;
        this.type = type;
        this.textBindings = textBindings;
        this.transitiveNgContentCount = transitiveNgContentCount;
      }
      return ProtoViewDto;
    })();
    exports.ProtoViewDto = ProtoViewDto;
    var RenderDirectiveMetadata = (function() {
      function RenderDirectiveMetadata(_a) {
        var id = _a.id,
            selector = _a.selector,
            compileChildren = _a.compileChildren,
            events = _a.events,
            hostListeners = _a.hostListeners,
            hostProperties = _a.hostProperties,
            hostAttributes = _a.hostAttributes,
            hostActions = _a.hostActions,
            properties = _a.properties,
            readAttributes = _a.readAttributes,
            type = _a.type,
            callOnDestroy = _a.callOnDestroy,
            callOnChange = _a.callOnChange,
            callOnCheck = _a.callOnCheck,
            callOnInit = _a.callOnInit,
            callOnAllChangesDone = _a.callOnAllChangesDone,
            changeDetection = _a.changeDetection,
            exportAs = _a.exportAs;
        this.id = id;
        this.selector = selector;
        this.compileChildren = lang_1.isPresent(compileChildren) ? compileChildren : true;
        this.events = events;
        this.hostListeners = hostListeners;
        this.hostAttributes = hostAttributes;
        this.hostProperties = hostProperties;
        this.hostActions = hostActions;
        this.properties = properties;
        this.readAttributes = readAttributes;
        this.type = type;
        this.callOnDestroy = callOnDestroy;
        this.callOnChange = callOnChange;
        this.callOnCheck = callOnCheck;
        this.callOnInit = callOnInit;
        this.callOnAllChangesDone = callOnAllChangesDone;
        this.changeDetection = changeDetection;
        this.exportAs = exportAs;
      }
      Object.defineProperty(RenderDirectiveMetadata, "DIRECTIVE_TYPE", {
        get: function() {
          return 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RenderDirectiveMetadata, "COMPONENT_TYPE", {
        get: function() {
          return 1;
        },
        enumerable: true,
        configurable: true
      });
      RenderDirectiveMetadata.create = function(_a) {
        var id = _a.id,
            selector = _a.selector,
            compileChildren = _a.compileChildren,
            events = _a.events,
            host = _a.host,
            properties = _a.properties,
            readAttributes = _a.readAttributes,
            type = _a.type,
            callOnDestroy = _a.callOnDestroy,
            callOnChange = _a.callOnChange,
            callOnCheck = _a.callOnCheck,
            callOnInit = _a.callOnInit,
            callOnAllChangesDone = _a.callOnAllChangesDone,
            changeDetection = _a.changeDetection,
            exportAs = _a.exportAs;
        var hostListeners = new collection_1.Map();
        var hostProperties = new collection_1.Map();
        var hostAttributes = new collection_1.Map();
        var hostActions = new collection_1.Map();
        if (lang_1.isPresent(host)) {
          collection_1.MapWrapper.forEach(host, function(value, key) {
            var matches = lang_1.RegExpWrapper.firstMatch(RenderDirectiveMetadata._hostRegExp, key);
            if (lang_1.isBlank(matches)) {
              hostAttributes.set(key, value);
            } else if (lang_1.isPresent(matches[1])) {
              hostProperties.set(matches[1], value);
            } else if (lang_1.isPresent(matches[2])) {
              hostListeners.set(matches[2], value);
            } else if (lang_1.isPresent(matches[3])) {
              hostActions.set(matches[3], value);
            }
          });
        }
        return new RenderDirectiveMetadata({
          id: id,
          selector: selector,
          compileChildren: compileChildren,
          events: events,
          hostListeners: hostListeners,
          hostProperties: hostProperties,
          hostAttributes: hostAttributes,
          hostActions: hostActions,
          properties: properties,
          readAttributes: readAttributes,
          type: type,
          callOnDestroy: callOnDestroy,
          callOnChange: callOnChange,
          callOnCheck: callOnCheck,
          callOnInit: callOnInit,
          callOnAllChangesDone: callOnAllChangesDone,
          changeDetection: changeDetection,
          exportAs: exportAs
        });
      };
      RenderDirectiveMetadata._hostRegExp = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\))|(?:@(.+)))$/g;
      return RenderDirectiveMetadata;
    })();
    exports.RenderDirectiveMetadata = RenderDirectiveMetadata;
    var RenderProtoViewRef = (function() {
      function RenderProtoViewRef() {}
      return RenderProtoViewRef;
    })();
    exports.RenderProtoViewRef = RenderProtoViewRef;
    var RenderFragmentRef = (function() {
      function RenderFragmentRef() {}
      return RenderFragmentRef;
    })();
    exports.RenderFragmentRef = RenderFragmentRef;
    var RenderViewRef = (function() {
      function RenderViewRef() {}
      return RenderViewRef;
    })();
    exports.RenderViewRef = RenderViewRef;
    (function(ViewEncapsulation) {
      ViewEncapsulation[ViewEncapsulation["EMULATED"] = 0] = "EMULATED";
      ViewEncapsulation[ViewEncapsulation["NATIVE"] = 1] = "NATIVE";
      ViewEncapsulation[ViewEncapsulation["NONE"] = 2] = "NONE";
    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
    var ViewEncapsulation = exports.ViewEncapsulation;
    var ViewDefinition = (function() {
      function ViewDefinition(_a) {
        var _b = _a === void 0 ? {} : _a,
            componentId = _b.componentId,
            templateAbsUrl = _b.templateAbsUrl,
            template = _b.template,
            styleAbsUrls = _b.styleAbsUrls,
            styles = _b.styles,
            directives = _b.directives,
            encapsulation = _b.encapsulation;
        this.componentId = componentId;
        this.templateAbsUrl = templateAbsUrl;
        this.template = template;
        this.styleAbsUrls = styleAbsUrls;
        this.styles = styles;
        this.directives = directives;
        this.encapsulation = lang_1.isPresent(encapsulation) ? encapsulation : ViewEncapsulation.EMULATED;
      }
      return ViewDefinition;
    })();
    exports.ViewDefinition = ViewDefinition;
    var RenderProtoViewMergeMapping = (function() {
      function RenderProtoViewMergeMapping(mergedProtoViewRef, fragmentCount, mappedElementIndices, mappedElementCount, mappedTextIndices, hostElementIndicesByViewIndex, nestedViewCountByViewIndex) {
        this.mergedProtoViewRef = mergedProtoViewRef;
        this.fragmentCount = fragmentCount;
        this.mappedElementIndices = mappedElementIndices;
        this.mappedElementCount = mappedElementCount;
        this.mappedTextIndices = mappedTextIndices;
        this.hostElementIndicesByViewIndex = hostElementIndicesByViewIndex;
        this.nestedViewCountByViewIndex = nestedViewCountByViewIndex;
      }
      return RenderProtoViewMergeMapping;
    })();
    exports.RenderProtoViewMergeMapping = RenderProtoViewMergeMapping;
    var RenderCompiler = (function() {
      function RenderCompiler() {}
      RenderCompiler.prototype.compileHost = function(directiveMetadata) {
        return null;
      };
      RenderCompiler.prototype.compile = function(view) {
        return null;
      };
      RenderCompiler.prototype.mergeProtoViewsRecursively = function(protoViewRefs) {
        return null;
      };
      return RenderCompiler;
    })();
    exports.RenderCompiler = RenderCompiler;
    var RenderViewWithFragments = (function() {
      function RenderViewWithFragments(viewRef, fragmentRefs) {
        this.viewRef = viewRef;
        this.fragmentRefs = fragmentRefs;
      }
      return RenderViewWithFragments;
    })();
    exports.RenderViewWithFragments = RenderViewWithFragments;
    var Renderer = (function() {
      function Renderer() {}
      Renderer.prototype.createRootHostView = function(hostProtoViewRef, fragmentCount, hostElementSelector) {
        return null;
      };
      Renderer.prototype.createView = function(protoViewRef, fragmentCount) {
        return null;
      };
      Renderer.prototype.destroyView = function(viewRef) {};
      Renderer.prototype.attachFragmentAfterFragment = function(previousFragmentRef, fragmentRef) {};
      Renderer.prototype.attachFragmentAfterElement = function(elementRef, fragmentRef) {};
      Renderer.prototype.detachFragment = function(fragmentRef) {};
      Renderer.prototype.hydrateView = function(viewRef) {};
      Renderer.prototype.dehydrateView = function(viewRef) {};
      Renderer.prototype.getNativeElementSync = function(location) {
        return null;
      };
      Renderer.prototype.setElementProperty = function(location, propertyName, propertyValue) {};
      Renderer.prototype.setElementAttribute = function(location, attributeName, attributeValue) {};
      Renderer.prototype.setElementClass = function(location, className, isAdd) {};
      Renderer.prototype.setElementStyle = function(location, styleName, styleValue) {};
      Renderer.prototype.invokeElementMethod = function(location, methodName, args) {};
      Renderer.prototype.setText = function(viewRef, textNodeIndex, text) {};
      Renderer.prototype.setEventDispatcher = function(viewRef, dispatcher) {};
      return Renderer;
    })();
    exports.Renderer = Renderer;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ElementSchemaRegistry = (function() {
    function ElementSchemaRegistry() {}
    ElementSchemaRegistry.prototype.hasProperty = function(elm, propName) {
      return true;
    };
    ElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
      return propName;
    };
    return ElementSchemaRegistry;
  })();
  exports.ElementSchemaRegistry = ElementSchemaRegistry;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/schema/dom_element_schema_registry.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var element_schema_registry_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js");
  var DomElementSchemaRegistry = (function(_super) {
    __extends(DomElementSchemaRegistry, _super);
    function DomElementSchemaRegistry() {
      _super.apply(this, arguments);
    }
    DomElementSchemaRegistry.prototype.hasProperty = function(elm, propName) {
      var tagName = dom_adapter_1.DOM.tagName(elm);
      if (tagName.indexOf('-') !== -1) {
        return true;
      } else {
        return dom_adapter_1.DOM.hasProperty(elm, propName);
      }
    };
    DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
      var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
      return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
    };
    return DomElementSchemaRegistry;
  })(element_schema_registry_1.ElementSchemaRegistry);
  exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js", ["npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var dom_tokens_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js");
  var SharedStylesHost = (function() {
    function SharedStylesHost() {
      this._styles = [];
      this._stylesSet = new Set();
    }
    SharedStylesHost.prototype.addStyles = function(styles) {
      var _this = this;
      var additions = [];
      styles.forEach(function(style) {
        if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
          _this._stylesSet.add(style);
          _this._styles.push(style);
          additions.push(style);
        }
      });
      this.onStylesAdded(additions);
    };
    SharedStylesHost.prototype.onStylesAdded = function(additions) {};
    SharedStylesHost.prototype.getAllStyles = function() {
      return this._styles;
    };
    SharedStylesHost = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], SharedStylesHost);
    return SharedStylesHost;
  })();
  exports.SharedStylesHost = SharedStylesHost;
  var DomSharedStylesHost = (function(_super) {
    __extends(DomSharedStylesHost, _super);
    function DomSharedStylesHost(doc) {
      _super.call(this);
      this._hostNodes = new Set();
      this._hostNodes.add(doc.head);
    }
    DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
      for (var i = 0; i < styles.length; i++) {
        var style = styles[i];
        dom_adapter_1.DOM.appendChild(host, dom_adapter_1.DOM.createStyleElement(style));
      }
    };
    DomSharedStylesHost.prototype.addHost = function(hostNode) {
      this._addStylesToHost(this._styles, hostNode);
      this._hostNodes.add(hostNode);
    };
    DomSharedStylesHost.prototype.removeHost = function(hostNode) {
      collection_1.SetWrapper.delete(this._hostNodes, hostNode);
    };
    DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
      var _this = this;
      this._hostNodes.forEach(function(hostNode) {
        _this._addStylesToHost(additions, hostNode);
      });
    };
    DomSharedStylesHost = __decorate([di_1.Injectable(), __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), __metadata('design:paramtypes', [Object])], DomSharedStylesHost);
    return DomSharedStylesHost;
  })(SharedStylesHost);
  exports.DomSharedStylesHost = DomSharedStylesHost;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/profile/wtf_init.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function wtfInit() {}
  exports.wtfInit = wtfInit;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/platform_bindings.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/core/exception_handler.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var exception_handler_1 = require("npm:angular2@2.0.0-alpha.35/src/core/exception_handler.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  exports.EXCEPTION_BINDING = di_1.bind(exception_handler_1.ExceptionHandler).toFactory(function() {
    return new exception_handler_1.ExceptionHandler(dom_adapter_1.DOM, false);
  }, []);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/view.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_binder.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
  var interfaces_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js");
  var element_binder_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_binder.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_ref.js");
  var interfaces_2 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/interfaces.js");
  exports.DebugContext = interfaces_2.DebugContext;
  var AppProtoViewMergeMapping = (function() {
    function AppProtoViewMergeMapping(renderProtoViewMergeMapping) {
      this.renderProtoViewRef = renderProtoViewMergeMapping.mergedProtoViewRef;
      this.renderFragmentCount = renderProtoViewMergeMapping.fragmentCount;
      this.renderElementIndices = renderProtoViewMergeMapping.mappedElementIndices;
      this.renderInverseElementIndices = inverseIndexMapping(this.renderElementIndices, renderProtoViewMergeMapping.mappedElementCount);
      this.renderTextIndices = renderProtoViewMergeMapping.mappedTextIndices;
      this.hostElementIndicesByViewIndex = renderProtoViewMergeMapping.hostElementIndicesByViewIndex;
      this.nestedViewIndicesByElementIndex = inverseIndexMapping(this.hostElementIndicesByViewIndex, this.renderElementIndices.length);
      this.nestedViewCountByViewIndex = renderProtoViewMergeMapping.nestedViewCountByViewIndex;
    }
    return AppProtoViewMergeMapping;
  })();
  exports.AppProtoViewMergeMapping = AppProtoViewMergeMapping;
  function inverseIndexMapping(input, resultLength) {
    var result = collection_1.ListWrapper.createGrowableSize(resultLength);
    for (var i = 0; i < input.length; i++) {
      var value = input[i];
      if (lang_1.isPresent(value)) {
        result[input[i]] = i;
      }
    }
    return result;
  }
  var AppViewContainer = (function() {
    function AppViewContainer() {
      this.views = [];
    }
    return AppViewContainer;
  })();
  exports.AppViewContainer = AppViewContainer;
  var AppView = (function() {
    function AppView(renderer, proto, mainMergeMapping, viewOffset, elementOffset, textOffset, protoLocals, render, renderFragment) {
      this.renderer = renderer;
      this.proto = proto;
      this.mainMergeMapping = mainMergeMapping;
      this.viewOffset = viewOffset;
      this.elementOffset = elementOffset;
      this.textOffset = textOffset;
      this.render = render;
      this.renderFragment = renderFragment;
      this.views = null;
      this.elementInjectors = null;
      this.viewContainers = null;
      this.preBuiltObjects = null;
      this.changeDetector = null;
      this.context = null;
      this.ref = new view_ref_1.ViewRef(this);
      this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals));
    }
    AppView.prototype.init = function(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers) {
      this.changeDetector = changeDetector;
      this.elementInjectors = elementInjectors;
      this.rootElementInjectors = rootElementInjectors;
      this.preBuiltObjects = preBuiltObjects;
      this.views = views;
      this.elementRefs = elementRefs;
      this.viewContainers = viewContainers;
    };
    AppView.prototype.setLocal = function(contextName, value) {
      if (!this.hydrated())
        throw new lang_1.BaseException('Cannot set locals on dehydrated view.');
      if (!this.proto.variableBindings.has(contextName)) {
        return;
      }
      var templateName = this.proto.variableBindings.get(contextName);
      this.locals.set(templateName, value);
    };
    AppView.prototype.hydrated = function() {
      return lang_1.isPresent(this.context);
    };
    AppView.prototype.triggerEventHandlers = function(eventName, eventObj, boundElementIndex) {
      var locals = new collection_1.Map();
      locals.set('$event', eventObj);
      this.dispatchEvent(boundElementIndex, eventName, locals);
    };
    AppView.prototype.notifyOnBinding = function(b, currentValue) {
      if (b.isTextNode()) {
        this.renderer.setText(this.render, this.mainMergeMapping.renderTextIndices[b.elementIndex + this.textOffset], currentValue);
      } else {
        var elementRef = this.elementRefs[this.elementOffset + b.elementIndex];
        if (b.isElementProperty()) {
          this.renderer.setElementProperty(elementRef, b.propertyName, currentValue);
        } else if (b.isElementAttribute()) {
          this.renderer.setElementAttribute(elementRef, b.propertyName, currentValue);
        } else if (b.isElementClass()) {
          this.renderer.setElementClass(elementRef, b.propertyName, currentValue);
        } else if (b.isElementStyle()) {
          var unit = lang_1.isPresent(b.propertyUnit) ? b.propertyUnit : '';
          this.renderer.setElementStyle(elementRef, b.propertyName, "" + currentValue + unit);
        } else {
          throw new lang_1.BaseException('Unsupported directive record');
        }
      }
    };
    AppView.prototype.notifyOnAllChangesDone = function() {
      var eiCount = this.proto.elementBinders.length;
      var ei = this.elementInjectors;
      for (var i = eiCount - 1; i >= 0; i--) {
        if (lang_1.isPresent(ei[i + this.elementOffset]))
          ei[i + this.elementOffset].onAllChangesDone();
      }
    };
    AppView.prototype.getDirectiveFor = function(directive) {
      var elementInjector = this.elementInjectors[this.elementOffset + directive.elementIndex];
      return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
    };
    AppView.prototype.getNestedView = function(boundElementIndex) {
      var viewIndex = this.mainMergeMapping.nestedViewIndicesByElementIndex[boundElementIndex];
      return lang_1.isPresent(viewIndex) ? this.views[viewIndex] : null;
    };
    AppView.prototype.getHostElement = function() {
      var boundElementIndex = this.mainMergeMapping.hostElementIndicesByViewIndex[this.viewOffset];
      return lang_1.isPresent(boundElementIndex) ? this.elementRefs[boundElementIndex] : null;
    };
    AppView.prototype.getDebugContext = function(elementIndex, directiveIndex) {
      try {
        var offsettedIndex = this.elementOffset + elementIndex;
        var hasRefForIndex = offsettedIndex < this.elementRefs.length;
        var elementRef = hasRefForIndex ? this.elementRefs[this.elementOffset + elementIndex] : null;
        var host = this.getHostElement();
        var ei = hasRefForIndex ? this.elementInjectors[this.elementOffset + elementIndex] : null;
        var element = lang_1.isPresent(elementRef) ? elementRef.nativeElement : null;
        var componentElement = lang_1.isPresent(host) ? host.nativeElement : null;
        var directive = lang_1.isPresent(directiveIndex) ? this.getDirectiveFor(directiveIndex) : null;
        var injector = lang_1.isPresent(ei) ? ei.getInjector() : null;
        return new interfaces_1.DebugContext(element, componentElement, directive, this.context, _localsToStringMap(this.locals), injector);
      } catch (e) {
        return null;
      }
    };
    AppView.prototype.getDetectorFor = function(directive) {
      var childView = this.getNestedView(this.elementOffset + directive.elementIndex);
      return lang_1.isPresent(childView) ? childView.changeDetector : null;
    };
    AppView.prototype.invokeElementMethod = function(elementIndex, methodName, args) {
      this.renderer.invokeElementMethod(this.elementRefs[elementIndex], methodName, args);
    };
    AppView.prototype.dispatchRenderEvent = function(renderElementIndex, eventName, locals) {
      var elementRef = this.elementRefs[this.mainMergeMapping.renderInverseElementIndices[renderElementIndex]];
      var view = view_ref_1.internalView(elementRef.parentView);
      return view.dispatchEvent(elementRef.boundElementIndex, eventName, locals);
    };
    AppView.prototype.dispatchEvent = function(boundElementIndex, eventName, locals) {
      try {
        if (this.hydrated()) {
          return !this.changeDetector.handleEvent(eventName, boundElementIndex - this.elementOffset, new change_detection_1.Locals(this.locals, locals));
        } else {
          return true;
        }
      } catch (e) {
        var c = this.getDebugContext(boundElementIndex - this.elementOffset, null);
        var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector) : null;
        throw new EventEvaluationError(eventName, e, e.stack, context);
      }
    };
    return AppView;
  })();
  exports.AppView = AppView;
  function _localsToStringMap(locals) {
    var res = {};
    var c = locals;
    while (lang_1.isPresent(c)) {
      res = collection_1.StringMapWrapper.merge(res, collection_1.MapWrapper.toStringMap(c.current));
      c = c.parent;
    }
    return res;
  }
  var _Context = (function() {
    function _Context(element, componentElement, context, locals, injector) {
      this.element = element;
      this.componentElement = componentElement;
      this.context = context;
      this.locals = locals;
      this.injector = injector;
    }
    return _Context;
  })();
  var EventEvaluationError = (function(_super) {
    __extends(EventEvaluationError, _super);
    function EventEvaluationError(eventName, originalException, originalStack, context) {
      _super.call(this, "Error during evaluation of \"" + eventName + "\"", originalException, originalStack, context);
    }
    return EventEvaluationError;
  })(lang_1.BaseException);
  var AppProtoView = (function() {
    function AppProtoView(type, isEmbeddedFragment, render, protoChangeDetector, variableBindings, variableLocations, textBindingCount, pipes) {
      var _this = this;
      this.type = type;
      this.isEmbeddedFragment = isEmbeddedFragment;
      this.render = render;
      this.protoChangeDetector = protoChangeDetector;
      this.variableBindings = variableBindings;
      this.variableLocations = variableLocations;
      this.textBindingCount = textBindingCount;
      this.pipes = pipes;
      this.elementBinders = [];
      this.protoLocals = new collection_1.Map();
      this.ref = new view_ref_1.ProtoViewRef(this);
      if (lang_1.isPresent(variableBindings)) {
        collection_1.MapWrapper.forEach(variableBindings, function(templateName, _) {
          _this.protoLocals.set(templateName, null);
        });
      }
    }
    AppProtoView.prototype.bindElement = function(parent, distanceToParent, protoElementInjector, componentDirective) {
      if (componentDirective === void 0) {
        componentDirective = null;
      }
      var elBinder = new element_binder_1.ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective);
      this.elementBinders.push(elBinder);
      return elBinder;
    };
    return AppProtoView;
  })();
  exports.AppProtoView = AppProtoView;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_injector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/di/injector.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/view_container_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_lifecycle_reflector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/core/compiler/query_list.js", "npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/core/pipes/pipe_binding.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var injector_1 = require("npm:angular2@2.0.0-alpha.35/src/di/injector.js");
  var di_2 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/di.js");
  var avmModule = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_manager.js");
  var view_container_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/view_container_ref.js");
  var element_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_ref.js");
  var template_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/template_ref.js");
  var directives_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata/directives.js");
  var directive_lifecycle_reflector_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_lifecycle_reflector.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
  var query_list_1 = require("npm:angular2@2.0.0-alpha.35/src/core/compiler/query_list.js");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.35/src/reflection/reflection.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var pipe_binding_1 = require("npm:angular2@2.0.0-alpha.35/src/core/pipes/pipe_binding.js");
  var _staticKeys;
  var StaticKeys = (function() {
    function StaticKeys() {
      this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
      this.templateRefId = di_1.Key.get(template_ref_1.TemplateRef).id;
      this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
      this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
      this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
    }
    StaticKeys.instance = function() {
      if (lang_1.isBlank(_staticKeys))
        _staticKeys = new StaticKeys();
      return _staticKeys;
    };
    return StaticKeys;
  })();
  exports.StaticKeys = StaticKeys;
  var TreeNode = (function() {
    function TreeNode(parent) {
      this._head = null;
      this._tail = null;
      this._next = null;
      if (lang_1.isPresent(parent))
        parent.addChild(this);
    }
    TreeNode.prototype.addChild = function(child) {
      if (lang_1.isPresent(this._tail)) {
        this._tail._next = child;
        this._tail = child;
      } else {
        this._tail = this._head = child;
      }
      child._next = null;
      child._parent = this;
    };
    TreeNode.prototype.addChildAfter = function(child, prevSibling) {
      if (lang_1.isBlank(prevSibling)) {
        var prevHead = this._head;
        this._head = child;
        child._next = prevHead;
        if (lang_1.isBlank(this._tail))
          this._tail = child;
      } else if (lang_1.isBlank(prevSibling._next)) {
        this.addChild(child);
        return;
      } else {
        child._next = prevSibling._next;
        prevSibling._next = child;
      }
      child._parent = this;
    };
    TreeNode.prototype.remove = function() {
      if (lang_1.isBlank(this.parent))
        return;
      var nextSibling = this._next;
      var prevSibling = this._findPrev();
      if (lang_1.isBlank(prevSibling)) {
        this.parent._head = this._next;
      } else {
        prevSibling._next = this._next;
      }
      if (lang_1.isBlank(nextSibling)) {
        this._parent._tail = prevSibling;
      }
      this._parent = null;
      this._next = null;
    };
    TreeNode.prototype._findPrev = function() {
      var node = this.parent._head;
      if (node == this)
        return null;
      while (node._next !== this)
        node = node._next;
      return node;
    };
    Object.defineProperty(TreeNode.prototype, "parent", {
      get: function() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "children", {
      get: function() {
        var res = [];
        var child = this._head;
        while (child != null) {
          res.push(child);
          child = child._next;
        }
        return res;
      },
      enumerable: true,
      configurable: true
    });
    return TreeNode;
  })();
  exports.TreeNode = TreeNode;
  var DirectiveDependency = (function(_super) {
    __extends(DirectiveDependency, _super);
    function DirectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties, attributeName, queryDecorator) {
      _super.call(this, key, optional, lowerBoundVisibility, upperBoundVisibility, properties);
      this.attributeName = attributeName;
      this.queryDecorator = queryDecorator;
      this._verify();
    }
    DirectiveDependency.prototype._verify = function() {
      var count = 0;
      if (lang_1.isPresent(this.queryDecorator))
        count++;
      if (lang_1.isPresent(this.attributeName))
        count++;
      if (count > 1)
        throw new lang_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
    };
    DirectiveDependency.createFrom = function(d) {
      return new DirectiveDependency(d.key, d.optional, d.lowerBoundVisibility, d.upperBoundVisibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
    };
    DirectiveDependency._attributeName = function(properties) {
      var p = collection_1.ListWrapper.find(properties, function(p) {
        return p instanceof di_2.AttributeMetadata;
      });
      return lang_1.isPresent(p) ? p.attributeName : null;
    };
    DirectiveDependency._query = function(properties) {
      return collection_1.ListWrapper.find(properties, function(p) {
        return p instanceof di_2.QueryMetadata;
      });
    };
    return DirectiveDependency;
  })(di_1.Dependency);
  exports.DirectiveDependency = DirectiveDependency;
  var DirectiveBinding = (function(_super) {
    __extends(DirectiveBinding, _super);
    function DirectiveBinding(key, factory, dependencies, resolvedBindings, resolvedViewBindings, metadata) {
      _super.call(this, key, factory, dependencies);
      this.resolvedBindings = resolvedBindings;
      this.resolvedViewBindings = resolvedViewBindings;
      this.metadata = metadata;
    }
    Object.defineProperty(DirectiveBinding.prototype, "callOnDestroy", {
      get: function() {
        return this.metadata.callOnDestroy;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "callOnChange", {
      get: function() {
        return this.metadata.callOnChange;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "callOnAllChangesDone", {
      get: function() {
        return this.metadata.callOnAllChangesDone;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "displayName", {
      get: function() {
        return this.key.displayName;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "eventEmitters", {
      get: function() {
        return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.events) ? this.metadata.events : [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "hostActions", {
      get: function() {
        return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.hostActions) ? this.metadata.hostActions : new Map();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "changeDetection", {
      get: function() {
        return this.metadata.changeDetection;
      },
      enumerable: true,
      configurable: true
    });
    DirectiveBinding.createFromBinding = function(binding, ann) {
      if (lang_1.isBlank(ann)) {
        ann = new directives_1.DirectiveMetadata();
      }
      var rb = binding.resolve();
      var deps = collection_1.ListWrapper.map(rb.dependencies, DirectiveDependency.createFrom);
      var resolvedBindings = lang_1.isPresent(ann.bindings) ? di_1.Injector.resolve(ann.bindings) : [];
      var resolvedViewBindings = ann instanceof directives_1.ComponentMetadata && lang_1.isPresent(ann.viewBindings) ? di_1.Injector.resolve(ann.viewBindings) : [];
      var metadata = api_1.RenderDirectiveMetadata.create({
        id: lang_1.stringify(rb.key.token),
        type: ann instanceof directives_1.ComponentMetadata ? api_1.RenderDirectiveMetadata.COMPONENT_TYPE : api_1.RenderDirectiveMetadata.DIRECTIVE_TYPE,
        selector: ann.selector,
        compileChildren: ann.compileChildren,
        events: ann.events,
        host: lang_1.isPresent(ann.host) ? collection_1.MapWrapper.createFromStringMap(ann.host) : null,
        properties: ann.properties,
        readAttributes: DirectiveBinding._readAttributes(deps),
        callOnDestroy: directive_lifecycle_reflector_1.hasLifecycleHook(directives_1.LifecycleEvent.onDestroy, rb.key.token, ann),
        callOnChange: directive_lifecycle_reflector_1.hasLifecycleHook(directives_1.LifecycleEvent.onChange, rb.key.token, ann),
        callOnCheck: directive_lifecycle_reflector_1.hasLifecycleHook(directives_1.LifecycleEvent.onCheck, rb.key.token, ann),
        callOnInit: directive_lifecycle_reflector_1.hasLifecycleHook(directives_1.LifecycleEvent.onInit, rb.key.token, ann),
        callOnAllChangesDone: directive_lifecycle_reflector_1.hasLifecycleHook(directives_1.LifecycleEvent.onAllChangesDone, rb.key.token, ann),
        changeDetection: ann instanceof directives_1.ComponentMetadata ? ann.changeDetection : null,
        exportAs: ann.exportAs
      });
      return new DirectiveBinding(rb.key, rb.factory, deps, resolvedBindings, resolvedViewBindings, metadata);
    };
    DirectiveBinding._readAttributes = function(deps) {
      var readAttributes = [];
      collection_1.ListWrapper.forEach(deps, function(dep) {
        if (lang_1.isPresent(dep.attributeName)) {
          readAttributes.push(dep.attributeName);
        }
      });
      return readAttributes;
    };
    DirectiveBinding.createFromType = function(type, annotation) {
      var binding = new di_1.Binding(type, {toClass: type});
      return DirectiveBinding.createFromBinding(binding, annotation);
    };
    return DirectiveBinding;
  })(di_1.ResolvedBinding);
  exports.DirectiveBinding = DirectiveBinding;
  var PreBuiltObjects = (function() {
    function PreBuiltObjects(viewManager, view, elementRef, templateRef) {
      this.viewManager = viewManager;
      this.view = view;
      this.elementRef = elementRef;
      this.templateRef = templateRef;
    }
    return PreBuiltObjects;
  })();
  exports.PreBuiltObjects = PreBuiltObjects;
  var EventEmitterAccessor = (function() {
    function EventEmitterAccessor(eventName, getter) {
      this.eventName = eventName;
      this.getter = getter;
    }
    EventEmitterAccessor.prototype.subscribe = function(view, boundElementIndex, directive) {
      var _this = this;
      var eventEmitter = this.getter(directive);
      return async_1.ObservableWrapper.subscribe(eventEmitter, function(eventObj) {
        return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex);
      });
    };
    return EventEmitterAccessor;
  })();
  exports.EventEmitterAccessor = EventEmitterAccessor;
  var HostActionAccessor = (function() {
    function HostActionAccessor(methodName, getter) {
      this.methodName = methodName;
      this.getter = getter;
    }
    HostActionAccessor.prototype.subscribe = function(view, boundElementIndex, directive) {
      var _this = this;
      var eventEmitter = this.getter(directive);
      return async_1.ObservableWrapper.subscribe(eventEmitter, function(actionArgs) {
        return view.invokeElementMethod(boundElementIndex, _this.methodName, actionArgs);
      });
    };
    return HostActionAccessor;
  })();
  exports.HostActionAccessor = HostActionAccessor;
  function _createEventEmitterAccessors(bwv) {
    var binding = bwv.binding;
    if (!(binding instanceof DirectiveBinding))
      return [];
    var db = binding;
    return collection_1.ListWrapper.map(db.eventEmitters, function(eventConfig) {
      var fieldName;
      var eventName;
      var colonIdx = eventConfig.indexOf(':');
      if (colonIdx > -1) {
        fieldName = lang_1.StringWrapper.substring(eventConfig, 0, colonIdx).trim();
        eventName = lang_1.StringWrapper.substring(eventConfig, colonIdx + 1).trim();
      } else {
        fieldName = eventName = eventConfig;
      }
      return new EventEmitterAccessor(eventName, reflection_1.reflector.getter(fieldName));
    });
  }
  function _createHostActionAccessors(bwv) {
    var binding = bwv.binding;
    if (!(binding instanceof DirectiveBinding))
      return [];
    var res = [];
    var db = binding;
    collection_1.MapWrapper.forEach(db.hostActions, function(actionExpression, actionName) {
      res.push(new HostActionAccessor(actionExpression, reflection_1.reflector.getter(actionName)));
    });
    return res;
  }
  var ProtoElementInjector = (function() {
    function ProtoElementInjector(parent, index, bwv, distanceToParent, _firstBindingIsComponent, directiveVariableBindings) {
      this.parent = parent;
      this.index = index;
      this.distanceToParent = distanceToParent;
      this._firstBindingIsComponent = _firstBindingIsComponent;
      this.directiveVariableBindings = directiveVariableBindings;
      var length = bwv.length;
      this.protoInjector = new di_1.ProtoInjector(bwv);
      this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
      this.hostActionAccessors = collection_1.ListWrapper.createFixedSize(length);
      for (var i = 0; i < length; ++i) {
        this.eventEmitterAccessors[i] = _createEventEmitterAccessors(bwv[i]);
        this.hostActionAccessors[i] = _createHostActionAccessors(bwv[i]);
      }
    }
    ProtoElementInjector.create = function(parent, index, bindings, firstBindingIsComponent, distanceToParent, directiveVariableBindings) {
      var bd = [];
      ProtoElementInjector._createDirectiveBindingWithVisibility(bindings, bd, firstBindingIsComponent);
      if (firstBindingIsComponent) {
        ProtoElementInjector._createViewBindingsWithVisibility(bindings, bd);
      }
      ProtoElementInjector._createBindingsWithVisibility(bindings, bd, firstBindingIsComponent);
      return new ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent, directiveVariableBindings);
    };
    ProtoElementInjector._createDirectiveBindingWithVisibility = function(dirBindings, bd, firstBindingIsComponent) {
      collection_1.ListWrapper.forEach(dirBindings, function(dirBinding) {
        bd.push(ProtoElementInjector._createBindingWithVisibility(firstBindingIsComponent, dirBinding, dirBindings, dirBinding));
      });
    };
    ProtoElementInjector._createBindingsWithVisibility = function(dirBindings, bd, firstBindingIsComponent) {
      collection_1.ListWrapper.forEach(dirBindings, function(dirBinding) {
        collection_1.ListWrapper.forEach(dirBinding.resolvedBindings, function(b) {
          bd.push(ProtoElementInjector._createBindingWithVisibility(firstBindingIsComponent, dirBinding, dirBindings, b));
        });
      });
    };
    ProtoElementInjector._createBindingWithVisibility = function(firstBindingIsComponent, dirBinding, dirBindings, binding) {
      var isComponent = firstBindingIsComponent && dirBindings[0] === dirBinding;
      return new injector_1.BindingWithVisibility(binding, isComponent ? di_1.Visibility.PublicAndPrivate : di_1.Visibility.Public);
    };
    ProtoElementInjector._createViewBindingsWithVisibility = function(bindings, bd) {
      var db = bindings[0];
      collection_1.ListWrapper.forEach(db.resolvedViewBindings, function(b) {
        return bd.push(new injector_1.BindingWithVisibility(b, di_1.Visibility.Private));
      });
    };
    ProtoElementInjector.prototype.instantiate = function(parent) {
      return new ElementInjector(this, parent);
    };
    ProtoElementInjector.prototype.directParent = function() {
      return this.distanceToParent < 2 ? this.parent : null;
    };
    Object.defineProperty(ProtoElementInjector.prototype, "hasBindings", {
      get: function() {
        return this.eventEmitterAccessors.length > 0;
      },
      enumerable: true,
      configurable: true
    });
    ProtoElementInjector.prototype.getBindingAtIndex = function(index) {
      return this.protoInjector.getBindingAtIndex(index);
    };
    return ProtoElementInjector;
  })();
  exports.ProtoElementInjector = ProtoElementInjector;
  var _Context = (function() {
    function _Context(element, componentElement, injector) {
      this.element = element;
      this.componentElement = componentElement;
      this.injector = injector;
    }
    return _Context;
  })();
  var ElementInjector = (function(_super) {
    __extends(ElementInjector, _super);
    function ElementInjector(_proto, parent) {
      var _this = this;
      _super.call(this, parent);
      this._proto = _proto;
      this._preBuiltObjects = null;
      this._injector = new di_1.Injector(this._proto.protoInjector, null, this, function() {
        return _this._debugContext();
      });
      var injectorStrategy = this._injector.internalStrategy;
      this._strategy = injectorStrategy instanceof injector_1.InjectorInlineStrategy ? new ElementInjectorInlineStrategy(injectorStrategy, this) : new ElementInjectorDynamicStrategy(injectorStrategy, this);
      this.hydrated = false;
      this._buildQueries();
      this._addParentQueries();
    }
    ElementInjector.prototype.dehydrate = function() {
      this.hydrated = false;
      this._host = null;
      this._preBuiltObjects = null;
      this._strategy.callOnDestroy();
      this._strategy.dehydrate();
    };
    ElementInjector.prototype.onAllChangesDone = function() {
      if (lang_1.isPresent(this._query0) && this._query0.originator === this) {
        this._query0.list.fireCallbacks();
      }
      if (lang_1.isPresent(this._query1) && this._query1.originator === this) {
        this._query1.list.fireCallbacks();
      }
      if (lang_1.isPresent(this._query2) && this._query2.originator === this) {
        this._query2.list.fireCallbacks();
      }
    };
    ElementInjector.prototype.hydrate = function(imperativelyCreatedInjector, host, preBuiltObjects) {
      this._host = host;
      this._preBuiltObjects = preBuiltObjects;
      if (lang_1.isPresent(host)) {
        this._addViewQueries(host);
      }
      this._reattachInjectors(imperativelyCreatedInjector);
      this._strategy.hydrate();
      this._addDirectivesToQueries();
      this._addVarBindingsToQueries();
      this.hydrated = true;
      this._updateViewQueries();
    };
    ElementInjector.prototype._updateViewQueries = function() {
      if (lang_1.isPresent(this._query0) && this._query0.isViewQuery) {
        this._query0.update();
      }
      if (lang_1.isPresent(this._query1) && this._query1.isViewQuery) {
        this._query1.update();
      }
      if (lang_1.isPresent(this._query2) && this._query2.isViewQuery) {
        this._query2.update();
      }
    };
    ElementInjector.prototype._debugContext = function() {
      var p = this._preBuiltObjects;
      var index = p.elementRef.boundElementIndex - p.view.elementOffset;
      var c = this._preBuiltObjects.view.getDebugContext(index, null);
      return lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.injector) : null;
    };
    ElementInjector.prototype._reattachInjectors = function(imperativelyCreatedInjector) {
      if (lang_1.isPresent(this._parent)) {
        if (lang_1.isPresent(imperativelyCreatedInjector)) {
          this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
          this._reattachInjector(imperativelyCreatedInjector, this._parent._injector, false);
        } else {
          this._reattachInjector(this._injector, this._parent._injector, false);
        }
      } else if (lang_1.isPresent(this._host)) {
        if (lang_1.isPresent(imperativelyCreatedInjector)) {
          this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
          this._reattachInjector(imperativelyCreatedInjector, this._host._injector, true);
        } else {
          this._reattachInjector(this._injector, this._host._injector, true);
        }
      } else {
        if (lang_1.isPresent(imperativelyCreatedInjector)) {
          this._reattachInjector(this._injector, imperativelyCreatedInjector, true);
        }
      }
    };
    ElementInjector.prototype._reattachInjector = function(injector, parentInjector, isBoundary) {
      injector.internalStrategy.attach(parentInjector, isBoundary);
    };
    ElementInjector.prototype.hasVariableBinding = function(name) {
      var vb = this._proto.directiveVariableBindings;
      return lang_1.isPresent(vb) && vb.has(name);
    };
    ElementInjector.prototype.getVariableBinding = function(name) {
      var index = this._proto.directiveVariableBindings.get(name);
      return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
    };
    ElementInjector.prototype.get = function(token) {
      return this._injector.get(token);
    };
    ElementInjector.prototype.hasDirective = function(type) {
      return lang_1.isPresent(this._injector.getOptional(type));
    };
    ElementInjector.prototype.getEventEmitterAccessors = function() {
      return this._proto.eventEmitterAccessors;
    };
    ElementInjector.prototype.getHostActionAccessors = function() {
      return this._proto.hostActionAccessors;
    };
    ElementInjector.prototype.getDirectiveVariableBindings = function() {
      return this._proto.directiveVariableBindings;
    };
    ElementInjector.prototype.getComponent = function() {
      return this._strategy.getComponent();
    };
    ElementInjector.prototype.getInjector = function() {
      return this._injector;
    };
    ElementInjector.prototype.getElementRef = function() {
      return this._preBuiltObjects.elementRef;
    };
    ElementInjector.prototype.getViewContainerRef = function() {
      return new view_container_ref_1.ViewContainerRef(this._preBuiltObjects.viewManager, this.getElementRef());
    };
    ElementInjector.prototype.directParent = function() {
      return this._proto.distanceToParent < 2 ? this.parent : null;
    };
    ElementInjector.prototype.isComponentKey = function(key) {
      return this._strategy.isComponentKey(key);
    };
    ElementInjector.prototype.getDependency = function(injector, binding, dep) {
      var key = dep.key;
      if (binding instanceof DirectiveBinding) {
        var dirDep = dep;
        var dirBin = binding;
        var staticKeys = StaticKeys.instance();
        if (key.id === staticKeys.viewManagerId)
          return this._preBuiltObjects.viewManager;
        if (lang_1.isPresent(dirDep.attributeName))
          return this._buildAttribute(dirDep);
        if (lang_1.isPresent(dirDep.queryDecorator))
          return this._findQuery(dirDep.queryDecorator).list;
        if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
          if (dirBin.metadata.type === api_1.RenderDirectiveMetadata.COMPONENT_TYPE) {
            var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
            return componentView.changeDetector.ref;
          } else {
            return this._preBuiltObjects.view.changeDetector.ref;
          }
        }
        if (dirDep.key.id === StaticKeys.instance().elementRefId) {
          return this.getElementRef();
        }
        if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
          return this.getViewContainerRef();
        }
        if (dirDep.key.id === StaticKeys.instance().templateRefId) {
          if (lang_1.isBlank(this._preBuiltObjects.templateRef)) {
            if (dirDep.optional) {
              return null;
            }
            throw new di_1.NoBindingError(null, dirDep.key);
          }
          return this._preBuiltObjects.templateRef;
        }
      } else if (binding instanceof pipe_binding_1.PipeBinding) {
        if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
          var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
          return componentView.changeDetector.ref;
        }
      }
      return di_1.UNDEFINED;
    };
    ElementInjector.prototype._buildAttribute = function(dep) {
      var attributes = this._proto.attributes;
      if (lang_1.isPresent(attributes) && attributes.has(dep.attributeName)) {
        return attributes.get(dep.attributeName);
      } else {
        return null;
      }
    };
    ElementInjector.prototype._buildQueriesForDeps = function(deps) {
      for (var i = 0; i < deps.length; i++) {
        var dep = deps[i];
        if (lang_1.isPresent(dep.queryDecorator)) {
          this._createQueryRef(dep.queryDecorator);
        }
      }
    };
    ElementInjector.prototype._addViewQueries = function(host) {
      this._addViewQuery(host._query0, host);
      this._addViewQuery(host._query1, host);
      this._addViewQuery(host._query2, host);
    };
    ElementInjector.prototype._addViewQuery = function(queryRef, host) {
      if (lang_1.isBlank(queryRef) || !queryRef.isViewQuery || this._hasQuery(queryRef))
        return;
      if (host._query0.originator == host) {
        if (!queryRef.query.descendants && lang_1.isPresent(this.parent))
          return;
        this._assignQueryRef(queryRef);
      }
    };
    ElementInjector.prototype._addVarBindingsToQueries = function() {
      this._addVarBindingsToQuery(this._query0);
      this._addVarBindingsToQuery(this._query1);
      this._addVarBindingsToQuery(this._query2);
    };
    ElementInjector.prototype._addDirectivesToQueries = function() {
      this._addDirectivesToQuery(this._query0);
      this._addDirectivesToQuery(this._query1);
      this._addDirectivesToQuery(this._query2);
    };
    ElementInjector.prototype._addVarBindingsToQuery = function(queryRef) {
      if (lang_1.isBlank(queryRef) || !queryRef.query.isVarBindingQuery)
        return;
      var vb = queryRef.query.varBindings;
      for (var i = 0; i < vb.length; ++i) {
        if (this.hasVariableBinding(vb[i])) {
          queryRef.list.add(this.getVariableBinding(vb[i]));
        }
      }
    };
    ElementInjector.prototype._addDirectivesToQuery = function(queryRef) {
      if (lang_1.isBlank(queryRef) || queryRef.query.isVarBindingQuery)
        return;
      if (queryRef.isViewQuery && queryRef.originator == this)
        return;
      var matched = [];
      this.addDirectivesMatchingQuery(queryRef.query, matched);
      matched.forEach(function(s) {
        return queryRef.list.add(s);
      });
    };
    ElementInjector.prototype._createQueryRef = function(query) {
      var queryList = new query_list_1.QueryList();
      if (lang_1.isBlank(this._query0)) {
        this._query0 = new QueryRef(query, queryList, this);
      } else if (lang_1.isBlank(this._query1)) {
        this._query1 = new QueryRef(query, queryList, this);
      } else if (lang_1.isBlank(this._query2)) {
        this._query2 = new QueryRef(query, queryList, this);
      } else {
        throw new QueryError();
      }
    };
    ElementInjector.prototype.addDirectivesMatchingQuery = function(query, list) {
      var templateRef = this._preBuiltObjects.templateRef;
      if (query.selector === template_ref_1.TemplateRef && lang_1.isPresent(templateRef)) {
        list.push(templateRef);
      }
      this._strategy.addDirectivesMatchingQuery(query, list);
    };
    ElementInjector.prototype._buildQueries = function() {
      if (lang_1.isPresent(this._proto)) {
        this._strategy.buildQueries();
      }
    };
    ElementInjector.prototype._findQuery = function(query) {
      if (lang_1.isPresent(this._query0) && this._query0.query === query) {
        return this._query0;
      }
      if (lang_1.isPresent(this._query1) && this._query1.query === query) {
        return this._query1;
      }
      if (lang_1.isPresent(this._query2) && this._query2.query === query) {
        return this._query2;
      }
      throw new lang_1.BaseException("Cannot find query for directive " + query + ".");
    };
    ElementInjector.prototype._hasQuery = function(query) {
      return this._query0 == query || this._query1 == query || this._query2 == query;
    };
    ElementInjector.prototype.link = function(parent) {
      parent.addChild(this);
      this._addParentQueries();
    };
    ElementInjector.prototype.linkAfter = function(parent, prevSibling) {
      parent.addChildAfter(this, prevSibling);
      this._addParentQueries();
    };
    ElementInjector.prototype.unlink = function() {
      var parent = this.parent;
      this.remove();
      this._removeParentQueries(parent);
    };
    ElementInjector.prototype._addParentQueries = function() {
      if (lang_1.isBlank(this.parent))
        return;
      this._addParentQuery(this.parent._query0);
      this._addParentQuery(this.parent._query1);
      this._addParentQuery(this.parent._query2);
    };
    ElementInjector.prototype._addParentQuery = function(query) {
      if (lang_1.isPresent(query) && !this._hasQuery(query)) {
        this._addQueryToTree(query);
        if (this.hydrated)
          query.update();
      }
    };
    ElementInjector.prototype._removeParentQueries = function(parent) {
      this._removeParentQuery(parent._query0);
      this._removeParentQuery(parent._query1);
      this._removeParentQuery(parent._query2);
    };
    ElementInjector.prototype._removeParentQuery = function(query) {
      if (lang_1.isPresent(query)) {
        this._pruneQueryFromTree(query);
        query.update();
      }
    };
    ElementInjector.prototype._pruneQueryFromTree = function(query) {
      this._removeQueryRef(query);
      var child = this._head;
      while (lang_1.isPresent(child)) {
        child._pruneQueryFromTree(query);
        child = child._next;
      }
    };
    ElementInjector.prototype._addQueryToTree = function(queryRef) {
      if (queryRef.query.descendants == false) {
        if (this == queryRef.originator) {
          this._addQueryToTreeSelfAndRecurse(queryRef);
        } else if (this.parent == queryRef.originator) {
          this._assignQueryRef(queryRef);
        }
      } else {
        this._addQueryToTreeSelfAndRecurse(queryRef);
      }
    };
    ElementInjector.prototype._addQueryToTreeSelfAndRecurse = function(queryRef) {
      this._assignQueryRef(queryRef);
      var child = this._head;
      while (lang_1.isPresent(child)) {
        child._addQueryToTree(queryRef);
        child = child._next;
      }
    };
    ElementInjector.prototype._assignQueryRef = function(query) {
      if (lang_1.isBlank(this._query0)) {
        this._query0 = query;
        return;
      } else if (lang_1.isBlank(this._query1)) {
        this._query1 = query;
        return;
      } else if (lang_1.isBlank(this._query2)) {
        this._query2 = query;
        return;
      }
      throw new QueryError();
    };
    ElementInjector.prototype._removeQueryRef = function(query) {
      if (this._query0 == query)
        this._query0 = null;
      if (this._query1 == query)
        this._query1 = null;
      if (this._query2 == query)
        this._query2 = null;
    };
    ElementInjector.prototype.getDirectiveAtIndex = function(index) {
      return this._injector.getAt(index);
    };
    ElementInjector.prototype.hasInstances = function() {
      return this._proto.hasBindings && this.hydrated;
    };
    ElementInjector.prototype.getHost = function() {
      return this._host;
    };
    ElementInjector.prototype.getBoundElementIndex = function() {
      return this._proto.index;
    };
    ElementInjector.prototype.getRootViewInjectors = function() {
      var view = this._preBuiltObjects.view;
      return view.getNestedView(view.elementOffset + this.getBoundElementIndex()).rootElementInjectors;
    };
    return ElementInjector;
  })(TreeNode);
  exports.ElementInjector = ElementInjector;
  var ElementInjectorInlineStrategy = (function() {
    function ElementInjectorInlineStrategy(injectorStrategy, _ei) {
      this.injectorStrategy = injectorStrategy;
      this._ei = _ei;
    }
    ElementInjectorInlineStrategy.prototype.hydrate = function() {
      var i = this.injectorStrategy;
      var p = i.protoStrategy;
      i.resetConstructionCounter();
      if (p.binding0 instanceof DirectiveBinding && lang_1.isPresent(p.keyId0) && i.obj0 === di_1.UNDEFINED)
        i.obj0 = i.instantiateBinding(p.binding0, p.visibility0);
      if (p.binding1 instanceof DirectiveBinding && lang_1.isPresent(p.keyId1) && i.obj1 === di_1.UNDEFINED)
        i.obj1 = i.instantiateBinding(p.binding1, p.visibility1);
      if (p.binding2 instanceof DirectiveBinding && lang_1.isPresent(p.keyId2) && i.obj2 === di_1.UNDEFINED)
        i.obj2 = i.instantiateBinding(p.binding2, p.visibility2);
      if (p.binding3 instanceof DirectiveBinding && lang_1.isPresent(p.keyId3) && i.obj3 === di_1.UNDEFINED)
        i.obj3 = i.instantiateBinding(p.binding3, p.visibility3);
      if (p.binding4 instanceof DirectiveBinding && lang_1.isPresent(p.keyId4) && i.obj4 === di_1.UNDEFINED)
        i.obj4 = i.instantiateBinding(p.binding4, p.visibility4);
      if (p.binding5 instanceof DirectiveBinding && lang_1.isPresent(p.keyId5) && i.obj5 === di_1.UNDEFINED)
        i.obj5 = i.instantiateBinding(p.binding5, p.visibility5);
      if (p.binding6 instanceof DirectiveBinding && lang_1.isPresent(p.keyId6) && i.obj6 === di_1.UNDEFINED)
        i.obj6 = i.instantiateBinding(p.binding6, p.visibility6);
      if (p.binding7 instanceof DirectiveBinding && lang_1.isPresent(p.keyId7) && i.obj7 === di_1.UNDEFINED)
        i.obj7 = i.instantiateBinding(p.binding7, p.visibility7);
      if (p.binding8 instanceof DirectiveBinding && lang_1.isPresent(p.keyId8) && i.obj8 === di_1.UNDEFINED)
        i.obj8 = i.instantiateBinding(p.binding8, p.visibility8);
      if (p.binding9 instanceof DirectiveBinding && lang_1.isPresent(p.keyId9) && i.obj9 === di_1.UNDEFINED)
        i.obj9 = i.instantiateBinding(p.binding9, p.visibility9);
    };
    ElementInjectorInlineStrategy.prototype.dehydrate = function() {
      var i = this.injectorStrategy;
      i.obj0 = di_1.UNDEFINED;
      i.obj1 = di_1.UNDEFINED;
      i.obj2 = di_1.UNDEFINED;
      i.obj3 = di_1.UNDEFINED;
      i.obj4 = di_1.UNDEFINED;
      i.obj5 = di_1.UNDEFINED;
      i.obj6 = di_1.UNDEFINED;
      i.obj7 = di_1.UNDEFINED;
      i.obj8 = di_1.UNDEFINED;
      i.obj9 = di_1.UNDEFINED;
    };
    ElementInjectorInlineStrategy.prototype.callOnDestroy = function() {
      var i = this.injectorStrategy;
      var p = i.protoStrategy;
      if (p.binding0 instanceof DirectiveBinding && p.binding0.callOnDestroy) {
        i.obj0.onDestroy();
      }
      if (p.binding1 instanceof DirectiveBinding && p.binding1.callOnDestroy) {
        i.obj1.onDestroy();
      }
      if (p.binding2 instanceof DirectiveBinding && p.binding2.callOnDestroy) {
        i.obj2.onDestroy();
      }
      if (p.binding3 instanceof DirectiveBinding && p.binding3.callOnDestroy) {
        i.obj3.onDestroy();
      }
      if (p.binding4 instanceof DirectiveBinding && p.binding4.callOnDestroy) {
        i.obj4.onDestroy();
      }
      if (p.binding5 instanceof DirectiveBinding && p.binding5.callOnDestroy) {
        i.obj5.onDestroy();
      }
      if (p.binding6 instanceof DirectiveBinding && p.binding6.callOnDestroy) {
        i.obj6.onDestroy();
      }
      if (p.binding7 instanceof DirectiveBinding && p.binding7.callOnDestroy) {
        i.obj7.onDestroy();
      }
      if (p.binding8 instanceof DirectiveBinding && p.binding8.callOnDestroy) {
        i.obj8.onDestroy();
      }
      if (p.binding9 instanceof DirectiveBinding && p.binding9.callOnDestroy) {
        i.obj9.onDestroy();
      }
    };
    ElementInjectorInlineStrategy.prototype.getComponent = function() {
      return this.injectorStrategy.obj0;
    };
    ElementInjectorInlineStrategy.prototype.isComponentKey = function(key) {
      return this._ei._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === this.injectorStrategy.protoStrategy.keyId0;
    };
    ElementInjectorInlineStrategy.prototype.buildQueries = function() {
      var p = this.injectorStrategy.protoStrategy;
      if (p.binding0 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding0.dependencies);
      }
      if (p.binding1 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding1.dependencies);
      }
      if (p.binding2 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding2.dependencies);
      }
      if (p.binding3 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding3.dependencies);
      }
      if (p.binding4 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding4.dependencies);
      }
      if (p.binding5 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding5.dependencies);
      }
      if (p.binding6 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding6.dependencies);
      }
      if (p.binding7 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding7.dependencies);
      }
      if (p.binding8 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding8.dependencies);
      }
      if (p.binding9 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p.binding9.dependencies);
      }
    };
    ElementInjectorInlineStrategy.prototype.addDirectivesMatchingQuery = function(query, list) {
      var i = this.injectorStrategy;
      var p = i.protoStrategy;
      if (lang_1.isPresent(p.binding0) && p.binding0.key.token === query.selector) {
        if (i.obj0 === di_1.UNDEFINED)
          i.obj0 = i.instantiateBinding(p.binding0, p.visibility0);
        list.push(i.obj0);
      }
      if (lang_1.isPresent(p.binding1) && p.binding1.key.token === query.selector) {
        if (i.obj1 === di_1.UNDEFINED)
          i.obj1 = i.instantiateBinding(p.binding1, p.visibility1);
        list.push(i.obj1);
      }
      if (lang_1.isPresent(p.binding2) && p.binding2.key.token === query.selector) {
        if (i.obj2 === di_1.UNDEFINED)
          i.obj2 = i.instantiateBinding(p.binding2, p.visibility2);
        list.push(i.obj2);
      }
      if (lang_1.isPresent(p.binding3) && p.binding3.key.token === query.selector) {
        if (i.obj3 === di_1.UNDEFINED)
          i.obj3 = i.instantiateBinding(p.binding3, p.visibility3);
        list.push(i.obj3);
      }
      if (lang_1.isPresent(p.binding4) && p.binding4.key.token === query.selector) {
        if (i.obj4 === di_1.UNDEFINED)
          i.obj4 = i.instantiateBinding(p.binding4, p.visibility4);
        list.push(i.obj4);
      }
      if (lang_1.isPresent(p.binding5) && p.binding5.key.token === query.selector) {
        if (i.obj5 === di_1.UNDEFINED)
          i.obj5 = i.instantiateBinding(p.binding5, p.visibility5);
        list.push(i.obj5);
      }
      if (lang_1.isPresent(p.binding6) && p.binding6.key.token === query.selector) {
        if (i.obj6 === di_1.UNDEFINED)
          i.obj6 = i.instantiateBinding(p.binding6, p.visibility6);
        list.push(i.obj6);
      }
      if (lang_1.isPresent(p.binding7) && p.binding7.key.token === query.selector) {
        if (i.obj7 === di_1.UNDEFINED)
          i.obj7 = i.instantiateBinding(p.binding7, p.visibility7);
        list.push(i.obj7);
      }
      if (lang_1.isPresent(p.binding8) && p.binding8.key.token === query.selector) {
        if (i.obj8 === di_1.UNDEFINED)
          i.obj8 = i.instantiateBinding(p.binding8, p.visibility8);
        list.push(i.obj8);
      }
      if (lang_1.isPresent(p.binding9) && p.binding9.key.token === query.selector) {
        if (i.obj9 === di_1.UNDEFINED)
          i.obj9 = i.instantiateBinding(p.binding9, p.visibility9);
        list.push(i.obj9);
      }
    };
    ElementInjectorInlineStrategy.prototype.getComponentBinding = function() {
      var p = this.injectorStrategy.protoStrategy;
      return p.binding0;
    };
    return ElementInjectorInlineStrategy;
  })();
  var ElementInjectorDynamicStrategy = (function() {
    function ElementInjectorDynamicStrategy(injectorStrategy, _ei) {
      this.injectorStrategy = injectorStrategy;
      this._ei = _ei;
    }
    ElementInjectorDynamicStrategy.prototype.hydrate = function() {
      var inj = this.injectorStrategy;
      var p = inj.protoStrategy;
      for (var i = 0; i < p.keyIds.length; i++) {
        if (p.bindings[i] instanceof DirectiveBinding && lang_1.isPresent(p.keyIds[i]) && inj.objs[i] === di_1.UNDEFINED) {
          inj.objs[i] = inj.instantiateBinding(p.bindings[i], p.visibilities[i]);
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.dehydrate = function() {
      var inj = this.injectorStrategy;
      collection_1.ListWrapper.fill(inj.objs, di_1.UNDEFINED);
    };
    ElementInjectorDynamicStrategy.prototype.callOnDestroy = function() {
      var ist = this.injectorStrategy;
      var p = ist.protoStrategy;
      for (var i = 0; i < p.bindings.length; i++) {
        if (p.bindings[i] instanceof DirectiveBinding && p.bindings[i].callOnDestroy) {
          ist.objs[i].onDestroy();
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.getComponent = function() {
      return this.injectorStrategy.objs[0];
    };
    ElementInjectorDynamicStrategy.prototype.isComponentKey = function(key) {
      var p = this.injectorStrategy.protoStrategy;
      return this._ei._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === p.keyIds[0];
    };
    ElementInjectorDynamicStrategy.prototype.buildQueries = function() {
      var inj = this.injectorStrategy;
      var p = inj.protoStrategy;
      for (var i = 0; i < p.bindings.length; i++) {
        if (p.bindings[i] instanceof DirectiveBinding) {
          this._ei._buildQueriesForDeps(p.bindings[i].dependencies);
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.addDirectivesMatchingQuery = function(query, list) {
      var ist = this.injectorStrategy;
      var p = ist.protoStrategy;
      for (var i = 0; i < p.bindings.length; i++) {
        if (p.bindings[i].key.token === query.selector) {
          if (ist.objs[i] === di_1.UNDEFINED) {
            ist.objs[i] = ist.instantiateBinding(p.bindings[i], p.visibilities[i]);
          }
          list.push(ist.objs[i]);
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.getComponentBinding = function() {
      var p = this.injectorStrategy.protoStrategy;
      return p.bindings[0];
    };
    return ElementInjectorDynamicStrategy;
  })();
  var QueryError = (function(_super) {
    __extends(QueryError, _super);
    function QueryError() {
      _super.call(this);
      this.message = 'Only 3 queries can be concurrently active in a template.';
    }
    QueryError.prototype.toString = function() {
      return this.message;
    };
    return QueryError;
  })(lang_1.BaseException);
  exports.QueryError = QueryError;
  var QueryRef = (function() {
    function QueryRef(query, list, originator) {
      this.query = query;
      this.list = list;
      this.originator = originator;
    }
    Object.defineProperty(QueryRef.prototype, "isViewQuery", {
      get: function() {
        return this.query.isViewQuery;
      },
      enumerable: true,
      configurable: true
    });
    QueryRef.prototype.update = function() {
      var aggregator = [];
      if (this.query.isViewQuery) {
        var rootViewInjectors = this.originator.getRootViewInjectors();
        for (var i = 0; i < rootViewInjectors.length; i++) {
          this.visit(rootViewInjectors[i], aggregator);
        }
      } else {
        this.visit(this.originator, aggregator);
      }
      this.list.reset(aggregator);
    };
    QueryRef.prototype.visit = function(inj, aggregator) {
      if (lang_1.isBlank(inj) || !inj._hasQuery(this) || !inj.hydrated)
        return;
      if (this.query.isVarBindingQuery) {
        this._aggregateVariableBindings(inj, aggregator);
      } else {
        this._aggregateDirective(inj, aggregator);
      }
      var child = inj._head;
      while (lang_1.isPresent(child)) {
        this.visit(child, aggregator);
        child = child._next;
      }
    };
    QueryRef.prototype._aggregateVariableBindings = function(inj, aggregator) {
      var vb = this.query.varBindings;
      for (var i = 0; i < vb.length; ++i) {
        if (inj.hasVariableBinding(vb[i])) {
          aggregator.push(inj.getVariableBinding(vb[i]));
        }
      }
    };
    QueryRef.prototype._aggregateDirective = function(inj, aggregator) {
      inj.addDirectivesMatchingQuery(this.query, aggregator);
    };
    return QueryRef;
  })();
  exports.QueryRef = QueryRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/pipes/pipe_binding.js", ["npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var PipeBinding = (function(_super) {
    __extends(PipeBinding, _super);
    function PipeBinding(name, key, factory, dependencies) {
      _super.call(this, key, factory, dependencies);
      this.name = name;
    }
    PipeBinding.createFromType = function(type, metadata) {
      var binding = new di_1.Binding(type, {toClass: type});
      var rb = binding.resolve();
      return new PipeBinding(metadata.name, rb.key, rb.factory, rb.dependencies);
    };
    return PipeBinding;
  })(di_1.ResolvedBinding);
  exports.PipeBinding = PipeBinding;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1.js", ["npm:rx@2.5.1/index.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:rx@2.5.1/index.js");
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/di/type_literal.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var TypeLiteral = (function() {
    function TypeLiteral() {}
    Object.defineProperty(TypeLiteral.prototype, "type", {
      get: function() {
        throw new Error("Type literals are only supported in Dart");
      },
      enumerable: true,
      configurable: true
    });
    return TypeLiteral;
  })();
  exports.TypeLiteral = TypeLiteral;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/forms/directives/shared.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/forms/validators.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var validators_1 = require("npm:angular2@2.0.0-alpha.35/src/forms/validators.js");
  function controlPath(name, parent) {
    var p = collection_1.ListWrapper.clone(parent.path);
    p.push(name);
    return p;
  }
  exports.controlPath = controlPath;
  function setUpControl(c, dir) {
    if (lang_1.isBlank(c))
      _throwError(dir, "Cannot find control");
    if (lang_1.isBlank(dir.valueAccessor))
      _throwError(dir, "No value accessor for");
    c.validator = validators_1.Validators.compose([c.validator, dir.validator]);
    dir.valueAccessor.writeValue(c.value);
    dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue);
      c.updateValue(newValue, {emitModelToViewChange: false});
      c.markAsDirty();
    });
    c.registerOnChange(function(newValue) {
      return dir.valueAccessor.writeValue(newValue);
    });
    dir.valueAccessor.registerOnTouched(function() {
      return c.markAsTouched();
    });
  }
  exports.setUpControl = setUpControl;
  function composeNgValidator(ngValidators) {
    if (lang_1.isBlank(ngValidators))
      return validators_1.Validators.nullValidator;
    return validators_1.Validators.compose(ngValidators.map(function(v) {
      return v.validator;
    }));
  }
  exports.composeNgValidator = composeNgValidator;
  function _throwError(dir, message) {
    var path = collection_1.ListWrapper.join(dir.path, " -> ");
    throw new lang_1.BaseException(message + " '" + path + "'");
  }
  function setProperty(renderer, elementRef, propName, propValue) {
    renderer.setElementProperty(elementRef, propName, propValue);
  }
  exports.setProperty = setProperty;
  function isPropertyUpdated(changes, viewModel) {
    if (!collection_1.StringMapWrapper.contains(changes, "model"))
      return false;
    var change = changes["model"];
    if (change.isFirstChange())
      return true;
    return !lang_1.looseIdentical(viewModel, change.currentValue);
  }
  exports.isPropertyUpdated = isPropertyUpdated;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compiler.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_pipeline.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_step_factory.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view_merger.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/selector.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var compile_pipeline_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_pipeline.js");
  var view_loader_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_loader.js");
  var compile_step_factory_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_step_factory.js");
  var element_schema_registry_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/schema/element_schema_registry.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
  var pvm = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view_merger.js");
  var selector_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/selector.js");
  var dom_tokens_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js");
  var di_2 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var shared_styles_host_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var template_cloner_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js");
  var DomCompiler = (function(_super) {
    __extends(DomCompiler, _super);
    function DomCompiler(_schemaRegistry, _templateCloner, _stepFactory, _viewLoader, _sharedStylesHost) {
      _super.call(this);
      this._schemaRegistry = _schemaRegistry;
      this._templateCloner = _templateCloner;
      this._stepFactory = _stepFactory;
      this._viewLoader = _viewLoader;
      this._sharedStylesHost = _sharedStylesHost;
    }
    DomCompiler.prototype.compile = function(view) {
      var _this = this;
      var tplPromise = this._viewLoader.load(view);
      return async_1.PromiseWrapper.then(tplPromise, function(tplAndStyles) {
        return _this._compileView(view, tplAndStyles, api_1.ViewType.COMPONENT);
      }, function(e) {
        throw new lang_1.BaseException("Failed to load the template for \"" + view.componentId + "\" : " + e);
        return null;
      });
    };
    DomCompiler.prototype.compileHost = function(directiveMetadata) {
      var hostViewDef = new api_1.ViewDefinition({
        componentId: directiveMetadata.id,
        templateAbsUrl: null,
        template: null,
        styles: null,
        styleAbsUrls: null,
        directives: [directiveMetadata],
        encapsulation: api_1.ViewEncapsulation.NONE
      });
      var selector = selector_1.CssSelector.parse(directiveMetadata.selector)[0];
      var hostTemplate = selector.getMatchingElementTemplate();
      var templateAndStyles = new view_loader_1.TemplateAndStyles(hostTemplate, []);
      return this._compileView(hostViewDef, templateAndStyles, api_1.ViewType.HOST);
    };
    DomCompiler.prototype.mergeProtoViewsRecursively = function(protoViewRefs) {
      return async_1.PromiseWrapper.resolve(pvm.mergeProtoViewsRecursively(this._templateCloner, protoViewRefs));
    };
    DomCompiler.prototype._compileView = function(viewDef, templateAndStyles, protoViewType) {
      if (viewDef.encapsulation === api_1.ViewEncapsulation.EMULATED && templateAndStyles.styles.length === 0) {
        viewDef = this._normalizeViewEncapsulationIfThereAreNoStyles(viewDef);
      }
      var pipeline = new compile_pipeline_1.CompilePipeline(this._stepFactory.createSteps(viewDef));
      var compiledStyles = pipeline.processStyles(templateAndStyles.styles);
      var compileElements = pipeline.processElements(this._createTemplateElm(templateAndStyles.template), protoViewType, viewDef);
      if (viewDef.encapsulation === api_1.ViewEncapsulation.NATIVE) {
        util_1.prependAll(dom_adapter_1.DOM.content(compileElements[0].element), compiledStyles.map(function(style) {
          return dom_adapter_1.DOM.createStyleElement(style);
        }));
      } else {
        this._sharedStylesHost.addStyles(compiledStyles);
      }
      return async_1.PromiseWrapper.resolve(compileElements[0].inheritedProtoView.build(this._schemaRegistry, this._templateCloner));
    };
    DomCompiler.prototype._createTemplateElm = function(template) {
      var templateElm = dom_adapter_1.DOM.createTemplate(template);
      var scriptTags = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.templateAwareRoot(templateElm), 'script');
      for (var i = 0; i < scriptTags.length; i++) {
        dom_adapter_1.DOM.remove(scriptTags[i]);
      }
      return templateElm;
    };
    DomCompiler.prototype._normalizeViewEncapsulationIfThereAreNoStyles = function(viewDef) {
      if (viewDef.encapsulation === api_1.ViewEncapsulation.EMULATED) {
        return new api_1.ViewDefinition({
          componentId: viewDef.componentId,
          templateAbsUrl: viewDef.templateAbsUrl,
          template: viewDef.template,
          styleAbsUrls: viewDef.styleAbsUrls,
          styles: viewDef.styles,
          directives: viewDef.directives,
          encapsulation: api_1.ViewEncapsulation.NONE
        });
      } else {
        return viewDef;
      }
    };
    return DomCompiler;
  })(api_1.RenderCompiler);
  exports.DomCompiler = DomCompiler;
  var DefaultDomCompiler = (function(_super) {
    __extends(DefaultDomCompiler, _super);
    function DefaultDomCompiler(schemaRegistry, templateCloner, parser, viewLoader, sharedStylesHost, appId) {
      _super.call(this, schemaRegistry, templateCloner, new compile_step_factory_1.DefaultStepFactory(parser, appId), viewLoader, sharedStylesHost);
    }
    DefaultDomCompiler = __decorate([di_1.Injectable(), __param(5, di_2.Inject(dom_tokens_1.APP_ID)), __metadata('design:paramtypes', [element_schema_registry_1.ElementSchemaRegistry, template_cloner_1.TemplateCloner, change_detection_1.Parser, view_loader_1.ViewLoader, shared_styles_host_1.SharedStylesHost, Object])], DefaultDomCompiler);
    return DefaultDomCompiler;
  })(DomCompiler);
  exports.DefaultDomCompiler = DefaultDomCompiler;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_renderer.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/view.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/fragment.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var event_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js");
  var proto_view_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js");
  var view_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/view.js");
  var fragment_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/fragment.js");
  var shared_styles_host_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/shared_styles_host.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var template_cloner_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js");
  var dom_tokens_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js");
  var REFLECT_PREFIX = 'ng-reflect-';
  var DomRenderer = (function(_super) {
    __extends(DomRenderer, _super);
    function DomRenderer(_eventManager, _domSharedStylesHost, _templateCloner, document, reflectPropertiesAsAttributes) {
      _super.call(this);
      this._eventManager = _eventManager;
      this._domSharedStylesHost = _domSharedStylesHost;
      this._templateCloner = _templateCloner;
      this._scope_createRootHostView = profile_1.wtfCreateScope('DomRenderer#createRootHostView()');
      this._scope_createView = profile_1.wtfCreateScope('DomRenderer#createView()');
      this._scope_detachFragment = profile_1.wtfCreateScope('DomRenderer#detachFragment()');
      this._scope_setEventDispatcher = profile_1.wtfCreateScope('DomRenderer#setEventDispatcher()');
      this._reflectPropertiesAsAttributes = reflectPropertiesAsAttributes;
      this._document = document;
    }
    DomRenderer.prototype.createRootHostView = function(hostProtoViewRef, fragmentCount, hostElementSelector) {
      var s = this._scope_createRootHostView();
      var hostProtoView = proto_view_1.resolveInternalDomProtoView(hostProtoViewRef);
      var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
      if (lang_1.isBlank(element)) {
        profile_1.wtfLeave(s);
        throw new lang_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
      }
      return profile_1.wtfLeave(s, this._createView(hostProtoView, element));
    };
    DomRenderer.prototype.createView = function(protoViewRef, fragmentCount) {
      var s = this._scope_createView();
      var protoView = proto_view_1.resolveInternalDomProtoView(protoViewRef);
      return profile_1.wtfLeave(s, this._createView(protoView, null));
    };
    DomRenderer.prototype.destroyView = function(viewRef) {
      var view = view_1.resolveInternalDomView(viewRef);
      var elementBinders = view.proto.elementBinders;
      for (var i = 0; i < elementBinders.length; i++) {
        var binder = elementBinders[i];
        if (binder.hasNativeShadowRoot) {
          this._domSharedStylesHost.removeHost(dom_adapter_1.DOM.getShadowRoot(view.boundElements[i]));
        }
      }
    };
    DomRenderer.prototype.getNativeElementSync = function(location) {
      if (lang_1.isBlank(location.renderBoundElementIndex)) {
        return null;
      }
      return view_1.resolveInternalDomView(location.renderView).boundElements[location.renderBoundElementIndex];
    };
    DomRenderer.prototype.getRootNodes = function(fragment) {
      return fragment_1.resolveInternalDomFragment(fragment);
    };
    DomRenderer.prototype.attachFragmentAfterFragment = function(previousFragmentRef, fragmentRef) {
      var previousFragmentNodes = fragment_1.resolveInternalDomFragment(previousFragmentRef);
      if (previousFragmentNodes.length > 0) {
        var sibling = previousFragmentNodes[previousFragmentNodes.length - 1];
        moveNodesAfterSibling(sibling, fragment_1.resolveInternalDomFragment(fragmentRef));
      }
    };
    DomRenderer.prototype.attachFragmentAfterElement = function(elementRef, fragmentRef) {
      if (lang_1.isBlank(elementRef.renderBoundElementIndex)) {
        return;
      }
      var parentView = view_1.resolveInternalDomView(elementRef.renderView);
      var element = parentView.boundElements[elementRef.renderBoundElementIndex];
      moveNodesAfterSibling(element, fragment_1.resolveInternalDomFragment(fragmentRef));
    };
    DomRenderer.prototype.detachFragment = function(fragmentRef) {
      var s = this._scope_detachFragment();
      var fragmentNodes = fragment_1.resolveInternalDomFragment(fragmentRef);
      for (var i = 0; i < fragmentNodes.length; i++) {
        dom_adapter_1.DOM.remove(fragmentNodes[i]);
      }
      profile_1.wtfLeave(s);
    };
    DomRenderer.prototype.hydrateView = function(viewRef) {
      var view = view_1.resolveInternalDomView(viewRef);
      if (view.hydrated)
        throw new lang_1.BaseException('The view is already hydrated.');
      view.hydrated = true;
      view.eventHandlerRemovers = [];
      var binders = view.proto.elementBinders;
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        if (lang_1.isPresent(binder.globalEvents)) {
          for (var i = 0; i < binder.globalEvents.length; i++) {
            var globalEvent = binder.globalEvents[i];
            var remover = this._createGlobalEventListener(view, binderIdx, globalEvent.name, globalEvent.target, globalEvent.fullName);
            view.eventHandlerRemovers.push(remover);
          }
        }
      }
    };
    DomRenderer.prototype.dehydrateView = function(viewRef) {
      var view = view_1.resolveInternalDomView(viewRef);
      for (var i = 0; i < view.eventHandlerRemovers.length; i++) {
        view.eventHandlerRemovers[i]();
      }
      view.eventHandlerRemovers = null;
      view.hydrated = false;
    };
    DomRenderer.prototype.setElementProperty = function(location, propertyName, propertyValue) {
      if (lang_1.isBlank(location.renderBoundElementIndex)) {
        return;
      }
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementProperty(location.renderBoundElementIndex, propertyName, propertyValue);
      if (this._reflectPropertiesAsAttributes) {
        this.setElementAttribute(location, "" + REFLECT_PREFIX + util_1.camelCaseToDashCase(propertyName), "" + propertyValue);
      }
    };
    DomRenderer.prototype.setElementAttribute = function(location, attributeName, attributeValue) {
      if (lang_1.isBlank(location.renderBoundElementIndex)) {
        return;
      }
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementAttribute(location.renderBoundElementIndex, attributeName, attributeValue);
    };
    DomRenderer.prototype.setElementClass = function(location, className, isAdd) {
      if (lang_1.isBlank(location.renderBoundElementIndex)) {
        return;
      }
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementClass(location.renderBoundElementIndex, className, isAdd);
    };
    DomRenderer.prototype.setElementStyle = function(location, styleName, styleValue) {
      if (lang_1.isBlank(location.renderBoundElementIndex)) {
        return;
      }
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementStyle(location.renderBoundElementIndex, styleName, styleValue);
    };
    DomRenderer.prototype.invokeElementMethod = function(location, methodName, args) {
      if (lang_1.isBlank(location.renderBoundElementIndex)) {
        return;
      }
      var view = view_1.resolveInternalDomView(location.renderView);
      view.invokeElementMethod(location.renderBoundElementIndex, methodName, args);
    };
    DomRenderer.prototype.setText = function(viewRef, textNodeIndex, text) {
      if (lang_1.isBlank(textNodeIndex)) {
        return;
      }
      var view = view_1.resolveInternalDomView(viewRef);
      dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
    };
    DomRenderer.prototype.setEventDispatcher = function(viewRef, dispatcher) {
      var s = this._scope_setEventDispatcher();
      var view = view_1.resolveInternalDomView(viewRef);
      view.eventDispatcher = dispatcher;
      profile_1.wtfLeave(s);
    };
    DomRenderer.prototype._createView = function(protoView, inplaceElement) {
      var clonedProtoView = util_1.cloneAndQueryProtoView(this._templateCloner, protoView, true);
      var boundElements = clonedProtoView.boundElements;
      if (lang_1.isPresent(inplaceElement)) {
        if (protoView.fragmentsRootNodeCount[0] !== 1) {
          throw new lang_1.BaseException('Root proto views can only contain one element!');
        }
        dom_adapter_1.DOM.clearNodes(inplaceElement);
        var tempRoot = clonedProtoView.fragments[0][0];
        moveChildNodes(tempRoot, inplaceElement);
        if (boundElements.length > 0 && boundElements[0] === tempRoot) {
          boundElements[0] = inplaceElement;
        }
        clonedProtoView.fragments[0][0] = inplaceElement;
      }
      var view = new view_1.DomView(protoView, clonedProtoView.boundTextNodes, boundElements);
      var binders = protoView.elementBinders;
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        var element = boundElements[binderIdx];
        if (binder.hasNativeShadowRoot) {
          var shadowRootWrapper = dom_adapter_1.DOM.firstChild(element);
          var shadowRoot = dom_adapter_1.DOM.createShadowRoot(element);
          this._domSharedStylesHost.addHost(shadowRoot);
          moveChildNodes(shadowRootWrapper, shadowRoot);
          dom_adapter_1.DOM.remove(shadowRootWrapper);
        }
        if (lang_1.isPresent(binder.eventLocals) && lang_1.isPresent(binder.localEvents)) {
          for (var i = 0; i < binder.localEvents.length; i++) {
            this._createEventListener(view, element, binderIdx, binder.localEvents[i].name, binder.eventLocals);
          }
        }
      }
      return new api_1.RenderViewWithFragments(new view_1.DomViewRef(view), clonedProtoView.fragments.map(function(nodes) {
        return new fragment_1.DomFragmentRef(nodes);
      }));
    };
    DomRenderer.prototype._createEventListener = function(view, element, elementIndex, eventName, eventLocals) {
      this._eventManager.addEventListener(element, eventName, function(event) {
        view.dispatchEvent(elementIndex, eventName, event);
      });
    };
    DomRenderer.prototype._createGlobalEventListener = function(view, elementIndex, eventName, eventTarget, fullName) {
      return this._eventManager.addGlobalEventListener(eventTarget, eventName, function(event) {
        view.dispatchEvent(elementIndex, fullName, event);
      });
    };
    DomRenderer = __decorate([di_1.Injectable(), __param(3, di_1.Inject(dom_tokens_1.DOCUMENT)), __param(4, di_1.Inject(dom_tokens_1.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES)), __metadata('design:paramtypes', [event_manager_1.EventManager, shared_styles_host_1.DomSharedStylesHost, template_cloner_1.TemplateCloner, Object, Boolean])], DomRenderer);
    return DomRenderer;
  })(api_1.Renderer);
  exports.DomRenderer = DomRenderer;
  function moveNodesAfterSibling(sibling, nodes) {
    if (nodes.length > 0 && lang_1.isPresent(dom_adapter_1.DOM.parentElement(sibling))) {
      for (var i = 0; i < nodes.length; i++) {
        dom_adapter_1.DOM.insertBefore(sibling, nodes[i]);
      }
      dom_adapter_1.DOM.insertBefore(nodes[nodes.length - 1], sibling);
    }
  }
  function moveChildNodes(source, target) {
    var currChild = dom_adapter_1.DOM.firstChild(source);
    while (lang_1.isPresent(currChild)) {
      var nextChild = dom_adapter_1.DOM.nextSibling(currChild);
      dom_adapter_1.DOM.appendChild(target, currChild);
      currChild = nextChild;
    }
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js", ["npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.DOCUMENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('DocumentToken'));
  exports.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES = lang_1.CONST_EXPR(new di_1.OpaqueToken('DomReflectPropertiesAsAttributes'));
  exports.APP_ID = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppId'));
  function _appIdRandomBindingFactory() {
    return "" + randomChar() + randomChar() + randomChar();
  }
  exports.APP_ID_RANDOM_BINDING = lang_1.CONST_EXPR(new di_1.Binding(exports.APP_ID, {
    toFactory: _appIdRandomBindingFactory,
    deps: []
  }));
  exports.MAX_IN_MEMORY_ELEMENTS_PER_TEMPLATE = lang_1.CONST_EXPR(new di_1.OpaqueToken('MaxInMemoryElementsPerTemplate'));
  function randomChar() {
    return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/template_cloner.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var dom_tokens_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/dom_tokens.js");
  var TemplateCloner = (function() {
    function TemplateCloner(maxInMemoryElementsPerTemplate) {
      this.maxInMemoryElementsPerTemplate = maxInMemoryElementsPerTemplate;
    }
    TemplateCloner.prototype.prepareForClone = function(templateRoot) {
      var elementCount = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(templateRoot), '*').length;
      if (this.maxInMemoryElementsPerTemplate >= 0 && elementCount >= this.maxInMemoryElementsPerTemplate) {
        return dom_adapter_1.DOM.getInnerHTML(templateRoot);
      } else {
        return templateRoot;
      }
    };
    TemplateCloner.prototype.cloneContent = function(preparedTemplateRoot, importNode) {
      var templateContent;
      if (lang_1.isString(preparedTemplateRoot)) {
        templateContent = dom_adapter_1.DOM.content(dom_adapter_1.DOM.createTemplate(preparedTemplateRoot));
        if (importNode) {
          templateContent = dom_adapter_1.DOM.importIntoDoc(templateContent);
        }
      } else {
        templateContent = dom_adapter_1.DOM.content(preparedTemplateRoot);
        if (importNode) {
          templateContent = dom_adapter_1.DOM.importIntoDoc(templateContent);
        } else {
          templateContent = dom_adapter_1.DOM.clone(templateContent);
        }
      }
      return templateContent;
    };
    TemplateCloner = __decorate([di_1.Injectable(), __param(0, di_1.Inject(dom_tokens_1.MAX_IN_MEMORY_ELEMENTS_PER_TEMPLATE)), __metadata('design:paramtypes', [Object])], TemplateCloner);
    return TemplateCloner;
  })();
  exports.TemplateCloner = TemplateCloner;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/profile/wtf_impl.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var trace;
  var events;
  function detectWTF() {
    var wtf = lang_1.global['wtf'];
    if (wtf) {
      trace = wtf['trace'];
      if (trace) {
        events = trace['events'];
        return true;
      }
    }
    return false;
  }
  exports.detectWTF = detectWTF;
  function createScope(signature, flags) {
    if (flags === void 0) {
      flags = null;
    }
    return events.createScope(signature, flags);
  }
  exports.createScope = createScope;
  function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
  }
  exports.leave = leave;
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  exports.startTimeRange = startTimeRange;
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  exports.endTimeRange = endTimeRange;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_jit_generator.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/abstract_change_detector.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_name_util.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_logic_util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var abstract_change_detector_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/abstract_change_detector.js");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js");
  var codegen_name_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_name_util.js");
  var codegen_logic_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_logic_util.js");
  var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
  var UTIL = "ChangeDetectionUtil";
  var IS_CHANGED_LOCAL = "isChanged";
  var CHANGES_LOCAL = "changes";
  var ChangeDetectorJITGenerator = (function() {
    function ChangeDetectorJITGenerator(id, changeDetectionStrategy, records, eventBindings, directiveRecords, generateCheckNoChanges) {
      this.id = id;
      this.changeDetectionStrategy = changeDetectionStrategy;
      this.records = records;
      this.eventBindings = eventBindings;
      this.directiveRecords = directiveRecords;
      this.generateCheckNoChanges = generateCheckNoChanges;
      this._names = new codegen_name_util_1.CodegenNameUtil(this.records, this.eventBindings, this.directiveRecords, UTIL);
      this._logic = new codegen_logic_util_1.CodegenLogicUtil(this._names, UTIL, changeDetectionStrategy);
      this._typeName = codegen_name_util_1.sanitizeName("ChangeDetector_" + this.id);
    }
    ChangeDetectorJITGenerator.prototype.generate = function() {
      var _this = this;
      var classDefinition = "\n      var " + this._typeName + " = function " + this._typeName + "(dispatcher, protos, directiveRecords) {\n        " + ABSTRACT_CHANGE_DETECTOR + ".call(\n            this, " + JSON.stringify(this.id) + ", dispatcher, protos, directiveRecords,\n            \"" + change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeDetectionStrategy) + "\");\n        this.dehydrateDirectives(false);\n      }\n\n      " + this._typeName + ".prototype = Object.create(" + ABSTRACT_CHANGE_DETECTOR + ".prototype);\n\n      " + this._typeName + ".prototype.detectChangesInRecordsInternal = function(throwOnChange) {\n        " + this._names.genInitLocals() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        " + this.records.map(function(r) {
        return _this._genRecord(r);
      }).join("\n") + "\n\n        " + this._names.getAlreadyCheckedName() + " = true;\n      }\n\n      " + this._maybeGenHandleEventInternal() + "\n\n      " + this._genCheckNoChanges() + "\n\n      " + this._maybeGenCallOnAllChangesDone() + "\n\n      " + this._maybeGenHydrateDirectives() + "\n\n      " + this._maybeGenDehydrateDirectives() + "\n\n      return function(dispatcher) {\n        return new " + this._typeName + "(dispatcher, protos, directiveRecords);\n      }\n    ";
      return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveRecords', classDefinition)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, this.records, this.directiveRecords);
    };
    ChangeDetectorJITGenerator.prototype._maybeGenHandleEventInternal = function() {
      var _this = this;
      if (this.eventBindings.length > 0) {
        var handlers = this.eventBindings.map(function(eb) {
          return _this._genEventBinding(eb);
        }).join("\n");
        return "\n        " + this._typeName + ".prototype.handleEventInternal = function(eventName, elIndex, locals) {\n          var " + this._names.getPreventDefaultAccesor() + " = false;\n          " + this._names.genInitEventLocals() + "\n          " + handlers + "\n          return " + this._names.getPreventDefaultAccesor() + ";\n        }\n      ";
      } else {
        return '';
      }
    };
    ChangeDetectorJITGenerator.prototype._genEventBinding = function(eb) {
      var _this = this;
      var recs = eb.records.map(function(r) {
        return _this._genEventBindingEval(eb, r);
      }).join("\n");
      return "\n    if (eventName === \"" + eb.eventName + "\" && elIndex === " + eb.elIndex + ") {\n      " + recs + "\n    }";
    };
    ChangeDetectorJITGenerator.prototype._genEventBindingEval = function(eb, r) {
      if (r.lastInBinding) {
        var evalRecord = this._logic.genEventBindingEvalValue(eb, r);
        var markPath = this._genMarkPathToRootAsCheckOnce(r);
        var prevDefault = this._genUpdatePreventDefault(eb, r);
        return evalRecord + "\n" + markPath + "\n" + prevDefault;
      } else {
        return this._logic.genEventBindingEvalValue(eb, r);
      }
    };
    ChangeDetectorJITGenerator.prototype._genMarkPathToRootAsCheckOnce = function(r) {
      var br = r.bindingRecord;
      if (br.isDefaultChangeDetection()) {
        return "";
      } else {
        return this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markPathToRootAsCheckOnce();";
      }
    };
    ChangeDetectorJITGenerator.prototype._genUpdatePreventDefault = function(eb, r) {
      var local = this._names.getEventLocalName(eb, r.selfIndex);
      return "if (" + local + " === false) { " + this._names.getPreventDefaultAccesor() + " = true};";
    };
    ChangeDetectorJITGenerator.prototype._maybeGenDehydrateDirectives = function() {
      var destroyPipesCode = this._names.genPipeOnDestroy();
      if (destroyPipesCode) {
        destroyPipesCode = "if (destroyPipes) { " + destroyPipesCode + " }";
      }
      var dehydrateFieldsCode = this._names.genDehydrateFields();
      if (!destroyPipesCode && !dehydrateFieldsCode)
        return '';
      return this._typeName + ".prototype.dehydrateDirectives = function(destroyPipes) {\n        " + destroyPipesCode + "\n        " + dehydrateFieldsCode + "\n    }";
    };
    ChangeDetectorJITGenerator.prototype._maybeGenHydrateDirectives = function() {
      var hydrateDirectivesCode = this._genHydrateDirectives();
      var hydrateDetectorsCode = this._genHydrateDetectors();
      if (!hydrateDirectivesCode && !hydrateDetectorsCode)
        return '';
      return this._typeName + ".prototype.hydrateDirectives = function(directives) {\n      " + hydrateDirectivesCode + "\n      " + hydrateDetectorsCode + "\n    }";
    };
    ChangeDetectorJITGenerator.prototype._genHydrateDirectives = function() {
      var directiveFieldNames = this._names.getAllDirectiveNames();
      var lines = collection_1.ListWrapper.createFixedSize(directiveFieldNames.length);
      for (var i = 0,
          iLen = directiveFieldNames.length; i < iLen; ++i) {
        lines[i] = directiveFieldNames[i] + " = directives.getDirectiveFor(\n          " + this._names.getDirectivesAccessorName() + "[" + i + "].directiveIndex);";
      }
      return lines.join('\n');
    };
    ChangeDetectorJITGenerator.prototype._genHydrateDetectors = function() {
      var detectorFieldNames = this._names.getAllDetectorNames();
      var lines = collection_1.ListWrapper.createFixedSize(detectorFieldNames.length);
      for (var i = 0,
          iLen = detectorFieldNames.length; i < iLen; ++i) {
        lines[i] = detectorFieldNames[i] + " = directives.getDetectorFor(\n          " + this._names.getDirectivesAccessorName() + "[" + i + "].directiveIndex);";
      }
      return lines.join('\n');
    };
    ChangeDetectorJITGenerator.prototype._maybeGenCallOnAllChangesDone = function() {
      var notifications = [];
      var dirs = this.directiveRecords;
      for (var i = dirs.length - 1; i >= 0; --i) {
        var dir = dirs[i];
        if (dir.callOnAllChangesDone) {
          notifications.push(this._names.getDirectiveName(dir.directiveIndex) + ".onAllChangesDone();");
        }
      }
      if (notifications.length > 0) {
        var directiveNotifications = notifications.join("\n");
        return "\n        " + this._typeName + ".prototype.callOnAllChangesDone = function() {\n          " + ABSTRACT_CHANGE_DETECTOR + ".prototype.callOnAllChangesDone.call(this);\n          " + directiveNotifications + "\n        }\n      ";
      } else {
        return '';
      }
    };
    ChangeDetectorJITGenerator.prototype._genRecord = function(r) {
      var rec;
      if (r.isLifeCycleRecord()) {
        rec = this._genDirectiveLifecycle(r);
      } else if (r.isPipeRecord()) {
        rec = this._genPipeCheck(r);
      } else {
        rec = this._genReferenceCheck(r);
      }
      return "\n      " + this._maybeFirstInBinding(r) + "\n      " + rec + "\n      " + this._maybeGenLastInDirective(r) + "\n    ";
    };
    ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function(r) {
      if (r.name === "onCheck") {
        return this._genOnCheck(r);
      } else if (r.name === "onInit") {
        return this._genOnInit(r);
      } else if (r.name === "onChange") {
        return this._genOnChange(r);
      } else {
        throw new lang_1.BaseException("Unknown lifecycle event '" + r.name + "'");
      }
    };
    ChangeDetectorJITGenerator.prototype._genPipeCheck = function(r) {
      var _this = this;
      var context = this._names.getLocalName(r.contextIndex);
      var argString = r.args.map(function(arg) {
        return _this._names.getLocalName(arg);
      }).join(", ");
      var oldValue = this._names.getFieldName(r.selfIndex);
      var newValue = this._names.getLocalName(r.selfIndex);
      var pipe = this._names.getPipeName(r.selfIndex);
      var pipeType = r.name;
      var read = "\n      if (" + pipe + " === " + UTIL + ".uninitialized) {\n        " + pipe + " = " + this._names.getPipesAccessorName() + ".get('" + pipeType + "');\n      }\n      " + newValue + " = " + pipe + ".transform(" + context + ", [" + argString + "]);\n    ";
      var check = "\n      if (" + oldValue + " !== " + newValue + ") {\n        " + newValue + " = " + UTIL + ".unwrapValue(" + newValue + ")\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
      return r.shouldBeChecked() ? "" + read + check : read;
    };
    ChangeDetectorJITGenerator.prototype._genReferenceCheck = function(r) {
      var _this = this;
      var oldValue = this._names.getFieldName(r.selfIndex);
      var newValue = this._names.getLocalName(r.selfIndex);
      var read = "\n      " + this._logic.genPropertyBindingEvalValue(r) + "\n    ";
      var check = "\n      if (" + newValue + " !== " + oldValue + ") {\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
      var genCode = r.shouldBeChecked() ? "" + read + check : read;
      if (r.isPureFunction()) {
        var condition = r.args.map(function(a) {
          return _this._names.getChangeName(a);
        }).join(" || ");
        if (r.isUsedByOtherRecord()) {
          return "if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
        } else {
          return "if (" + condition + ") { " + genCode + " }";
        }
      } else {
        return genCode;
      }
    };
    ChangeDetectorJITGenerator.prototype._genChangeMarker = function(r) {
      return r.argumentToPureFunction ? this._names.getChangeName(r.selfIndex) + " = true" : "";
    };
    ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function(r) {
      if (!r.lastInBinding)
        return "";
      var newValue = this._names.getLocalName(r.selfIndex);
      var oldValue = this._names.getFieldName(r.selfIndex);
      var br = r.bindingRecord;
      if (br.isDirective()) {
        var directiveProperty = this._names.getDirectiveName(br.directiveRecord.directiveIndex) + "." + br.propertyName;
        return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + directiveProperty + " = " + newValue + ";\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
      } else {
        return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        this.notifyDispatcher(" + newValue + ");\n      ";
      }
    };
    ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function(oldValue, newValue) {
      if (this.generateCheckNoChanges) {
        return "\n        if(throwOnChange) {\n          this.throwOnChangeError(" + oldValue + ", " + newValue + ");\n        }\n        ";
      } else {
        return '';
      }
    };
    ChangeDetectorJITGenerator.prototype._genCheckNoChanges = function() {
      if (this.generateCheckNoChanges) {
        return this._typeName + ".prototype.checkNoChanges = function() { this.runDetectChanges(true); }";
      } else {
        return '';
      }
    };
    ChangeDetectorJITGenerator.prototype._genAddToChanges = function(r) {
      var newValue = this._names.getLocalName(r.selfIndex);
      var oldValue = this._names.getFieldName(r.selfIndex);
      if (!r.bindingRecord.callOnChange())
        return "";
      return CHANGES_LOCAL + " = this.addChange(" + CHANGES_LOCAL + ", " + oldValue + ", " + newValue + ");";
    };
    ChangeDetectorJITGenerator.prototype._maybeFirstInBinding = function(r) {
      var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.records, r.selfIndex - 1);
      var firstInBindng = lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
      return firstInBindng ? this._names.getFirstProtoInCurrentBinding() + " = " + r.selfIndex + ";" : '';
    };
    ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function(r) {
      if (!r.lastInDirective)
        return "";
      return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
    };
    ChangeDetectorJITGenerator.prototype._genOnCheck = function(r) {
      var br = r.bindingRecord;
      return "if (!throwOnChange) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onCheck();";
    };
    ChangeDetectorJITGenerator.prototype._genOnInit = function(r) {
      var br = r.bindingRecord;
      return "if (!throwOnChange && !" + this._names.getAlreadyCheckedName() + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onInit();";
    };
    ChangeDetectorJITGenerator.prototype._genOnChange = function(r) {
      var br = r.bindingRecord;
      return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onChange(" + CHANGES_LOCAL + ");";
    };
    ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function(r) {
      var br = r.bindingRecord;
      if (!r.lastInDirective || br.isDefaultChangeDetection())
        return "";
      var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
      return retVal;
    };
    return ChangeDetectorJITGenerator;
  })();
  exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/event_binding.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var EventBinding = (function() {
    function EventBinding(eventName, elIndex, dirIndex, records) {
      this.eventName = eventName;
      this.elIndex = elIndex;
      this.dirIndex = dirIndex;
      this.records = records;
    }
    return EventBinding;
  })();
  exports.EventBinding = EventBinding;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/coalesce.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js");
  function coalesce(records) {
    var res = [];
    var indexMap = new collection_1.Map();
    for (var i = 0; i < records.length; ++i) {
      var r = records[i];
      var record = _replaceIndices(r, res.length + 1, indexMap);
      var matchingRecord = _findMatching(record, res);
      if (lang_1.isPresent(matchingRecord) && record.lastInBinding) {
        res.push(_selfRecord(record, matchingRecord.selfIndex, res.length + 1));
        indexMap.set(r.selfIndex, matchingRecord.selfIndex);
        matchingRecord.referencedBySelf = true;
      } else if (lang_1.isPresent(matchingRecord) && !record.lastInBinding) {
        if (record.argumentToPureFunction) {
          matchingRecord.argumentToPureFunction = true;
        }
        indexMap.set(r.selfIndex, matchingRecord.selfIndex);
      } else {
        res.push(record);
        indexMap.set(r.selfIndex, record.selfIndex);
      }
    }
    return res;
  }
  exports.coalesce = coalesce;
  function _selfRecord(r, contextIndex, selfIndex) {
    return new proto_record_1.ProtoRecord(proto_record_1.RecordType.SELF, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective, false, false);
  }
  function _findMatching(r, rs) {
    return collection_1.ListWrapper.find(rs, function(rr) {
      return rr.mode !== proto_record_1.RecordType.DIRECTIVE_LIFECYCLE && _sameDirIndex(rr, r) && rr.mode === r.mode && lang_1.looseIdentical(rr.funcOrValue, r.funcOrValue) && rr.contextIndex === r.contextIndex && lang_1.looseIdentical(rr.name, r.name) && collection_1.ListWrapper.equals(rr.args, r.args);
    });
  }
  function _sameDirIndex(a, b) {
    var di1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
    var ei1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
    var di2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
    var ei2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
    return di1 === di2 && ei1 === ei2;
  }
  function _replaceIndices(r, selfIndex, indexMap) {
    var args = collection_1.ListWrapper.map(r.args, function(a) {
      return _map(indexMap, a);
    });
    var contextIndex = _map(indexMap, r.contextIndex);
    return new proto_record_1.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective, r.argumentToPureFunction, r.referencedBySelf);
  }
  function _map(indexMap, value) {
    var r = indexMap.get(value);
    return lang_1.isPresent(r) ? r : value;
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  (function(RecordType) {
    RecordType[RecordType["SELF"] = 0] = "SELF";
    RecordType[RecordType["CONST"] = 1] = "CONST";
    RecordType[RecordType["PRIMITIVE_OP"] = 2] = "PRIMITIVE_OP";
    RecordType[RecordType["PROPERTY_READ"] = 3] = "PROPERTY_READ";
    RecordType[RecordType["PROPERTY_WRITE"] = 4] = "PROPERTY_WRITE";
    RecordType[RecordType["LOCAL"] = 5] = "LOCAL";
    RecordType[RecordType["INVOKE_METHOD"] = 6] = "INVOKE_METHOD";
    RecordType[RecordType["INVOKE_CLOSURE"] = 7] = "INVOKE_CLOSURE";
    RecordType[RecordType["KEYED_READ"] = 8] = "KEYED_READ";
    RecordType[RecordType["KEYED_WRITE"] = 9] = "KEYED_WRITE";
    RecordType[RecordType["PIPE"] = 10] = "PIPE";
    RecordType[RecordType["INTERPOLATE"] = 11] = "INTERPOLATE";
    RecordType[RecordType["SAFE_PROPERTY"] = 12] = "SAFE_PROPERTY";
    RecordType[RecordType["COLLECTION_LITERAL"] = 13] = "COLLECTION_LITERAL";
    RecordType[RecordType["SAFE_INVOKE_METHOD"] = 14] = "SAFE_INVOKE_METHOD";
    RecordType[RecordType["DIRECTIVE_LIFECYCLE"] = 15] = "DIRECTIVE_LIFECYCLE";
    RecordType[RecordType["CHAIN"] = 16] = "CHAIN";
  })(exports.RecordType || (exports.RecordType = {}));
  var RecordType = exports.RecordType;
  var ProtoRecord = (function() {
    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, expressionAsString, lastInBinding, lastInDirective, argumentToPureFunction, referencedBySelf) {
      this.mode = mode;
      this.name = name;
      this.funcOrValue = funcOrValue;
      this.args = args;
      this.fixedArgs = fixedArgs;
      this.contextIndex = contextIndex;
      this.directiveIndex = directiveIndex;
      this.selfIndex = selfIndex;
      this.bindingRecord = bindingRecord;
      this.expressionAsString = expressionAsString;
      this.lastInBinding = lastInBinding;
      this.lastInDirective = lastInDirective;
      this.argumentToPureFunction = argumentToPureFunction;
      this.referencedBySelf = referencedBySelf;
    }
    ProtoRecord.prototype.isPureFunction = function() {
      return this.mode === RecordType.INTERPOLATE || this.mode === RecordType.COLLECTION_LITERAL;
    };
    ProtoRecord.prototype.isUsedByOtherRecord = function() {
      return !this.lastInBinding || this.referencedBySelf;
    };
    ProtoRecord.prototype.shouldBeChecked = function() {
      return this.argumentToPureFunction || this.lastInBinding || this.isPureFunction();
    };
    ProtoRecord.prototype.isPipeRecord = function() {
      return this.mode === RecordType.PIPE;
    };
    ProtoRecord.prototype.isLifeCycleRecord = function() {
      return this.mode === RecordType.DIRECTIVE_LIFECYCLE;
    };
    return ProtoRecord;
  })();
  exports.ProtoRecord = ProtoRecord;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/abstract_change_detector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detector_ref.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/exceptions.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js", "npm:angular2@2.0.0-alpha.35/src/profile/profile.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/observable_facade.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection_util.js");
  var change_detector_ref_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detector_ref.js");
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/exceptions.js");
  var constants_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/constants.js");
  var profile_1 = require("npm:angular2@2.0.0-alpha.35/src/profile/profile.js");
  var observable_facade_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/observable_facade.js");
  var _scope_check = profile_1.wtfCreateScope("ChangeDetector#check(ascii id, bool throwOnChange)");
  var _Context = (function() {
    function _Context(element, componentElement, instance, context, locals, injector, expression) {
      this.element = element;
      this.componentElement = componentElement;
      this.instance = instance;
      this.context = context;
      this.locals = locals;
      this.injector = injector;
      this.expression = expression;
    }
    return _Context;
  })();
  var AbstractChangeDetector = (function() {
    function AbstractChangeDetector(id, dispatcher, protos, directiveRecords, modeOnHydrate) {
      this.id = id;
      this.modeOnHydrate = modeOnHydrate;
      this.lightDomChildren = [];
      this.shadowDomChildren = [];
      this.alreadyChecked = false;
      this.locals = null;
      this.mode = null;
      this.pipes = null;
      this.ref = new change_detector_ref_1.ChangeDetectorRef(this);
      this.directiveRecords = directiveRecords;
      this.dispatcher = dispatcher;
      this.protos = protos;
    }
    AbstractChangeDetector.prototype.addChild = function(cd) {
      this.lightDomChildren.push(cd);
      cd.parent = this;
    };
    AbstractChangeDetector.prototype.removeChild = function(cd) {
      collection_1.ListWrapper.remove(this.lightDomChildren, cd);
    };
    AbstractChangeDetector.prototype.addShadowDomChild = function(cd) {
      this.shadowDomChildren.push(cd);
      cd.parent = this;
    };
    AbstractChangeDetector.prototype.removeShadowDomChild = function(cd) {
      collection_1.ListWrapper.remove(this.shadowDomChildren, cd);
    };
    AbstractChangeDetector.prototype.remove = function() {
      this.parent.removeChild(this);
    };
    AbstractChangeDetector.prototype.handleEvent = function(eventName, elIndex, locals) {
      var res = this.handleEventInternal(eventName, elIndex, locals);
      this.markPathToRootAsCheckOnce();
      return res;
    };
    AbstractChangeDetector.prototype.handleEventInternal = function(eventName, elIndex, locals) {
      return false;
    };
    AbstractChangeDetector.prototype.detectChanges = function() {
      this.runDetectChanges(false);
    };
    AbstractChangeDetector.prototype.checkNoChanges = function() {
      throw new lang_1.BaseException("Not implemented");
    };
    AbstractChangeDetector.prototype.runDetectChanges = function(throwOnChange) {
      if (lang_1.StringWrapper.equals(this.mode, constants_1.DETACHED) || lang_1.StringWrapper.equals(this.mode, constants_1.CHECKED))
        return;
      var s = _scope_check(this.id, throwOnChange);
      this.detectChangesInRecords(throwOnChange);
      this._detectChangesInLightDomChildren(throwOnChange);
      if (throwOnChange === false)
        this.callOnAllChangesDone();
      this._detectChangesInShadowDomChildren(throwOnChange);
      if (lang_1.StringWrapper.equals(this.mode, constants_1.CHECK_ONCE))
        this.mode = constants_1.CHECKED;
      profile_1.wtfLeave(s);
    };
    AbstractChangeDetector.prototype.detectChangesInRecords = function(throwOnChange) {
      if (!this.hydrated()) {
        this.throwDehydratedError();
      }
      try {
        this.detectChangesInRecordsInternal(throwOnChange);
      } catch (e) {
        this._throwError(e, e.stack);
      }
    };
    AbstractChangeDetector.prototype.detectChangesInRecordsInternal = function(throwOnChange) {};
    AbstractChangeDetector.prototype.hydrate = function(context, locals, directives, pipes) {
      this.mode = this.modeOnHydrate;
      this.context = context;
      this.locals = locals;
      this.pipes = pipes;
      this.hydrateDirectives(directives);
      this.alreadyChecked = false;
    };
    AbstractChangeDetector.prototype.hydrateDirectives = function(directives) {};
    AbstractChangeDetector.prototype.dehydrate = function() {
      this.dehydrateDirectives(true);
      this.unsubsribeFromObservables();
      this.context = null;
      this.locals = null;
      this.pipes = null;
    };
    AbstractChangeDetector.prototype.dehydrateDirectives = function(destroyPipes) {};
    AbstractChangeDetector.prototype.hydrated = function() {
      return this.context !== null;
    };
    AbstractChangeDetector.prototype.callOnAllChangesDone = function() {
      this.dispatcher.notifyOnAllChangesDone();
    };
    AbstractChangeDetector.prototype._detectChangesInLightDomChildren = function(throwOnChange) {
      var c = this.lightDomChildren;
      for (var i = 0; i < c.length; ++i) {
        c[i].runDetectChanges(throwOnChange);
      }
    };
    AbstractChangeDetector.prototype._detectChangesInShadowDomChildren = function(throwOnChange) {
      var c = this.shadowDomChildren;
      for (var i = 0; i < c.length; ++i) {
        c[i].runDetectChanges(throwOnChange);
      }
    };
    AbstractChangeDetector.prototype.markAsCheckOnce = function() {
      this.mode = constants_1.CHECK_ONCE;
    };
    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function() {
      var c = this;
      while (lang_1.isPresent(c) && !lang_1.StringWrapper.equals(c.mode, constants_1.DETACHED)) {
        if (lang_1.StringWrapper.equals(c.mode, constants_1.CHECKED))
          c.mode = constants_1.CHECK_ONCE;
        c = c.parent;
      }
    };
    AbstractChangeDetector.prototype.unsubsribeFromObservables = function() {
      if (lang_1.isPresent(this.subscriptions)) {
        for (var i = 0; i < this.subscriptions.length; ++i) {
          var s = this.subscriptions[i];
          if (lang_1.isPresent(this.subscriptions[i])) {
            s.cancel();
            this.subscriptions[i] = null;
          }
        }
      }
    };
    AbstractChangeDetector.prototype.observe = function(value, index) {
      var _this = this;
      if (observable_facade_1.isObservable(value)) {
        if (lang_1.isBlank(this.subscriptions)) {
          this.subscriptions = collection_1.ListWrapper.createFixedSize(this.protos.length + 1);
          this.streams = collection_1.ListWrapper.createFixedSize(this.protos.length + 1);
        }
        if (lang_1.isBlank(this.subscriptions[index])) {
          this.streams[index] = value.changes;
          this.subscriptions[index] = value.changes.listen(function(_) {
            return _this.ref.requestCheck();
          });
        } else if (this.streams[index] !== value.changes) {
          this.subscriptions[index].cancel();
          this.streams[index] = value.changes;
          this.subscriptions[index] = value.changes.listen(function(_) {
            return _this.ref.requestCheck();
          });
        }
      }
      return value;
    };
    AbstractChangeDetector.prototype.notifyDispatcher = function(value) {
      this.dispatcher.notifyOnBinding(this._currentBinding(), value);
    };
    AbstractChangeDetector.prototype.addChange = function(changes, oldValue, newValue) {
      if (lang_1.isBlank(changes)) {
        changes = {};
      }
      changes[this._currentBinding().propertyName] = change_detection_util_1.ChangeDetectionUtil.simpleChange(oldValue, newValue);
      return changes;
    };
    AbstractChangeDetector.prototype._throwError = function(exception, stack) {
      var proto = this._currentBindingProto();
      var c = this.dispatcher.getDebugContext(proto.bindingRecord.elementIndex, proto.directiveIndex);
      var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.directive, c.context, c.locals, c.injector, proto.expressionAsString) : null;
      throw new exceptions_1.ChangeDetectionError(proto, exception, stack, context);
    };
    AbstractChangeDetector.prototype.throwOnChangeError = function(oldValue, newValue) {
      var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(oldValue, newValue);
      throw new exceptions_1.ExpressionChangedAfterItHasBeenCheckedException(this._currentBindingProto(), change, null);
    };
    AbstractChangeDetector.prototype.throwDehydratedError = function() {
      throw new exceptions_1.DehydratedException();
    };
    AbstractChangeDetector.prototype._currentBinding = function() {
      return this._currentBindingProto().bindingRecord;
    };
    AbstractChangeDetector.prototype._currentBindingProto = function() {
      return change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.protos, this.firstProtoInCurrentBinding);
    };
    return AbstractChangeDetector;
  })();
  exports.AbstractChangeDetector = AbstractChangeDetector;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/pipe_lifecycle_reflector.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function implementsOnDestroy(pipe) {
    return pipe.constructor.prototype.onDestroy;
  }
  exports.implementsOnDestroy = implementsOnDestroy;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("github:jspm/nodelibs-process@0.1.1/index.js", ["npm:process@0.10.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = System._nodeRequire ? process : require("npm:process@0.10.1.js");
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/dom/generic_browser_adapter.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var GenericBrowserDomAdapter = (function(_super) {
    __extends(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
      return el.getDistributedNodes();
    };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.cssToRules = function(css) {
      var style = this.createStyleElement(css);
      this.appendChild(this.defaultDoc().head, style);
      var rules = [];
      if (lang_1.isPresent(style.sheet)) {
        try {
          var rawRules = style.sheet.cssRules;
          rules = collection_1.ListWrapper.createFixedSize(rawRules.length);
          for (var i = 0; i < rawRules.length; i++) {
            rules[i] = rawRules[i];
          }
        } catch (e) {}
      } else {}
      this.remove(style);
      return rules;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
      return true;
    };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
      return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
    };
    return GenericBrowserDomAdapter;
  })(dom_adapter_1.DomAdapter);
  exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/reflection/reflector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var ReflectionInfo = (function() {
    function ReflectionInfo(annotations, parameters, factory, interfaces) {
      this._annotations = annotations;
      this._parameters = parameters;
      this._factory = factory;
      this._interfaces = interfaces;
    }
    return ReflectionInfo;
  })();
  exports.ReflectionInfo = ReflectionInfo;
  var Reflector = (function() {
    function Reflector(reflectionCapabilities) {
      this._injectableInfo = new collection_1.Map();
      this._getters = new collection_1.Map();
      this._setters = new collection_1.Map();
      this._methods = new collection_1.Map();
      this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.isReflectionEnabled = function() {
      return this.reflectionCapabilities.isReflectionEnabled();
    };
    Reflector.prototype.registerFunction = function(func, funcInfo) {
      this._injectableInfo.set(func, funcInfo);
    };
    Reflector.prototype.registerType = function(type, typeInfo) {
      this._injectableInfo.set(type, typeInfo);
    };
    Reflector.prototype.registerGetters = function(getters) {
      _mergeMaps(this._getters, getters);
    };
    Reflector.prototype.registerSetters = function(setters) {
      _mergeMaps(this._setters, setters);
    };
    Reflector.prototype.registerMethods = function(methods) {
      _mergeMaps(this._methods, methods);
    };
    Reflector.prototype.factory = function(type) {
      if (this._containsReflectionInfo(type)) {
        var res = this._injectableInfo.get(type)._factory;
        return lang_1.isPresent(res) ? res : null;
      } else {
        return this.reflectionCapabilities.factory(type);
      }
    };
    Reflector.prototype.parameters = function(typeOrFunc) {
      if (this._injectableInfo.has(typeOrFunc)) {
        var res = this._injectableInfo.get(typeOrFunc)._parameters;
        return lang_1.isPresent(res) ? res : [];
      } else {
        return this.reflectionCapabilities.parameters(typeOrFunc);
      }
    };
    Reflector.prototype.annotations = function(typeOrFunc) {
      if (this._injectableInfo.has(typeOrFunc)) {
        var res = this._injectableInfo.get(typeOrFunc)._annotations;
        return lang_1.isPresent(res) ? res : [];
      } else {
        return this.reflectionCapabilities.annotations(typeOrFunc);
      }
    };
    Reflector.prototype.interfaces = function(type) {
      if (this._injectableInfo.has(type)) {
        var res = this._injectableInfo.get(type)._interfaces;
        return lang_1.isPresent(res) ? res : [];
      } else {
        return this.reflectionCapabilities.interfaces(type);
      }
    };
    Reflector.prototype.getter = function(name) {
      if (this._getters.has(name)) {
        return this._getters.get(name);
      } else {
        return this.reflectionCapabilities.getter(name);
      }
    };
    Reflector.prototype.setter = function(name) {
      if (this._setters.has(name)) {
        return this._setters.get(name);
      } else {
        return this.reflectionCapabilities.setter(name);
      }
    };
    Reflector.prototype.method = function(name) {
      if (this._methods.has(name)) {
        return this._methods.get(name);
      } else {
        return this.reflectionCapabilities.method(name);
      }
    };
    Reflector.prototype._containsReflectionInfo = function(typeOrFunc) {
      return this._injectableInfo.has(typeOrFunc);
    };
    return Reflector;
  })();
  exports.Reflector = Reflector;
  function _mergeMaps(target, config) {
    collection_1.StringMapWrapper.forEach(config, function(v, k) {
      return target.set(k, v);
    });
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/reflection/reflection_capabilities.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var ReflectionCapabilities = (function() {
    function ReflectionCapabilities(reflect) {
      this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function() {
      return true;
    };
    ReflectionCapabilities.prototype.factory = function(t) {
      switch (t.length) {
        case 0:
          return function() {
            return new t();
          };
        case 1:
          return function(a1) {
            return new t(a1);
          };
        case 2:
          return function(a1, a2) {
            return new t(a1, a2);
          };
        case 3:
          return function(a1, a2, a3) {
            return new t(a1, a2, a3);
          };
        case 4:
          return function(a1, a2, a3, a4) {
            return new t(a1, a2, a3, a4);
          };
        case 5:
          return function(a1, a2, a3, a4, a5) {
            return new t(a1, a2, a3, a4, a5);
          };
        case 6:
          return function(a1, a2, a3, a4, a5, a6) {
            return new t(a1, a2, a3, a4, a5, a6);
          };
        case 7:
          return function(a1, a2, a3, a4, a5, a6, a7) {
            return new t(a1, a2, a3, a4, a5, a6, a7);
          };
        case 8:
          return function(a1, a2, a3, a4, a5, a6, a7, a8) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8);
          };
        case 9:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
          };
        case 10:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
          };
        case 11:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
          };
        case 12:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
          };
        case 13:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
          };
        case 14:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          };
        case 15:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
          };
        case 16:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
          };
        case 17:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
          };
        case 18:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
          };
        case 19:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
          };
        case 20:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
          };
      }
      ;
      throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
    };
    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function(paramTypes, paramAnnotations) {
      var result;
      if (typeof paramTypes === 'undefined') {
        result = collection_1.ListWrapper.createFixedSize(paramAnnotations.length);
      } else {
        result = collection_1.ListWrapper.createFixedSize(paramTypes.length);
      }
      for (var i = 0; i < result.length; i++) {
        if (typeof paramTypes === 'undefined') {
          result[i] = [];
        } else if (paramTypes[i] != Object) {
          result[i] = [paramTypes[i]];
        } else {
          result[i] = [];
        }
        if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
          result[i] = result[i].concat(paramAnnotations[i]);
        }
      }
      return result;
    };
    ReflectionCapabilities.prototype.parameters = function(typeOfFunc) {
      if (lang_1.isPresent(typeOfFunc.parameters)) {
        return typeOfFunc.parameters;
      }
      if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
        var paramAnnotations = this._reflect.getMetadata('parameters', typeOfFunc);
        var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOfFunc);
        if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
          return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
        }
      }
      return collection_1.ListWrapper.createFixedSize(typeOfFunc.length);
    };
    ReflectionCapabilities.prototype.annotations = function(typeOfFunc) {
      if (lang_1.isPresent(typeOfFunc.annotations)) {
        var annotations = typeOfFunc.annotations;
        if (lang_1.isFunction(annotations) && annotations.annotations) {
          annotations = annotations.annotations;
        }
        return annotations;
      }
      if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
        var annotations = this._reflect.getMetadata('annotations', typeOfFunc);
        if (lang_1.isPresent(annotations))
          return annotations;
      }
      return [];
    };
    ReflectionCapabilities.prototype.interfaces = function(type) {
      throw new lang_1.BaseException("JavaScript does not support interfaces");
    };
    ReflectionCapabilities.prototype.getter = function(name) {
      return new Function('o', 'return o.' + name + ';');
    };
    ReflectionCapabilities.prototype.setter = function(name) {
      return new Function('o', 'v', 'return o.' + name + ' = v;');
    };
    ReflectionCapabilities.prototype.method = function(name) {
      var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
      return new Function('o', 'args', functionBody);
    };
    return ReflectionCapabilities;
  })();
  exports.ReflectionCapabilities = ReflectionCapabilities;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/uppercase_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var invalid_pipe_argument_exception_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var UpperCasePipe = (function() {
    function UpperCasePipe() {}
    UpperCasePipe.prototype.transform = function(value, args) {
      if (args === void 0) {
        args = null;
      }
      if (lang_1.isBlank(value))
        return value;
      if (!lang_1.isString(value)) {
        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
      }
      return lang_1.StringWrapper.toUpperCase(value);
    };
    UpperCasePipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'uppercase'}), di_1.Injectable(), __metadata('design:paramtypes', [])], UpperCasePipe);
    return UpperCasePipe;
  })();
  exports.UpperCasePipe = UpperCasePipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/lowercase_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var invalid_pipe_argument_exception_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var LowerCasePipe = (function() {
    function LowerCasePipe() {}
    LowerCasePipe.prototype.transform = function(value, args) {
      if (args === void 0) {
        args = null;
      }
      if (lang_1.isBlank(value))
        return value;
      if (!lang_1.isString(value)) {
        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
      }
      return lang_1.StringWrapper.toLowerCase(value);
    };
    LowerCasePipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'lowercase'}), di_1.Injectable(), __metadata('design:paramtypes', [])], LowerCasePipe);
    return LowerCasePipe;
  })();
  exports.LowerCasePipe = LowerCasePipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/async_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/async.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", "npm:angular2@2.0.0-alpha.35/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var async_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/async.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/change_detection.js");
  var invalid_pipe_argument_exception_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js");
  var change_detection_2 = require("npm:angular2@2.0.0-alpha.35/change_detection.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var ObservableStrategy = (function() {
    function ObservableStrategy() {}
    ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function(e) {
        throw e;
      });
    };
    ObservableStrategy.prototype.dispose = function(subscription) {
      async_1.ObservableWrapper.dispose(subscription);
    };
    ObservableStrategy.prototype.onDestroy = function(subscription) {
      async_1.ObservableWrapper.dispose(subscription);
    };
    return ObservableStrategy;
  })();
  var PromiseStrategy = (function() {
    function PromiseStrategy() {}
    PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.then(updateLatestValue);
    };
    PromiseStrategy.prototype.dispose = function(subscription) {};
    PromiseStrategy.prototype.onDestroy = function(subscription) {};
    return PromiseStrategy;
  })();
  var _promiseStrategy = new PromiseStrategy();
  var _observableStrategy = new ObservableStrategy();
  var AsyncPipe = (function() {
    function AsyncPipe(_ref) {
      this._ref = _ref;
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
      this._strategy = null;
    }
    AsyncPipe.prototype.onDestroy = function() {
      if (lang_1.isPresent(this._subscription)) {
        this._dispose();
      }
    };
    AsyncPipe.prototype.transform = function(obj, args) {
      if (lang_1.isBlank(this._obj)) {
        if (lang_1.isPresent(obj)) {
          this._subscribe(obj);
        }
        return null;
      }
      if (obj !== this._obj) {
        this._dispose();
        return this.transform(obj);
      }
      if (this._latestValue === this._latestReturnedValue) {
        return this._latestReturnedValue;
      } else {
        this._latestReturnedValue = this._latestValue;
        return change_detection_1.WrappedValue.wrap(this._latestValue);
      }
    };
    AsyncPipe.prototype._subscribe = function(obj) {
      var _this = this;
      this._obj = obj;
      this._strategy = this._selectStrategy(obj);
      this._subscription = this._strategy.createSubscription(obj, function(value) {
        return _this._updateLatestValue(obj, value);
      });
    };
    AsyncPipe.prototype._selectStrategy = function(obj) {
      if (lang_1.isPromise(obj)) {
        return _promiseStrategy;
      } else if (async_1.ObservableWrapper.isObservable(obj)) {
        return _observableStrategy;
      } else {
        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
      }
    };
    AsyncPipe.prototype._dispose = function() {
      this._strategy.dispose(this._subscription);
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
    };
    AsyncPipe.prototype._updateLatestValue = function(async, value) {
      if (async === this._obj) {
        this._latestValue = value;
        this._ref.requestCheck();
      }
    };
    AsyncPipe = __decorate([metadata_1.Pipe({name: 'async'}), di_1.Injectable(), __metadata('design:paramtypes', [change_detection_2.ChangeDetectorRef])], AsyncPipe);
    return AsyncPipe;
  })();
  exports.AsyncPipe = AsyncPipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/json_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var JsonPipe = (function() {
    function JsonPipe() {}
    JsonPipe.prototype.transform = function(value, args) {
      if (args === void 0) {
        args = null;
      }
      return lang_1.Json.stringify(value);
    };
    JsonPipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'json'}), di_1.Injectable(), __metadata('design:paramtypes', [])], JsonPipe);
    return JsonPipe;
  })();
  exports.JsonPipe = JsonPipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/date_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/intl.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var intl_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/intl.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var invalid_pipe_argument_exception_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var defaultLocale = 'en-US';
  var DatePipe = (function() {
    function DatePipe() {}
    DatePipe.prototype.transform = function(value, args) {
      if (lang_1.isBlank(value))
        return null;
      if (!this.supports(value)) {
        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
      }
      var pattern = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'mediumDate';
      if (lang_1.isNumber(value)) {
        value = lang_1.DateWrapper.fromMillis(value);
      }
      if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
        pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
      }
      return intl_1.DateFormatter.format(value, defaultLocale, pattern);
    };
    DatePipe.prototype.supports = function(obj) {
      return lang_1.isDate(obj) || lang_1.isNumber(obj);
    };
    DatePipe._ALIASES = {
      'medium': 'yMMMdjms',
      'short': 'yMdjm',
      'fullDate': 'yMMMMEEEEd',
      'longDate': 'yMMMMd',
      'mediumDate': 'yMMMd',
      'shortDate': 'yMd',
      'mediumTime': 'jms',
      'shortTime': 'jm'
    };
    DatePipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'date'}), di_1.Injectable(), __metadata('design:paramtypes', [])], DatePipe);
    return DatePipe;
  })();
  exports.DatePipe = DatePipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/number_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/intl.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var intl_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/intl.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var invalid_pipe_argument_exception_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var defaultLocale = 'en-US';
  var _re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
  var NumberPipe = (function() {
    function NumberPipe() {}
    NumberPipe._format = function(value, style, digits, currency, currencyAsSymbol) {
      if (currency === void 0) {
        currency = null;
      }
      if (currencyAsSymbol === void 0) {
        currencyAsSymbol = false;
      }
      if (lang_1.isBlank(value))
        return null;
      if (!lang_1.isNumber(value)) {
        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
      }
      var minInt = 1,
          minFraction = 0,
          maxFraction = 3;
      if (lang_1.isPresent(digits)) {
        var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
        if (lang_1.isBlank(parts)) {
          throw new lang_1.BaseException(digits + " is not a valid digit info for number pipes");
        }
        if (lang_1.isPresent(parts[1])) {
          minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
        }
        if (lang_1.isPresent(parts[3])) {
          minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
        }
        if (lang_1.isPresent(parts[5])) {
          maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
        }
      }
      return intl_1.NumberFormatter.format(value, defaultLocale, style, {
        minimumIntegerDigits: minInt,
        minimumFractionDigits: minFraction,
        maximumFractionDigits: maxFraction,
        currency: currency,
        currencyAsSymbol: currencyAsSymbol
      });
    };
    NumberPipe = __decorate([lang_1.CONST(), di_1.Injectable(), __metadata('design:paramtypes', [])], NumberPipe);
    return NumberPipe;
  })();
  exports.NumberPipe = NumberPipe;
  var DecimalPipe = (function(_super) {
    __extends(DecimalPipe, _super);
    function DecimalPipe() {
      _super.apply(this, arguments);
    }
    DecimalPipe.prototype.transform = function(value, args) {
      var digits = collection_1.ListWrapper.first(args);
      return NumberPipe._format(value, intl_1.NumberFormatStyle.DECIMAL, digits);
    };
    DecimalPipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'number'}), di_1.Injectable(), __metadata('design:paramtypes', [])], DecimalPipe);
    return DecimalPipe;
  })(NumberPipe);
  exports.DecimalPipe = DecimalPipe;
  var PercentPipe = (function(_super) {
    __extends(PercentPipe, _super);
    function PercentPipe() {
      _super.apply(this, arguments);
    }
    PercentPipe.prototype.transform = function(value, args) {
      var digits = collection_1.ListWrapper.first(args);
      return NumberPipe._format(value, intl_1.NumberFormatStyle.PERCENT, digits);
    };
    PercentPipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'percent'}), di_1.Injectable(), __metadata('design:paramtypes', [])], PercentPipe);
    return PercentPipe;
  })(NumberPipe);
  exports.PercentPipe = PercentPipe;
  var CurrencyPipe = (function(_super) {
    __extends(CurrencyPipe, _super);
    function CurrencyPipe() {
      _super.apply(this, arguments);
    }
    CurrencyPipe.prototype.transform = function(value, args) {
      var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'USD';
      var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
      var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
      return NumberPipe._format(value, intl_1.NumberFormatStyle.CURRENCY, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe = __decorate([lang_1.CONST(), metadata_1.Pipe({name: 'currency'}), di_1.Injectable(), __metadata('design:paramtypes', [])], CurrencyPipe);
    return CurrencyPipe;
  })(NumberPipe);
  exports.CurrencyPipe = CurrencyPipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/limit_to_pipe.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/math.js", "npm:angular2@2.0.0-alpha.35/di.js", "npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", "npm:angular2@2.0.0-alpha.35/src/core/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var math_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/math.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var invalid_pipe_argument_exception_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/src/core/metadata.js");
  var LimitToPipe = (function() {
    function LimitToPipe() {}
    LimitToPipe.prototype.supports = function(obj) {
      return lang_1.isString(obj) || lang_1.isArray(obj);
    };
    LimitToPipe.prototype.transform = function(value, args) {
      if (args === void 0) {
        args = null;
      }
      if (lang_1.isBlank(args) || args.length == 0) {
        throw new lang_1.BaseException('limitTo pipe requires one argument');
      }
      if (!this.supports(value)) {
        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LimitToPipe, value);
      }
      if (lang_1.isBlank(value))
        return value;
      var limit = args[0];
      var left = 0,
          right = math_1.Math.min(limit, value.length);
      if (limit < 0) {
        left = math_1.Math.max(0, value.length + limit);
        right = value.length;
      }
      if (lang_1.isString(value)) {
        return lang_1.StringWrapper.substring(value, left, right);
      }
      return collection_1.ListWrapper.slice(value, left, right);
    };
    LimitToPipe = __decorate([metadata_1.Pipe({name: 'limitTo'}), di_1.Injectable(), __metadata('design:paramtypes', [])], LimitToPipe);
    return LimitToPipe;
  })();
  exports.LimitToPipe = LimitToPipe;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/default_pipes.js", ["npm:angular2@2.0.0-alpha.35/src/pipes/async_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/uppercase_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/lowercase_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/json_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/limit_to_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/date_pipe.js", "npm:angular2@2.0.0-alpha.35/src/pipes/number_pipe.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/di.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var async_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/async_pipe.js");
  var uppercase_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/uppercase_pipe.js");
  var lowercase_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/lowercase_pipe.js");
  var json_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/json_pipe.js");
  var limit_to_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/limit_to_pipe.js");
  var date_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/date_pipe.js");
  var number_pipe_1 = require("npm:angular2@2.0.0-alpha.35/src/pipes/number_pipe.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var di_1 = require("npm:angular2@2.0.0-alpha.35/di.js");
  var DEFAULT_PIPES_LIST = lang_1.CONST_EXPR([async_pipe_1.AsyncPipe, uppercase_pipe_1.UpperCasePipe, lowercase_pipe_1.LowerCasePipe, json_pipe_1.JsonPipe, limit_to_pipe_1.LimitToPipe, number_pipe_1.DecimalPipe, number_pipe_1.PercentPipe, number_pipe_1.CurrencyPipe, date_pipe_1.DatePipe]);
  exports.DEFAULT_PIPES_TOKEN = lang_1.CONST_EXPR(new di_1.OpaqueToken("Default Pipes"));
  exports.DEFAULT_PIPES = lang_1.CONST_EXPR(new di_1.Binding(exports.DEFAULT_PIPES_TOKEN, {toValue: DEFAULT_PIPES_LIST}));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/events/hammer_common.js", ["npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var event_manager_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/events/event_manager.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var _eventNames = {
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    'press': true,
    'pressup': true,
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    'tap': true
  };
  var HammerGesturesPluginCommon = (function(_super) {
    __extends(HammerGesturesPluginCommon, _super);
    function HammerGesturesPluginCommon() {
      _super.call(this);
    }
    HammerGesturesPluginCommon.prototype.supports = function(eventName) {
      eventName = eventName.toLowerCase();
      return collection_1.StringMapWrapper.contains(_eventNames, eventName);
    };
    return HammerGesturesPluginCommon;
  })(event_manager_1.EventManagerPlugin);
  exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/testability/get_testability.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var PublicTestability = (function() {
    function PublicTestability(testability) {
      this._testability = testability;
    }
    PublicTestability.prototype.whenStable = function(callback) {
      this._testability.whenStable(callback);
    };
    PublicTestability.prototype.findBindings = function(using, binding, exactMatch) {
      return this._testability.findBindings(using, binding, exactMatch);
    };
    return PublicTestability;
  })();
  var GetTestability = (function() {
    function GetTestability() {}
    GetTestability.addToWindow = function(registry) {
      lang_1.global.getAngularTestability = function(elem, findInAncestors) {
        if (findInAncestors === void 0) {
          findInAncestors = true;
        }
        var testability = registry.findTestabilityInTree(elem, findInAncestors);
        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }
        return new PublicTestability(testability);
      };
      lang_1.global.getAllAngularTestabilities = function() {
        var testabilities = registry.getAllTestabilities();
        return testabilities.map(function(testability) {
          return new PublicTestability(testability);
        });
      };
    };
    return GetTestability;
  })();
  exports.GetTestability = GetTestability;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/pipes/pipes.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ProtoPipes = (function() {
    function ProtoPipes(bindings) {
      var _this = this;
      this.config = {};
      bindings.forEach(function(b) {
        return _this.config[b.name] = b;
      });
    }
    ProtoPipes.prototype.get = function(name) {
      var binding = this.config[name];
      if (lang_1.isBlank(binding))
        throw new lang_1.BaseException("Cannot find pipe '" + name + "'.");
      return binding;
    };
    return ProtoPipes;
  })();
  exports.ProtoPipes = ProtoPipes;
  var Pipes = (function() {
    function Pipes(proto, injector) {
      this.proto = proto;
      this.injector = injector;
    }
    Pipes.prototype.get = function(name) {
      var b = this.proto.get(name);
      return this.injector.instantiateResolved(b);
    };
    return Pipes;
  })();
  exports.Pipes = Pipes;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/element_binder.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var ElementBinder = (function() {
    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective) {
      this.index = index;
      this.parent = parent;
      this.distanceToParent = distanceToParent;
      this.protoElementInjector = protoElementInjector;
      this.componentDirective = componentDirective;
      this.nestedProtoView = null;
      if (lang_1.isBlank(index)) {
        throw new lang_1.BaseException('null index not allowed.');
      }
    }
    ElementBinder.prototype.hasStaticComponent = function() {
      return lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
    };
    ElementBinder.prototype.hasEmbeddedProtoView = function() {
      return !lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
    };
    return ElementBinder;
  })();
  exports.ElementBinder = ElementBinder;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/core/compiler/directive_lifecycle_reflector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/metadata.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var metadata_1 = require("npm:angular2@2.0.0-alpha.35/metadata.js");
  function hasLifecycleHook(e, type, annotation) {
    if (lang_1.isPresent(annotation.lifecycle)) {
      return annotation.lifecycle.indexOf(e) !== -1;
    } else {
      if (!(type instanceof lang_1.Type))
        return false;
      var proto = type.prototype;
      switch (e) {
        case metadata_1.LifecycleEvent.onAllChangesDone:
          return !!proto.onAllChangesDone;
        case metadata_1.LifecycleEvent.onChange:
          return !!proto.onChange;
        case metadata_1.LifecycleEvent.onCheck:
          return !!proto.onCheck;
        case metadata_1.LifecycleEvent.onDestroy:
          return !!proto.onDestroy;
        case metadata_1.LifecycleEvent.onInit:
          return !!proto.onInit;
        default:
          return false;
      }
    }
  }
  exports.hasLifecycleHook = hasLifecycleHook;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/index.js", ["npm:rx@2.5.1/dist/rx.js", "npm:rx@2.5.1/dist/rx.aggregates.js", "npm:rx@2.5.1/dist/rx.async.js", "npm:rx@2.5.1/dist/rx.backpressure.js", "npm:rx@2.5.1/dist/rx.binding.js", "npm:rx@2.5.1/dist/rx.coincidence.js", "npm:rx@2.5.1/dist/rx.experimental.js", "npm:rx@2.5.1/dist/rx.joinpatterns.js", "npm:rx@2.5.1/dist/rx.sorting.js", "npm:rx@2.5.1/dist/rx.virtualtime.js", "npm:rx@2.5.1/dist/rx.testing.js", "npm:rx@2.5.1/dist/rx.time.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Rx = require("npm:rx@2.5.1/dist/rx.js");
  require("npm:rx@2.5.1/dist/rx.aggregates.js");
  require("npm:rx@2.5.1/dist/rx.async.js");
  require("npm:rx@2.5.1/dist/rx.backpressure.js");
  require("npm:rx@2.5.1/dist/rx.binding.js");
  require("npm:rx@2.5.1/dist/rx.coincidence.js");
  require("npm:rx@2.5.1/dist/rx.experimental.js");
  require("npm:rx@2.5.1/dist/rx.joinpatterns.js");
  require("npm:rx@2.5.1/dist/rx.sorting.js");
  require("npm:rx@2.5.1/dist/rx.virtualtime.js");
  require("npm:rx@2.5.1/dist/rx.testing.js");
  require("npm:rx@2.5.1/dist/rx.time.js");
  module.exports = Rx;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_pipeline.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_element.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_control.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view_builder.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var compile_element_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_element.js");
  var compile_control_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_control.js");
  var proto_view_builder_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view_builder.js");
  var CompilePipeline = (function() {
    function CompilePipeline(steps) {
      this.steps = steps;
      this._control = new compile_control_1.CompileControl(steps);
    }
    CompilePipeline.prototype.processStyles = function(styles) {
      var _this = this;
      return styles.map(function(style) {
        _this.steps.forEach(function(step) {
          style = step.processStyle(style);
        });
        return style;
      });
    };
    CompilePipeline.prototype.processElements = function(rootElement, protoViewType, viewDef) {
      var results = [];
      var compilationCtxtDescription = viewDef.componentId;
      var rootCompileElement = new compile_element_1.CompileElement(rootElement, compilationCtxtDescription);
      rootCompileElement.inheritedProtoView = new proto_view_builder_1.ProtoViewBuilder(rootElement, protoViewType, viewDef.encapsulation);
      rootCompileElement.isViewRoot = true;
      this._processElement(results, null, rootCompileElement, compilationCtxtDescription);
      return results;
    };
    CompilePipeline.prototype._processElement = function(results, parent, current, compilationCtxtDescription) {
      if (compilationCtxtDescription === void 0) {
        compilationCtxtDescription = '';
      }
      var additionalChildren = this._control.internalProcess(results, 0, parent, current);
      if (current.compileChildren) {
        var node = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.templateAwareRoot(current.element));
        while (lang_1.isPresent(node)) {
          var nextNode = dom_adapter_1.DOM.nextSibling(node);
          if (dom_adapter_1.DOM.isElementNode(node)) {
            var childCompileElement = new compile_element_1.CompileElement(node, compilationCtxtDescription);
            childCompileElement.inheritedProtoView = current.inheritedProtoView;
            childCompileElement.inheritedElementBinder = current.inheritedElementBinder;
            childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;
            this._processElement(results, current, childCompileElement);
          }
          node = nextNode;
        }
      }
      if (lang_1.isPresent(additionalChildren)) {
        for (var i = 0; i < additionalChildren.length; i++) {
          this._processElement(results, current, additionalChildren[i]);
        }
      }
    };
    return CompilePipeline;
  })();
  exports.CompilePipeline = CompilePipeline;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_step_factory.js", ["npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/property_binding_parser.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/text_interpolation_parser.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/directive_parser.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_splitter.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_encapsulator.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var property_binding_parser_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/property_binding_parser.js");
  var text_interpolation_parser_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/text_interpolation_parser.js");
  var directive_parser_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/directive_parser.js");
  var view_splitter_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_splitter.js");
  var style_encapsulator_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_encapsulator.js");
  var CompileStepFactory = (function() {
    function CompileStepFactory() {}
    CompileStepFactory.prototype.createSteps = function(view) {
      return null;
    };
    return CompileStepFactory;
  })();
  exports.CompileStepFactory = CompileStepFactory;
  var DefaultStepFactory = (function(_super) {
    __extends(DefaultStepFactory, _super);
    function DefaultStepFactory(_parser, _appId) {
      _super.call(this);
      this._parser = _parser;
      this._appId = _appId;
      this._componentUIDsCache = new Map();
    }
    DefaultStepFactory.prototype.createSteps = function(view) {
      return [new view_splitter_1.ViewSplitter(this._parser), new property_binding_parser_1.PropertyBindingParser(this._parser), new directive_parser_1.DirectiveParser(this._parser, view.directives), new text_interpolation_parser_1.TextInterpolationParser(this._parser), new style_encapsulator_1.StyleEncapsulator(this._appId, view, this._componentUIDsCache)];
    };
    return DefaultStepFactory;
  })(CompileStepFactory);
  exports.DefaultStepFactory = DefaultStepFactory;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view_merger.js", ["npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/element_binder.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var proto_view_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js");
  var element_binder_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/element_binder.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  function mergeProtoViewsRecursively(templateCloner, protoViewRefs) {
    var clonedProtoViews = [];
    var hostViewAndBinderIndices = [];
    cloneProtoViews(templateCloner, protoViewRefs, clonedProtoViews, hostViewAndBinderIndices);
    var mainProtoView = clonedProtoViews[0];
    mergeEmbeddedPvsIntoComponentOrRootPv(clonedProtoViews, hostViewAndBinderIndices);
    var fragments = [];
    var elementsWithNativeShadowRoot = new Set();
    mergeComponents(clonedProtoViews, hostViewAndBinderIndices, fragments, elementsWithNativeShadowRoot);
    markBoundTextNodeParentsAsBoundElements(clonedProtoViews);
    var fragmentsRootNodeCount = fragments.map(function(fragment) {
      return fragment.length;
    });
    var rootElement = createRootElementFromFragments(fragments);
    var rootNode = dom_adapter_1.DOM.content(rootElement);
    var mergedBoundElements = util_1.queryBoundElements(rootNode, false);
    var mergedBoundTextIndices = new Map();
    var boundTextNodeMap = indexBoundTextNodes(clonedProtoViews);
    var rootTextNodeIndices = calcRootTextNodeIndices(rootNode, boundTextNodeMap, mergedBoundTextIndices);
    var mergedElementBinders = calcElementBinders(clonedProtoViews, mergedBoundElements, elementsWithNativeShadowRoot, boundTextNodeMap, mergedBoundTextIndices);
    var mappedElementIndices = calcMappedElementIndices(clonedProtoViews, mergedBoundElements);
    var mappedTextIndices = calcMappedTextIndices(clonedProtoViews, mergedBoundTextIndices);
    var hostElementIndicesByViewIndex = calcHostElementIndicesByViewIndex(clonedProtoViews, hostViewAndBinderIndices);
    var nestedViewCounts = calcNestedViewCounts(hostViewAndBinderIndices);
    var mergedProtoView = proto_view_1.DomProtoView.create(templateCloner, mainProtoView.original.type, rootElement, mainProtoView.original.encapsulation, fragmentsRootNodeCount, rootTextNodeIndices, mergedElementBinders, new Map());
    return new api_1.RenderProtoViewMergeMapping(new proto_view_1.DomProtoViewRef(mergedProtoView), fragmentsRootNodeCount.length, mappedElementIndices, mergedBoundElements.length, mappedTextIndices, hostElementIndicesByViewIndex, nestedViewCounts);
  }
  exports.mergeProtoViewsRecursively = mergeProtoViewsRecursively;
  function cloneProtoViews(templateCloner, protoViewRefs, targetClonedProtoViews, targetHostViewAndBinderIndices) {
    var hostProtoView = proto_view_1.resolveInternalDomProtoView(protoViewRefs[0]);
    var hostPvIdx = targetClonedProtoViews.length;
    targetClonedProtoViews.push(util_1.cloneAndQueryProtoView(templateCloner, hostProtoView, false));
    if (targetHostViewAndBinderIndices.length === 0) {
      targetHostViewAndBinderIndices.push([null, null]);
    }
    var protoViewIdx = 1;
    for (var i = 0; i < hostProtoView.elementBinders.length; i++) {
      var binder = hostProtoView.elementBinders[i];
      if (binder.hasNestedProtoView) {
        var nestedEntry = protoViewRefs[protoViewIdx++];
        if (lang_1.isPresent(nestedEntry)) {
          targetHostViewAndBinderIndices.push([hostPvIdx, i]);
          if (lang_1.isArray(nestedEntry)) {
            cloneProtoViews(templateCloner, nestedEntry, targetClonedProtoViews, targetHostViewAndBinderIndices);
          } else {
            targetClonedProtoViews.push(util_1.cloneAndQueryProtoView(templateCloner, proto_view_1.resolveInternalDomProtoView(nestedEntry), false));
          }
        }
      }
    }
  }
  function markBoundTextNodeParentsAsBoundElements(mergableProtoViews) {
    mergableProtoViews.forEach(function(mergableProtoView) {
      mergableProtoView.boundTextNodes.forEach(function(textNode) {
        var parentNode = textNode.parentNode;
        if (lang_1.isPresent(parentNode) && dom_adapter_1.DOM.isElementNode(parentNode)) {
          dom_adapter_1.DOM.addClass(parentNode, util_1.NG_BINDING_CLASS);
        }
      });
    });
  }
  function indexBoundTextNodes(mergableProtoViews) {
    var boundTextNodeMap = new Map();
    for (var pvIndex = 0; pvIndex < mergableProtoViews.length; pvIndex++) {
      var mergableProtoView = mergableProtoViews[pvIndex];
      mergableProtoView.boundTextNodes.forEach(function(textNode) {
        boundTextNodeMap.set(textNode, null);
      });
    }
    return boundTextNodeMap;
  }
  function mergeEmbeddedPvsIntoComponentOrRootPv(clonedProtoViews, hostViewAndBinderIndices) {
    var nearestHostComponentOrRootPvIndices = calcNearestHostComponentOrRootPvIndices(clonedProtoViews, hostViewAndBinderIndices);
    for (var viewIdx = 1; viewIdx < clonedProtoViews.length; viewIdx++) {
      var clonedProtoView = clonedProtoViews[viewIdx];
      if (clonedProtoView.original.type === api_1.ViewType.EMBEDDED) {
        var hostComponentIdx = nearestHostComponentOrRootPvIndices[viewIdx];
        var hostPv = clonedProtoViews[hostComponentIdx];
        clonedProtoView.fragments.forEach(function(fragment) {
          return hostPv.fragments.push(fragment);
        });
      }
    }
  }
  function calcNearestHostComponentOrRootPvIndices(clonedProtoViews, hostViewAndBinderIndices) {
    var nearestHostComponentOrRootPvIndices = collection_1.ListWrapper.createFixedSize(clonedProtoViews.length);
    nearestHostComponentOrRootPvIndices[0] = null;
    for (var viewIdx = 1; viewIdx < hostViewAndBinderIndices.length; viewIdx++) {
      var hostViewIdx = hostViewAndBinderIndices[viewIdx][0];
      var hostProtoView = clonedProtoViews[hostViewIdx];
      if (hostViewIdx === 0 || hostProtoView.original.type === api_1.ViewType.COMPONENT) {
        nearestHostComponentOrRootPvIndices[viewIdx] = hostViewIdx;
      } else {
        nearestHostComponentOrRootPvIndices[viewIdx] = nearestHostComponentOrRootPvIndices[hostViewIdx];
      }
    }
    return nearestHostComponentOrRootPvIndices;
  }
  function mergeComponents(clonedProtoViews, hostViewAndBinderIndices, targetFragments, targetElementsWithNativeShadowRoot) {
    var hostProtoView = clonedProtoViews[0];
    hostProtoView.fragments.forEach(function(fragment) {
      return targetFragments.push(fragment);
    });
    for (var viewIdx = 1; viewIdx < clonedProtoViews.length; viewIdx++) {
      var hostViewIdx = hostViewAndBinderIndices[viewIdx][0];
      var hostBinderIdx = hostViewAndBinderIndices[viewIdx][1];
      var hostProtoView = clonedProtoViews[hostViewIdx];
      var clonedProtoView = clonedProtoViews[viewIdx];
      if (clonedProtoView.original.type === api_1.ViewType.COMPONENT) {
        mergeComponent(hostProtoView, hostBinderIdx, clonedProtoView, targetFragments, targetElementsWithNativeShadowRoot);
      }
    }
  }
  function mergeComponent(hostProtoView, binderIdx, nestedProtoView, targetFragments, targetElementsWithNativeShadowRoot) {
    var hostElement = hostProtoView.boundElements[binderIdx];
    var fragmentElements = mapFragmentsIntoElements(nestedProtoView.fragments);
    var contentElements = findContentElements(fragmentElements);
    var projectableNodes = dom_adapter_1.DOM.childNodesAsList(hostElement);
    for (var i = 0; i < contentElements.length; i++) {
      var contentElement = contentElements[i];
      var select = dom_adapter_1.DOM.getAttribute(contentElement, 'select');
      projectableNodes = projectMatchingNodes(select, contentElement, projectableNodes);
    }
    var fragments = extractFragmentNodesFromElements(fragmentElements);
    var useNativeShadowRoot = nestedProtoView.original.encapsulation === api_1.ViewEncapsulation.NATIVE;
    if (useNativeShadowRoot) {
      targetElementsWithNativeShadowRoot.add(hostElement);
    }
    collection_1.MapWrapper.forEach(nestedProtoView.original.hostAttributes, function(attrValue, attrName) {
      dom_adapter_1.DOM.setAttribute(hostElement, attrName, attrValue);
    });
    appendComponentNodesToHost(hostProtoView, binderIdx, fragments[0], useNativeShadowRoot);
    for (var i = 1; i < fragments.length; i++) {
      targetFragments.push(fragments[i]);
    }
  }
  function mapFragmentsIntoElements(fragments) {
    return fragments.map(function(fragment) {
      var fragmentElement = dom_adapter_1.DOM.createTemplate('');
      fragment.forEach(function(node) {
        return dom_adapter_1.DOM.appendChild(dom_adapter_1.DOM.content(fragmentElement), node);
      });
      return fragmentElement;
    });
  }
  function extractFragmentNodesFromElements(fragmentElements) {
    return fragmentElements.map(function(fragmentElement) {
      return dom_adapter_1.DOM.childNodesAsList(dom_adapter_1.DOM.content(fragmentElement));
    });
  }
  function findContentElements(fragmentElements) {
    var contentElements = [];
    fragmentElements.forEach(function(fragmentElement) {
      var fragmentContentElements = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(fragmentElement), util_1.NG_CONTENT_ELEMENT_NAME);
      for (var i = 0; i < fragmentContentElements.length; i++) {
        contentElements.push(fragmentContentElements[i]);
      }
    });
    return sortContentElements(contentElements);
  }
  function appendComponentNodesToHost(hostProtoView, binderIdx, componentRootNodes, useNativeShadowRoot) {
    var hostElement = hostProtoView.boundElements[binderIdx];
    if (useNativeShadowRoot) {
      var shadowRootWrapper = dom_adapter_1.DOM.createElement(util_1.NG_SHADOW_ROOT_ELEMENT_NAME);
      for (var i = 0; i < componentRootNodes.length; i++) {
        dom_adapter_1.DOM.appendChild(shadowRootWrapper, componentRootNodes[i]);
      }
      var firstChild = dom_adapter_1.DOM.firstChild(hostElement);
      if (lang_1.isPresent(firstChild)) {
        dom_adapter_1.DOM.insertBefore(firstChild, shadowRootWrapper);
      } else {
        dom_adapter_1.DOM.appendChild(hostElement, shadowRootWrapper);
      }
    } else {
      dom_adapter_1.DOM.clearNodes(hostElement);
      for (var i = 0; i < componentRootNodes.length; i++) {
        dom_adapter_1.DOM.appendChild(hostElement, componentRootNodes[i]);
      }
    }
  }
  function projectMatchingNodes(selector, contentElement, nodes) {
    var remaining = [];
    dom_adapter_1.DOM.insertBefore(contentElement, dom_adapter_1.DOM.createComment('['));
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var matches = false;
      if (isWildcard(selector)) {
        matches = true;
      } else if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.elementMatches(node, selector)) {
        matches = true;
      }
      if (matches) {
        dom_adapter_1.DOM.insertBefore(contentElement, node);
      } else {
        remaining.push(node);
      }
    }
    dom_adapter_1.DOM.insertBefore(contentElement, dom_adapter_1.DOM.createComment(']'));
    dom_adapter_1.DOM.remove(contentElement);
    return remaining;
  }
  function isWildcard(selector) {
    return lang_1.isBlank(selector) || selector.length === 0 || selector == '*';
  }
  function sortContentElements(contentElements) {
    var firstWildcard = null;
    var sorted = [];
    contentElements.forEach(function(contentElement) {
      var select = dom_adapter_1.DOM.getAttribute(contentElement, 'select');
      if (isWildcard(select)) {
        if (lang_1.isBlank(firstWildcard)) {
          firstWildcard = contentElement;
        }
      } else {
        sorted.push(contentElement);
      }
    });
    if (lang_1.isPresent(firstWildcard)) {
      sorted.push(firstWildcard);
    }
    return sorted;
  }
  function createRootElementFromFragments(fragments) {
    var rootElement = dom_adapter_1.DOM.createTemplate('');
    var rootNode = dom_adapter_1.DOM.content(rootElement);
    for (var i = 0; i < fragments.length; i++) {
      var fragment = fragments[i];
      if (i >= 1) {
        dom_adapter_1.DOM.appendChild(rootNode, dom_adapter_1.DOM.createComment('|'));
      }
      fragment.forEach(function(node) {
        dom_adapter_1.DOM.appendChild(rootNode, node);
      });
    }
    return rootElement;
  }
  function calcRootTextNodeIndices(rootNode, boundTextNodes, targetBoundTextIndices) {
    var rootTextNodeIndices = [];
    util_1.queryBoundTextNodeIndices(rootNode, boundTextNodes, function(textNode, nodeIndex, _) {
      rootTextNodeIndices.push(nodeIndex);
      targetBoundTextIndices.set(textNode, targetBoundTextIndices.size);
    });
    return rootTextNodeIndices;
  }
  function calcElementBinders(clonedProtoViews, mergedBoundElements, elementsWithNativeShadowRoot, boundTextNodes, targetBoundTextIndices) {
    var elementBinderByElement = indexElementBindersByElement(clonedProtoViews);
    var mergedElementBinders = [];
    for (var i = 0; i < mergedBoundElements.length; i++) {
      var element = mergedBoundElements[i];
      var textNodeIndices = [];
      util_1.queryBoundTextNodeIndices(element, boundTextNodes, function(textNode, nodeIndex, _) {
        textNodeIndices.push(nodeIndex);
        targetBoundTextIndices.set(textNode, targetBoundTextIndices.size);
      });
      mergedElementBinders.push(updateElementBinders(elementBinderByElement.get(element), textNodeIndices, collection_1.SetWrapper.has(elementsWithNativeShadowRoot, element)));
    }
    return mergedElementBinders;
  }
  function indexElementBindersByElement(mergableProtoViews) {
    var elementBinderByElement = new Map();
    mergableProtoViews.forEach(function(mergableProtoView) {
      for (var i = 0; i < mergableProtoView.boundElements.length; i++) {
        var el = mergableProtoView.boundElements[i];
        if (lang_1.isPresent(el)) {
          elementBinderByElement.set(el, mergableProtoView.original.elementBinders[i]);
        }
      }
    });
    return elementBinderByElement;
  }
  function updateElementBinders(elementBinder, textNodeIndices, hasNativeShadowRoot) {
    var result;
    if (lang_1.isBlank(elementBinder)) {
      result = new element_binder_1.DomElementBinder({
        textNodeIndices: textNodeIndices,
        hasNestedProtoView: false,
        eventLocals: null,
        localEvents: [],
        globalEvents: [],
        hasNativeShadowRoot: false
      });
    } else {
      result = new element_binder_1.DomElementBinder({
        textNodeIndices: textNodeIndices,
        hasNestedProtoView: false,
        eventLocals: elementBinder.eventLocals,
        localEvents: elementBinder.localEvents,
        globalEvents: elementBinder.globalEvents,
        hasNativeShadowRoot: hasNativeShadowRoot
      });
    }
    return result;
  }
  function calcMappedElementIndices(clonedProtoViews, mergedBoundElements) {
    var mergedBoundElementIndices = indexArray(mergedBoundElements);
    var mappedElementIndices = [];
    clonedProtoViews.forEach(function(clonedProtoView) {
      clonedProtoView.boundElements.forEach(function(boundElement) {
        var mappedElementIndex = mergedBoundElementIndices.get(boundElement);
        mappedElementIndices.push(mappedElementIndex);
      });
    });
    return mappedElementIndices;
  }
  function calcMappedTextIndices(clonedProtoViews, mergedBoundTextIndices) {
    var mappedTextIndices = [];
    clonedProtoViews.forEach(function(clonedProtoView) {
      clonedProtoView.boundTextNodes.forEach(function(textNode) {
        var mappedTextIndex = mergedBoundTextIndices.get(textNode);
        mappedTextIndices.push(mappedTextIndex);
      });
    });
    return mappedTextIndices;
  }
  function calcHostElementIndicesByViewIndex(clonedProtoViews, hostViewAndBinderIndices) {
    var hostElementIndices = [null];
    var viewElementOffsets = [0];
    var elementIndex = clonedProtoViews[0].original.elementBinders.length;
    for (var viewIdx = 1; viewIdx < hostViewAndBinderIndices.length; viewIdx++) {
      viewElementOffsets.push(elementIndex);
      elementIndex += clonedProtoViews[viewIdx].original.elementBinders.length;
      var hostViewIdx = hostViewAndBinderIndices[viewIdx][0];
      var hostBinderIdx = hostViewAndBinderIndices[viewIdx][1];
      hostElementIndices.push(viewElementOffsets[hostViewIdx] + hostBinderIdx);
    }
    return hostElementIndices;
  }
  function calcNestedViewCounts(hostViewAndBinderIndices) {
    var nestedViewCounts = collection_1.ListWrapper.createFixedSize(hostViewAndBinderIndices.length);
    collection_1.ListWrapper.fill(nestedViewCounts, 0);
    for (var viewIdx = hostViewAndBinderIndices.length - 1; viewIdx >= 1; viewIdx--) {
      var hostViewAndElementIdx = hostViewAndBinderIndices[viewIdx];
      if (lang_1.isPresent(hostViewAndElementIdx)) {
        nestedViewCounts[hostViewAndElementIdx[0]] += nestedViewCounts[viewIdx] + 1;
      }
    }
    return nestedViewCounts;
  }
  function indexArray(arr) {
    var map = new Map();
    for (var i = 0; i < arr.length; i++) {
      map.set(arr[i], i);
    }
    return map;
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/selector.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var _EMPTY_ATTR_VALUE = '';
    var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)');
    var CssSelector = (function() {
      function CssSelector() {
        this.element = null;
        this.classNames = [];
        this.attrs = [];
        this.notSelectors = [];
      }
      CssSelector.parse = function(selector) {
        var results = [];
        var _addResult = function(res, cssSel) {
          if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) && collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
            cssSel.element = "*";
          }
          res.push(cssSel);
        };
        var cssSelector = new CssSelector();
        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
        var match;
        var current = cssSelector;
        var inNot = false;
        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
          if (lang_1.isPresent(match[1])) {
            if (inNot) {
              throw new lang_1.BaseException('Nesting :not is not allowed in a selector');
            }
            inNot = true;
            current = new CssSelector();
            cssSelector.notSelectors.push(current);
          }
          if (lang_1.isPresent(match[2])) {
            current.setElement(match[2]);
          }
          if (lang_1.isPresent(match[3])) {
            current.addClassName(match[3]);
          }
          if (lang_1.isPresent(match[4])) {
            current.addAttribute(match[4], match[5]);
          }
          if (lang_1.isPresent(match[6])) {
            inNot = false;
            current = cssSelector;
          }
          if (lang_1.isPresent(match[7])) {
            if (inNot) {
              throw new lang_1.BaseException('Multiple selectors in :not are not supported');
            }
            _addResult(results, cssSelector);
            cssSelector = current = new CssSelector();
          }
        }
        _addResult(results, cssSelector);
        return results;
      };
      CssSelector.prototype.isElementSelector = function() {
        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) && collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
      };
      CssSelector.prototype.setElement = function(element) {
        if (element === void 0) {
          element = null;
        }
        if (lang_1.isPresent(element)) {
          element = element.toLowerCase();
        }
        this.element = element;
      };
      CssSelector.prototype.getMatchingElementTemplate = function() {
        var tagName = lang_1.isPresent(this.element) ? this.element : 'div';
        var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
        var attrs = '';
        for (var i = 0; i < this.attrs.length; i += 2) {
          var attrName = this.attrs[i];
          var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
          attrs += " " + attrName + attrValue;
        }
        return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
      };
      CssSelector.prototype.addAttribute = function(name, value) {
        if (value === void 0) {
          value = _EMPTY_ATTR_VALUE;
        }
        this.attrs.push(name.toLowerCase());
        if (lang_1.isPresent(value)) {
          value = value.toLowerCase();
        } else {
          value = _EMPTY_ATTR_VALUE;
        }
        this.attrs.push(value);
      };
      CssSelector.prototype.addClassName = function(name) {
        this.classNames.push(name.toLowerCase());
      };
      CssSelector.prototype.toString = function() {
        var res = '';
        if (lang_1.isPresent(this.element)) {
          res += this.element;
        }
        if (lang_1.isPresent(this.classNames)) {
          for (var i = 0; i < this.classNames.length; i++) {
            res += '.' + this.classNames[i];
          }
        }
        if (lang_1.isPresent(this.attrs)) {
          for (var i = 0; i < this.attrs.length; ) {
            var attrName = this.attrs[i++];
            var attrValue = this.attrs[i++];
            res += '[' + attrName;
            if (attrValue.length > 0) {
              res += '=' + attrValue;
            }
            res += ']';
          }
        }
        collection_1.ListWrapper.forEach(this.notSelectors, function(notSelector) {
          res += ":not(" + notSelector.toString() + ")";
        });
        return res;
      };
      return CssSelector;
    })();
    exports.CssSelector = CssSelector;
    var SelectorMatcher = (function() {
      function SelectorMatcher() {
        this._elementMap = new collection_1.Map();
        this._elementPartialMap = new collection_1.Map();
        this._classMap = new collection_1.Map();
        this._classPartialMap = new collection_1.Map();
        this._attrValueMap = new collection_1.Map();
        this._attrValuePartialMap = new collection_1.Map();
        this._listContexts = [];
      }
      SelectorMatcher.createNotMatcher = function(notSelectors) {
        var notMatcher = new SelectorMatcher();
        notMatcher.addSelectables(notSelectors, null);
        return notMatcher;
      };
      SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
        var listContext = null;
        if (cssSelectors.length > 1) {
          listContext = new SelectorListContext(cssSelectors);
          this._listContexts.push(listContext);
        }
        for (var i = 0; i < cssSelectors.length; i++) {
          this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
        }
      };
      SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
        var matcher = this;
        var element = cssSelector.element;
        var classNames = cssSelector.classNames;
        var attrs = cssSelector.attrs;
        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
        if (lang_1.isPresent(element)) {
          var isTerminal = attrs.length === 0 && classNames.length === 0;
          if (isTerminal) {
            this._addTerminal(matcher._elementMap, element, selectable);
          } else {
            matcher = this._addPartial(matcher._elementPartialMap, element);
          }
        }
        if (lang_1.isPresent(classNames)) {
          for (var index = 0; index < classNames.length; index++) {
            var isTerminal = attrs.length === 0 && index === classNames.length - 1;
            var className = classNames[index];
            if (isTerminal) {
              this._addTerminal(matcher._classMap, className, selectable);
            } else {
              matcher = this._addPartial(matcher._classPartialMap, className);
            }
          }
        }
        if (lang_1.isPresent(attrs)) {
          for (var index = 0; index < attrs.length; ) {
            var isTerminal = index === attrs.length - 2;
            var attrName = attrs[index++];
            var attrValue = attrs[index++];
            if (isTerminal) {
              var terminalMap = matcher._attrValueMap;
              var terminalValuesMap = terminalMap.get(attrName);
              if (lang_1.isBlank(terminalValuesMap)) {
                terminalValuesMap = new collection_1.Map();
                terminalMap.set(attrName, terminalValuesMap);
              }
              this._addTerminal(terminalValuesMap, attrValue, selectable);
            } else {
              var parttialMap = matcher._attrValuePartialMap;
              var partialValuesMap = parttialMap.get(attrName);
              if (lang_1.isBlank(partialValuesMap)) {
                partialValuesMap = new collection_1.Map();
                parttialMap.set(attrName, partialValuesMap);
              }
              matcher = this._addPartial(partialValuesMap, attrValue);
            }
          }
        }
      };
      SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
        var terminalList = map.get(name);
        if (lang_1.isBlank(terminalList)) {
          terminalList = [];
          map.set(name, terminalList);
        }
        terminalList.push(selectable);
      };
      SelectorMatcher.prototype._addPartial = function(map, name) {
        var matcher = map.get(name);
        if (lang_1.isBlank(matcher)) {
          matcher = new SelectorMatcher();
          map.set(name, matcher);
        }
        return matcher;
      };
      SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
        var result = false;
        var element = cssSelector.element;
        var classNames = cssSelector.classNames;
        var attrs = cssSelector.attrs;
        for (var i = 0; i < this._listContexts.length; i++) {
          this._listContexts[i].alreadyMatched = false;
        }
        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
        if (lang_1.isPresent(classNames)) {
          for (var index = 0; index < classNames.length; index++) {
            var className = classNames[index];
            result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
            result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
          }
        }
        if (lang_1.isPresent(attrs)) {
          for (var index = 0; index < attrs.length; ) {
            var attrName = attrs[index++];
            var attrValue = attrs[index++];
            var terminalValuesMap = this._attrValueMap.get(attrName);
            if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
              result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
            }
            result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
            var partialValuesMap = this._attrValuePartialMap.get(attrName);
            if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
              result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
            }
            result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
          }
        }
        return result;
      };
      SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
          return false;
        }
        var selectables = map.get(name);
        var starSelectables = map.get("*");
        if (lang_1.isPresent(starSelectables)) {
          selectables = collection_1.ListWrapper.concat(selectables, starSelectables);
        }
        if (lang_1.isBlank(selectables)) {
          return false;
        }
        var selectable;
        var result = false;
        for (var index = 0; index < selectables.length; index++) {
          selectable = selectables[index];
          result = selectable.finalize(cssSelector, matchedCallback) || result;
        }
        return result;
      };
      SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
          return false;
        }
        var nestedSelector = map.get(name);
        if (lang_1.isBlank(nestedSelector)) {
          return false;
        }
        return nestedSelector.match(cssSelector, matchedCallback);
      };
      return SelectorMatcher;
    })();
    exports.SelectorMatcher = SelectorMatcher;
    var SelectorListContext = (function() {
      function SelectorListContext(selectors) {
        this.selectors = selectors;
        this.alreadyMatched = false;
      }
      return SelectorListContext;
    })();
    exports.SelectorListContext = SelectorListContext;
    var SelectorContext = (function() {
      function SelectorContext(selector, cbContext, listContext) {
        this.selector = selector;
        this.cbContext = cbContext;
        this.listContext = listContext;
        this.notSelectors = selector.notSelectors;
      }
      SelectorContext.prototype.finalize = function(cssSelector, callback) {
        var result = true;
        if (this.notSelectors.length > 0 && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
          var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
          result = !notMatcher.match(cssSelector, null);
        }
        if (result && lang_1.isPresent(callback) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
          if (lang_1.isPresent(this.listContext)) {
            this.listContext.alreadyMatched = true;
          }
          callback(this.selector, this.cbContext);
        }
        return result;
      };
      return SelectorContext;
    })();
    exports.SelectorContext = SelectorContext;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  exports.NG_BINDING_CLASS_SELECTOR = '.ng-binding';
  exports.NG_BINDING_CLASS = 'ng-binding';
  exports.EVENT_TARGET_SEPARATOR = ':';
  exports.NG_CONTENT_ELEMENT_NAME = 'ng-content';
  exports.NG_SHADOW_ROOT_ELEMENT_NAME = 'shadow-root';
  var MAX_IN_MEMORY_ELEMENTS_PER_TEMPLATE = 20;
  var CAMEL_CASE_REGEXP = /([A-Z])/g;
  var DASH_CASE_REGEXP = /-([a-z])/g;
  function camelCaseToDashCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return '-' + m[1].toLowerCase();
    });
  }
  exports.camelCaseToDashCase = camelCaseToDashCase;
  function dashCaseToCamelCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
      return m[1].toUpperCase();
    });
  }
  exports.dashCaseToCamelCase = dashCaseToCamelCase;
  function queryBoundElements(templateContent, isSingleElementChild) {
    var result;
    var dynamicElementList;
    var elementIdx = 0;
    if (isSingleElementChild) {
      var rootElement = dom_adapter_1.DOM.firstChild(templateContent);
      var rootHasBinding = dom_adapter_1.DOM.hasClass(rootElement, exports.NG_BINDING_CLASS);
      dynamicElementList = dom_adapter_1.DOM.getElementsByClassName(rootElement, exports.NG_BINDING_CLASS);
      result = collection_1.ListWrapper.createFixedSize(dynamicElementList.length + (rootHasBinding ? 1 : 0));
      if (rootHasBinding) {
        result[elementIdx++] = rootElement;
      }
    } else {
      dynamicElementList = dom_adapter_1.DOM.querySelectorAll(templateContent, exports.NG_BINDING_CLASS_SELECTOR);
      result = collection_1.ListWrapper.createFixedSize(dynamicElementList.length);
    }
    for (var i = 0; i < dynamicElementList.length; i++) {
      result[elementIdx++] = dynamicElementList[i];
    }
    return result;
  }
  exports.queryBoundElements = queryBoundElements;
  var ClonedProtoView = (function() {
    function ClonedProtoView(original, fragments, boundElements, boundTextNodes) {
      this.original = original;
      this.fragments = fragments;
      this.boundElements = boundElements;
      this.boundTextNodes = boundTextNodes;
    }
    return ClonedProtoView;
  })();
  exports.ClonedProtoView = ClonedProtoView;
  function cloneAndQueryProtoView(templateCloner, pv, importIntoDocument) {
    var templateContent = templateCloner.cloneContent(pv.cloneableTemplate, importIntoDocument);
    var boundElements = queryBoundElements(templateContent, pv.isSingleElementFragment);
    var boundTextNodes = queryBoundTextNodes(templateContent, pv.rootTextNodeIndices, boundElements, pv.elementBinders, pv.boundTextNodeCount);
    var fragments = queryFragments(templateContent, pv.fragmentsRootNodeCount);
    return new ClonedProtoView(pv, fragments, boundElements, boundTextNodes);
  }
  exports.cloneAndQueryProtoView = cloneAndQueryProtoView;
  function queryFragments(templateContent, fragmentsRootNodeCount) {
    var fragments = collection_1.ListWrapper.createGrowableSize(fragmentsRootNodeCount.length);
    var childNode = dom_adapter_1.DOM.firstChild(templateContent);
    for (var fragmentIndex = 0; fragmentIndex < fragments.length; fragmentIndex++) {
      var fragment = collection_1.ListWrapper.createFixedSize(fragmentsRootNodeCount[fragmentIndex]);
      fragments[fragmentIndex] = fragment;
      if (fragmentIndex >= 1) {
        childNode = dom_adapter_1.DOM.nextSibling(childNode);
      }
      for (var i = 0; i < fragment.length; i++) {
        fragment[i] = childNode;
        childNode = dom_adapter_1.DOM.nextSibling(childNode);
      }
    }
    return fragments;
  }
  function queryBoundTextNodes(templateContent, rootTextNodeIndices, boundElements, elementBinders, boundTextNodeCount) {
    var boundTextNodes = collection_1.ListWrapper.createFixedSize(boundTextNodeCount);
    var textNodeIndex = 0;
    if (rootTextNodeIndices.length > 0) {
      var rootChildNodes = dom_adapter_1.DOM.childNodes(templateContent);
      for (var i = 0; i < rootTextNodeIndices.length; i++) {
        boundTextNodes[textNodeIndex++] = rootChildNodes[rootTextNodeIndices[i]];
      }
    }
    for (var i = 0; i < elementBinders.length; i++) {
      var binder = elementBinders[i];
      var element = boundElements[i];
      if (binder.textNodeIndices.length > 0) {
        var childNodes = dom_adapter_1.DOM.childNodes(element);
        for (var j = 0; j < binder.textNodeIndices.length; j++) {
          boundTextNodes[textNodeIndex++] = childNodes[binder.textNodeIndices[j]];
        }
      }
    }
    return boundTextNodes;
  }
  function isElementWithTag(node, elementName) {
    return dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.tagName(node).toLowerCase() == elementName.toLowerCase();
  }
  exports.isElementWithTag = isElementWithTag;
  function queryBoundTextNodeIndices(parentNode, boundTextNodes, resultCallback) {
    var childNodes = dom_adapter_1.DOM.childNodes(parentNode);
    for (var j = 0; j < childNodes.length; j++) {
      var node = childNodes[j];
      if (boundTextNodes.has(node)) {
        resultCallback(node, j, boundTextNodes.get(node));
      }
    }
  }
  exports.queryBoundTextNodeIndices = queryBoundTextNodeIndices;
  function prependAll(parentNode, nodes) {
    var lastInsertedNode = null;
    nodes.forEach(function(node) {
      if (lang_1.isBlank(lastInsertedNode)) {
        var firstChild = dom_adapter_1.DOM.firstChild(parentNode);
        if (lang_1.isPresent(firstChild)) {
          dom_adapter_1.DOM.insertBefore(firstChild, node);
        } else {
          dom_adapter_1.DOM.appendChild(parentNode, node);
        }
      } else {
        dom_adapter_1.DOM.insertAfter(lastInsertedNode, node);
      }
      lastInsertedNode = node;
    });
  }
  exports.prependAll = prependAll;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js", ["npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  function resolveInternalDomProtoView(protoViewRef) {
    return protoViewRef._protoView;
  }
  exports.resolveInternalDomProtoView = resolveInternalDomProtoView;
  var DomProtoViewRef = (function(_super) {
    __extends(DomProtoViewRef, _super);
    function DomProtoViewRef(_protoView) {
      _super.call(this);
      this._protoView = _protoView;
    }
    return DomProtoViewRef;
  })(api_1.RenderProtoViewRef);
  exports.DomProtoViewRef = DomProtoViewRef;
  var DomProtoView = (function() {
    function DomProtoView(type, cloneableTemplate, encapsulation, elementBinders, hostAttributes, rootTextNodeIndices, boundTextNodeCount, fragmentsRootNodeCount, isSingleElementFragment) {
      this.type = type;
      this.cloneableTemplate = cloneableTemplate;
      this.encapsulation = encapsulation;
      this.elementBinders = elementBinders;
      this.hostAttributes = hostAttributes;
      this.rootTextNodeIndices = rootTextNodeIndices;
      this.boundTextNodeCount = boundTextNodeCount;
      this.fragmentsRootNodeCount = fragmentsRootNodeCount;
      this.isSingleElementFragment = isSingleElementFragment;
    }
    DomProtoView.create = function(templateCloner, type, rootElement, viewEncapsulation, fragmentsRootNodeCount, rootTextNodeIndices, elementBinders, hostAttributes) {
      var boundTextNodeCount = rootTextNodeIndices.length;
      for (var i = 0; i < elementBinders.length; i++) {
        boundTextNodeCount += elementBinders[i].textNodeIndices.length;
      }
      var isSingleElementFragment = fragmentsRootNodeCount.length === 1 && fragmentsRootNodeCount[0] === 1 && dom_adapter_1.DOM.isElementNode(dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.content(rootElement)));
      return new DomProtoView(type, templateCloner.prepareForClone(rootElement), viewEncapsulation, elementBinders, hostAttributes, rootTextNodeIndices, boundTextNodeCount, fragmentsRootNodeCount, isSingleElementFragment);
    };
    return DomProtoView;
  })();
  exports.DomProtoView = DomProtoView;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/view.js", ["npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  function resolveInternalDomView(viewRef) {
    return viewRef._view;
  }
  exports.resolveInternalDomView = resolveInternalDomView;
  var DomViewRef = (function(_super) {
    __extends(DomViewRef, _super);
    function DomViewRef(_view) {
      _super.call(this);
      this._view = _view;
    }
    return DomViewRef;
  })(api_1.RenderViewRef);
  exports.DomViewRef = DomViewRef;
  var DomView = (function() {
    function DomView(proto, boundTextNodes, boundElements) {
      this.proto = proto;
      this.boundTextNodes = boundTextNodes;
      this.boundElements = boundElements;
      this.hydrated = false;
      this.eventDispatcher = null;
      this.eventHandlerRemovers = [];
    }
    DomView.prototype.setElementProperty = function(elementIndex, propertyName, value) {
      dom_adapter_1.DOM.setProperty(this.boundElements[elementIndex], propertyName, value);
    };
    DomView.prototype.setElementAttribute = function(elementIndex, attributeName, value) {
      var element = this.boundElements[elementIndex];
      var dashCasedAttributeName = util_1.camelCaseToDashCase(attributeName);
      if (lang_1.isPresent(value)) {
        dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(value));
      } else {
        dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
      }
    };
    DomView.prototype.setElementClass = function(elementIndex, className, isAdd) {
      var element = this.boundElements[elementIndex];
      if (isAdd) {
        dom_adapter_1.DOM.addClass(element, className);
      } else {
        dom_adapter_1.DOM.removeClass(element, className);
      }
    };
    DomView.prototype.setElementStyle = function(elementIndex, styleName, value) {
      var element = this.boundElements[elementIndex];
      var dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
      if (lang_1.isPresent(value)) {
        dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, lang_1.stringify(value));
      } else {
        dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
      }
    };
    DomView.prototype.invokeElementMethod = function(elementIndex, methodName, args) {
      var element = this.boundElements[elementIndex];
      dom_adapter_1.DOM.invoke(element, methodName, args);
    };
    DomView.prototype.setText = function(textIndex, value) {
      dom_adapter_1.DOM.setText(this.boundTextNodes[textIndex], value);
    };
    DomView.prototype.dispatchEvent = function(elementIndex, eventName, event) {
      var allowDefaultBehavior = true;
      if (lang_1.isPresent(this.eventDispatcher)) {
        var evalLocals = new collection_1.Map();
        evalLocals.set('$event', event);
        allowDefaultBehavior = this.eventDispatcher.dispatchRenderEvent(elementIndex, eventName, evalLocals);
        if (!allowDefaultBehavior) {
          dom_adapter_1.DOM.preventDefault(event);
        }
      }
      return allowDefaultBehavior;
    };
    return DomView;
  })();
  exports.DomView = DomView;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/fragment.js", ["npm:angular2@2.0.0-alpha.35/src/render/api.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  function resolveInternalDomFragment(fragmentRef) {
    return fragmentRef._nodes;
  }
  exports.resolveInternalDomFragment = resolveInternalDomFragment;
  var DomFragmentRef = (function(_super) {
    __extends(DomFragmentRef, _super);
    function DomFragmentRef(_nodes) {
      _super.call(this);
      this._nodes = _nodes;
    }
    return DomFragmentRef;
  })(api_1.RenderFragmentRef);
  exports.DomFragmentRef = DomFragmentRef;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_name_util.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var _ALREADY_CHECKED_ACCESSOR = "alreadyChecked";
  var _CONTEXT_ACCESSOR = "context";
  var _FIRST_PROTO_IN_CURRENT_BINDING = "firstProtoInCurrentBinding";
  var _DIRECTIVES_ACCESSOR = "directiveRecords";
  var _DISPATCHER_ACCESSOR = "dispatcher";
  var _LOCALS_ACCESSOR = "locals";
  var _MODE_ACCESSOR = "mode";
  var _PIPES_ACCESSOR = "pipes";
  var _PROTOS_ACCESSOR = "protos";
  exports.CONTEXT_INDEX = 0;
  var _FIELD_PREFIX = 'this.';
  var _whiteSpaceRegExp = lang_1.RegExpWrapper.create("\\W", "g");
  function sanitizeName(s) {
    return lang_1.StringWrapper.replaceAll(s, _whiteSpaceRegExp, '');
  }
  exports.sanitizeName = sanitizeName;
  var CodegenNameUtil = (function() {
    function CodegenNameUtil(records, eventBindings, directiveRecords, utilName) {
      this.records = records;
      this.eventBindings = eventBindings;
      this.directiveRecords = directiveRecords;
      this.utilName = utilName;
      this._sanitizedNames = collection_1.ListWrapper.createFixedSize(this.records.length + 1);
      this._sanitizedNames[exports.CONTEXT_INDEX] = _CONTEXT_ACCESSOR;
      for (var i = 0,
          iLen = this.records.length; i < iLen; ++i) {
        this._sanitizedNames[i + 1] = sanitizeName("" + this.records[i].name + i);
      }
      this._sanitizedEventNames = new collection_1.Map();
      for (var ebIndex = 0; ebIndex < eventBindings.length; ++ebIndex) {
        var eb = eventBindings[ebIndex];
        var names = [_CONTEXT_ACCESSOR];
        for (var i = 0,
            iLen = eb.records.length; i < iLen; ++i) {
          names.push(sanitizeName("" + eb.records[i].name + i + "_" + ebIndex));
        }
        this._sanitizedEventNames.set(eb, names);
      }
    }
    CodegenNameUtil.prototype._addFieldPrefix = function(name) {
      return "" + _FIELD_PREFIX + name;
    };
    CodegenNameUtil.prototype.getDispatcherName = function() {
      return this._addFieldPrefix(_DISPATCHER_ACCESSOR);
    };
    CodegenNameUtil.prototype.getPipesAccessorName = function() {
      return this._addFieldPrefix(_PIPES_ACCESSOR);
    };
    CodegenNameUtil.prototype.getProtosName = function() {
      return this._addFieldPrefix(_PROTOS_ACCESSOR);
    };
    CodegenNameUtil.prototype.getDirectivesAccessorName = function() {
      return this._addFieldPrefix(_DIRECTIVES_ACCESSOR);
    };
    CodegenNameUtil.prototype.getLocalsAccessorName = function() {
      return this._addFieldPrefix(_LOCALS_ACCESSOR);
    };
    CodegenNameUtil.prototype.getAlreadyCheckedName = function() {
      return this._addFieldPrefix(_ALREADY_CHECKED_ACCESSOR);
    };
    CodegenNameUtil.prototype.getModeName = function() {
      return this._addFieldPrefix(_MODE_ACCESSOR);
    };
    CodegenNameUtil.prototype.getFirstProtoInCurrentBinding = function() {
      return this._addFieldPrefix(_FIRST_PROTO_IN_CURRENT_BINDING);
    };
    CodegenNameUtil.prototype.getLocalName = function(idx) {
      return "l_" + this._sanitizedNames[idx];
    };
    CodegenNameUtil.prototype.getEventLocalName = function(eb, idx) {
      return "l_" + collection_1.MapWrapper.get(this._sanitizedEventNames, eb)[idx];
    };
    CodegenNameUtil.prototype.getChangeName = function(idx) {
      return "c_" + this._sanitizedNames[idx];
    };
    CodegenNameUtil.prototype.genInitLocals = function() {
      var declarations = [];
      var assignments = [];
      for (var i = 0,
          iLen = this.getFieldCount(); i < iLen; ++i) {
        if (i == exports.CONTEXT_INDEX) {
          declarations.push(this.getLocalName(i) + " = " + this.getFieldName(i));
        } else {
          var rec = this.records[i - 1];
          if (rec.argumentToPureFunction) {
            var changeName = this.getChangeName(i);
            declarations.push(this.getLocalName(i) + "," + changeName);
            assignments.push(changeName);
          } else {
            declarations.push("" + this.getLocalName(i));
          }
        }
      }
      var assignmentsCode = collection_1.ListWrapper.isEmpty(assignments) ? '' : collection_1.ListWrapper.join(assignments, '=') + " = false;";
      return "var " + collection_1.ListWrapper.join(declarations, ',') + ";" + assignmentsCode;
    };
    CodegenNameUtil.prototype.genInitEventLocals = function() {
      var _this = this;
      var res = [(this.getLocalName(exports.CONTEXT_INDEX) + " = " + this.getFieldName(exports.CONTEXT_INDEX))];
      collection_1.MapWrapper.forEach(this._sanitizedEventNames, function(names, eb) {
        for (var i = 0; i < names.length; ++i) {
          if (i !== exports.CONTEXT_INDEX) {
            res.push("" + _this.getEventLocalName(eb, i));
          }
        }
      });
      return res.length > 1 ? "var " + res.join(',') + ";" : '';
    };
    CodegenNameUtil.prototype.getPreventDefaultAccesor = function() {
      return "preventDefault";
    };
    CodegenNameUtil.prototype.getFieldCount = function() {
      return this._sanitizedNames.length;
    };
    CodegenNameUtil.prototype.getFieldName = function(idx) {
      return this._addFieldPrefix(this._sanitizedNames[idx]);
    };
    CodegenNameUtil.prototype.getAllFieldNames = function() {
      var fieldList = [];
      for (var k = 0,
          kLen = this.getFieldCount(); k < kLen; ++k) {
        if (k === 0 || this.records[k - 1].shouldBeChecked()) {
          fieldList.push(this.getFieldName(k));
        }
      }
      for (var i = 0,
          iLen = this.records.length; i < iLen; ++i) {
        var rec = this.records[i];
        if (rec.isPipeRecord()) {
          fieldList.push(this.getPipeName(rec.selfIndex));
        }
      }
      for (var j = 0,
          jLen = this.directiveRecords.length; j < jLen; ++j) {
        var dRec = this.directiveRecords[j];
        fieldList.push(this.getDirectiveName(dRec.directiveIndex));
        if (!dRec.isDefaultChangeDetection()) {
          fieldList.push(this.getDetectorName(dRec.directiveIndex));
        }
      }
      return fieldList;
    };
    CodegenNameUtil.prototype.genDehydrateFields = function() {
      var fields = this.getAllFieldNames();
      collection_1.ListWrapper.removeAt(fields, exports.CONTEXT_INDEX);
      if (collection_1.ListWrapper.isEmpty(fields))
        return '';
      fields.push(this.utilName + ".uninitialized;");
      return collection_1.ListWrapper.join(fields, ' = ');
    };
    CodegenNameUtil.prototype.genPipeOnDestroy = function() {
      var _this = this;
      return collection_1.ListWrapper.join(collection_1.ListWrapper.map(collection_1.ListWrapper.filter(this.records, function(r) {
        return r.isPipeRecord();
      }), function(r) {
        return _this.utilName + ".callPipeOnDestroy(" + _this.getPipeName(r.selfIndex) + ");";
      }), '\n');
    };
    CodegenNameUtil.prototype.getPipeName = function(idx) {
      return this._addFieldPrefix(this._sanitizedNames[idx] + "_pipe");
    };
    CodegenNameUtil.prototype.getAllDirectiveNames = function() {
      var _this = this;
      return collection_1.ListWrapper.map(this.directiveRecords, function(d) {
        return _this.getDirectiveName(d.directiveIndex);
      });
    };
    CodegenNameUtil.prototype.getDirectiveName = function(d) {
      return this._addFieldPrefix("directive_" + d.name);
    };
    CodegenNameUtil.prototype.getAllDetectorNames = function() {
      var _this = this;
      return collection_1.ListWrapper.map(collection_1.ListWrapper.filter(this.directiveRecords, function(r) {
        return !r.isDefaultChangeDetection();
      }), function(d) {
        return _this.getDetectorName(d.directiveIndex);
      });
    };
    CodegenNameUtil.prototype.getDetectorName = function(d) {
      return this._addFieldPrefix("detector_" + d.name);
    };
    return CodegenNameUtil;
  })();
  exports.CodegenNameUtil = CodegenNameUtil;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_logic_util.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_facade.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var codegen_facade_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_facade.js");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/proto_record.js");
  var ON_PUSH_OBSERVE = "ON_PUSH_OBSERVE";
  var CodegenLogicUtil = (function() {
    function CodegenLogicUtil(_names, _utilName, _changeDetection) {
      this._names = _names;
      this._utilName = _utilName;
      this._changeDetection = _changeDetection;
    }
    CodegenLogicUtil.prototype.genPropertyBindingEvalValue = function(protoRec) {
      var _this = this;
      return this.genEvalValue(protoRec, function(idx) {
        return _this._names.getLocalName(idx);
      }, this._names.getLocalsAccessorName());
    };
    CodegenLogicUtil.prototype.genEventBindingEvalValue = function(eventRecord, protoRec) {
      var _this = this;
      return this.genEvalValue(protoRec, function(idx) {
        return _this._names.getEventLocalName(eventRecord, idx);
      }, "locals");
    };
    CodegenLogicUtil.prototype.genEvalValue = function(protoRec, getLocalName, localsAccessor) {
      var context = (protoRec.contextIndex == -1) ? this._names.getDirectiveName(protoRec.directiveIndex) : getLocalName(protoRec.contextIndex);
      var argString = collection_1.ListWrapper.map(protoRec.args, function(arg) {
        return getLocalName(arg);
      }).join(", ");
      var rhs;
      switch (protoRec.mode) {
        case proto_record_1.RecordType.SELF:
          rhs = context;
          break;
        case proto_record_1.RecordType.CONST:
          rhs = codegen_facade_1.codify(protoRec.funcOrValue);
          break;
        case proto_record_1.RecordType.PROPERTY_READ:
          rhs = this._observe(context + "." + protoRec.name, protoRec);
          break;
        case proto_record_1.RecordType.SAFE_PROPERTY:
          var read = this._observe(context + "." + protoRec.name, protoRec);
          rhs = this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(read, protoRec);
          break;
        case proto_record_1.RecordType.PROPERTY_WRITE:
          rhs = context + "." + protoRec.name + " = " + getLocalName(protoRec.args[0]);
          break;
        case proto_record_1.RecordType.LOCAL:
          rhs = this._observe(localsAccessor + ".get(" + codegen_facade_1.rawString(protoRec.name) + ")", protoRec);
          break;
        case proto_record_1.RecordType.INVOKE_METHOD:
          rhs = this._observe(context + "." + protoRec.name + "(" + argString + ")", protoRec);
          break;
        case proto_record_1.RecordType.SAFE_INVOKE_METHOD:
          var invoke = context + "." + protoRec.name + "(" + argString + ")";
          rhs = this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(invoke, protoRec);
          break;
        case proto_record_1.RecordType.INVOKE_CLOSURE:
          rhs = context + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.PRIMITIVE_OP:
          rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.COLLECTION_LITERAL:
          rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.INTERPOLATE:
          rhs = this._genInterpolation(protoRec);
          break;
        case proto_record_1.RecordType.KEYED_READ:
          rhs = this._observe(context + "[" + getLocalName(protoRec.args[0]) + "]", protoRec);
          break;
        case proto_record_1.RecordType.KEYED_WRITE:
          rhs = context + "[" + getLocalName(protoRec.args[0]) + "] = " + getLocalName(protoRec.args[1]);
          break;
        case proto_record_1.RecordType.CHAIN:
          rhs = 'null';
          break;
        default:
          throw new lang_1.BaseException("Unknown operation " + protoRec.mode);
      }
      return getLocalName(protoRec.selfIndex) + " = " + rhs + ";";
    };
    CodegenLogicUtil.prototype._observe = function(exp, rec) {
      if (lang_1.StringWrapper.equals(this._changeDetection, ON_PUSH_OBSERVE)) {
        return "this.observe(" + exp + ", " + rec.selfIndex + ")";
      } else {
        return exp;
      }
    };
    CodegenLogicUtil.prototype._genInterpolation = function(protoRec) {
      var iVals = [];
      for (var i = 0; i < protoRec.args.length; ++i) {
        iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
        iVals.push(this._utilName + ".s(" + this._names.getLocalName(protoRec.args[i]) + ")");
      }
      iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
      return codegen_facade_1.combineGeneratedStrings(iVals);
    };
    return CodegenLogicUtil;
  })();
  exports.CodegenLogicUtil = CodegenLogicUtil;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/observable_facade.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function isObservable(value) {
    return false;
  }
  exports.isObservable = isObservable;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:process@0.10.1.js", ["npm:process@0.10.1/browser.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:process@0.10.1/browser.js");
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/pipes/invalid_pipe_argument_exception.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var InvalidPipeArgumentException = (function(_super) {
    __extends(InvalidPipeArgumentException, _super);
    function InvalidPipeArgumentException(type, value) {
      _super.call(this, "Invalid argument '" + value + "' for pipe '" + type + "'");
    }
    return InvalidPipeArgumentException;
  })(lang_1.BaseException);
  exports.InvalidPipeArgumentException = InvalidPipeArgumentException;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/facade/intl.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  (function(NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle["DECIMAL"] = 0] = "DECIMAL";
    NumberFormatStyle[NumberFormatStyle["PERCENT"] = 1] = "PERCENT";
    NumberFormatStyle[NumberFormatStyle["CURRENCY"] = 2] = "CURRENCY";
  })(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
  var NumberFormatStyle = exports.NumberFormatStyle;
  var NumberFormatter = (function() {
    function NumberFormatter() {}
    NumberFormatter.format = function(number, locale, style, _a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.minimumIntegerDigits,
          minimumIntegerDigits = _c === void 0 ? 1 : _c,
          _d = _b.minimumFractionDigits,
          minimumFractionDigits = _d === void 0 ? 0 : _d,
          _e = _b.maximumFractionDigits,
          maximumFractionDigits = _e === void 0 ? 3 : _e,
          currency = _b.currency,
          _f = _b.currencyAsSymbol,
          currencyAsSymbol = _f === void 0 ? false : _f;
      var intlOptions = {
        minimumIntegerDigits: minimumIntegerDigits,
        minimumFractionDigits: minimumFractionDigits,
        maximumFractionDigits: maximumFractionDigits
      };
      intlOptions.style = NumberFormatStyle[style].toLowerCase();
      if (style == NumberFormatStyle.CURRENCY) {
        intlOptions.currency = currency;
        intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
      }
      return new Intl.NumberFormat(locale, intlOptions).format(number);
    };
    return NumberFormatter;
  })();
  exports.NumberFormatter = NumberFormatter;
  function digitCondition(len) {
    return len == 2 ? '2-digit' : 'numeric';
  }
  function nameCondition(len) {
    return len < 4 ? 'short' : 'long';
  }
  function extractComponents(pattern) {
    var ret = {};
    var i = 0,
        j;
    while (i < pattern.length) {
      j = i;
      while (j < pattern.length && pattern[j] == pattern[i])
        j++;
      var len = j - i;
      switch (pattern[i]) {
        case 'G':
          ret.era = nameCondition(len);
          break;
        case 'y':
          ret.year = digitCondition(len);
          break;
        case 'M':
          if (len >= 3)
            ret.month = nameCondition(len);
          else
            ret.month = digitCondition(len);
          break;
        case 'd':
          ret.day = digitCondition(len);
          break;
        case 'E':
          ret.weekday = nameCondition(len);
          break;
        case 'j':
          ret.hour = digitCondition(len);
          break;
        case 'h':
          ret.hour = digitCondition(len);
          ret.hour12 = true;
          break;
        case 'H':
          ret.hour = digitCondition(len);
          ret.hour12 = false;
          break;
        case 'm':
          ret.minute = digitCondition(len);
          break;
        case 's':
          ret.second = digitCondition(len);
          break;
        case 'z':
          ret.timeZoneName = 'long';
          break;
        case 'Z':
          ret.timeZoneName = 'short';
          break;
      }
      i = j;
    }
    return ret;
  }
  var dateFormatterCache = new Map();
  var DateFormatter = (function() {
    function DateFormatter() {}
    DateFormatter.format = function(date, locale, pattern) {
      var key = locale + pattern;
      if (dateFormatterCache.has(key)) {
        return dateFormatterCache.get(key).format(date);
      }
      var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
      dateFormatterCache.set(key, formatter);
      return formatter.format(date);
    };
    return DateFormatter;
  })();
  exports.DateFormatter = DateFormatter;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/facade/math.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  exports.Math = lang_1.global.Math;
  exports.NaN = typeof exports.NaN;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.js", ["github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(process) {
    ;
    (function(undefined) {
      var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
      };
      var root = (objectTypes[typeof window] && window) || this,
          freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
          freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
          moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
          freeGlobal = objectTypes[typeof global] && global;
      if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        root = freeGlobal;
      }
      var Rx = {
        internals: {},
        config: {Promise: root.Promise},
        helpers: {}
      };
      var noop = Rx.helpers.noop = function() {},
          notDefined = Rx.helpers.notDefined = function(x) {
            return typeof x === 'undefined';
          },
          isScheduler = Rx.helpers.isScheduler = function(x) {
            return x instanceof Rx.Scheduler;
          },
          identity = Rx.helpers.identity = function(x) {
            return x;
          },
          pluck = Rx.helpers.pluck = function(property) {
            return function(x) {
              return x[property];
            };
          },
          just = Rx.helpers.just = function(value) {
            return function() {
              return value;
            };
          },
          defaultNow = Rx.helpers.defaultNow = Date.now,
          defaultComparer = Rx.helpers.defaultComparer = function(x, y) {
            return isEqual(x, y);
          },
          defaultSubComparer = Rx.helpers.defaultSubComparer = function(x, y) {
            return x > y ? 1 : (x < y ? -1 : 0);
          },
          defaultKeySerializer = Rx.helpers.defaultKeySerializer = function(x) {
            return x.toString();
          },
          defaultError = Rx.helpers.defaultError = function(err) {
            throw err;
          },
          isPromise = Rx.helpers.isPromise = function(p) {
            return !!p && typeof p.then === 'function';
          },
          asArray = Rx.helpers.asArray = function() {
            return Array.prototype.slice.call(arguments);
          },
          not = Rx.helpers.not = function(a) {
            return !a;
          },
          isFunction = Rx.helpers.isFunction = (function() {
            var isFn = function(value) {
              return typeof value == 'function' || false;
            };
            if (isFn(/x/)) {
              isFn = function(value) {
                return typeof value == 'function' && toString.call(value) == '[object Function]';
              };
            }
            return isFn;
          }());
      function cloneArray(arr) {
        for (var a = [],
            i = 0,
            len = arr.length; i < len; i++) {
          a.push(arr[i]);
        }
        return a;
      }
      Rx.config.longStackSupport = false;
      var hasStacks = false;
      try {
        throw new Error();
      } catch (e) {
        hasStacks = !!e.stack;
      }
      var rStartingLine = captureLine(),
          rFileName;
      var STACK_JUMP_SEPARATOR = "From previous event:";
      function makeStackTraceLong(error, observable) {
        if (hasStacks && observable.stack && typeof error === "object" && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1) {
          var stacks = [];
          for (var o = observable; !!o; o = o.source) {
            if (o.stack) {
              stacks.unshift(o.stack);
            }
          }
          stacks.unshift(error.stack);
          var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
          error.stack = filterStackString(concatedStacks);
        }
      }
      function filterStackString(stackString) {
        var lines = stackString.split("\n"),
            desiredLines = [];
        for (var i = 0,
            len = lines.length; i < len; i++) {
          var line = lines[i];
          if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
          }
        }
        return desiredLines.join("\n");
      }
      function isInternalFrame(stackLine) {
        var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
        if (!fileNameAndLineNumber) {
          return false;
        }
        var fileName = fileNameAndLineNumber[0],
            lineNumber = fileNameAndLineNumber[1];
        return fileName === rFileName && lineNumber >= rStartingLine && lineNumber <= rEndingLine;
      }
      function isNodeFrame(stackLine) {
        return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1;
      }
      function captureLine() {
        if (!hasStacks) {
          return;
        }
        try {
          throw new Error();
        } catch (e) {
          var lines = e.stack.split("\n");
          var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
          var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
          if (!fileNameAndLineNumber) {
            return;
          }
          rFileName = fileNameAndLineNumber[0];
          return fileNameAndLineNumber[1];
        }
      }
      function getFileNameAndLineNumber(stackLine) {
        var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
        if (attempt1) {
          return [attempt1[1], Number(attempt1[2])];
        }
        var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
        if (attempt2) {
          return [attempt2[1], Number(attempt2[2])];
        }
        var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
        if (attempt3) {
          return [attempt3[1], Number(attempt3[2])];
        }
      }
      var EmptyError = Rx.EmptyError = function() {
        this.message = 'Sequence contains no elements.';
        Error.call(this);
      };
      EmptyError.prototype = Error.prototype;
      var ObjectDisposedError = Rx.ObjectDisposedError = function() {
        this.message = 'Object has been disposed';
        Error.call(this);
      };
      ObjectDisposedError.prototype = Error.prototype;
      var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function() {
        this.message = 'Argument out of range';
        Error.call(this);
      };
      ArgumentOutOfRangeError.prototype = Error.prototype;
      var NotSupportedError = Rx.NotSupportedError = function(message) {
        this.message = message || 'This operation is not supported';
        Error.call(this);
      };
      NotSupportedError.prototype = Error.prototype;
      var NotImplementedError = Rx.NotImplementedError = function(message) {
        this.message = message || 'This operation is not implemented';
        Error.call(this);
      };
      NotImplementedError.prototype = Error.prototype;
      var notImplemented = Rx.helpers.notImplemented = function() {
        throw new NotImplementedError();
      };
      var notSupported = Rx.helpers.notSupported = function() {
        throw new NotSupportedError();
      };
      var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) || '_es6shim_iterator_';
      if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
        $iterator$ = '@@iterator';
      }
      var doneEnumerator = Rx.doneEnumerator = {
        done: true,
        value: undefined
      };
      var isIterable = Rx.helpers.isIterable = function(o) {
        return o[$iterator$] !== undefined;
      };
      var isArrayLike = Rx.helpers.isArrayLike = function(o) {
        return o && o.length !== undefined;
      };
      Rx.helpers.iterator = $iterator$;
      var bindCallback = Rx.internals.bindCallback = function(func, thisArg, argCount) {
        if (typeof thisArg === 'undefined') {
          return func;
        }
        switch (argCount) {
          case 0:
            return function() {
              return func.call(thisArg);
            };
          case 1:
            return function(arg) {
              return func.call(thisArg, arg);
            };
          case 2:
            return function(value, index) {
              return func.call(thisArg, value, index);
            };
          case 3:
            return function(value, index, collection) {
              return func.call(thisArg, value, index, collection);
            };
        }
        return function() {
          return func.apply(thisArg, arguments);
        };
      };
      var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
          dontEnumsLength = dontEnums.length;
      var argsClass = '[object Arguments]',
          arrayClass = '[object Array]',
          boolClass = '[object Boolean]',
          dateClass = '[object Date]',
          errorClass = '[object Error]',
          funcClass = '[object Function]',
          numberClass = '[object Number]',
          objectClass = '[object Object]',
          regexpClass = '[object RegExp]',
          stringClass = '[object String]';
      var toString = Object.prototype.toString,
          hasOwnProperty = Object.prototype.hasOwnProperty,
          supportsArgsClass = toString.call(arguments) == argsClass,
          supportNodeClass,
          errorProto = Error.prototype,
          objectProto = Object.prototype,
          stringProto = String.prototype,
          propertyIsEnumerable = objectProto.propertyIsEnumerable;
      try {
        supportNodeClass = !(toString.call(document) == objectClass && !({'toString': 0} + ''));
      } catch (e) {
        supportNodeClass = true;
      }
      var nonEnumProps = {};
      nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = {
        'constructor': true,
        'toLocaleString': true,
        'toString': true,
        'valueOf': true
      };
      nonEnumProps[boolClass] = nonEnumProps[stringClass] = {
        'constructor': true,
        'toString': true,
        'valueOf': true
      };
      nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = {
        'constructor': true,
        'toString': true
      };
      nonEnumProps[objectClass] = {'constructor': true};
      var support = {};
      (function() {
        var ctor = function() {
          this.x = 1;
        },
            props = [];
        ctor.prototype = {
          'valueOf': 1,
          'y': 1
        };
        for (var key in new ctor) {
          props.push(key);
        }
        for (key in arguments) {}
        support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');
        support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');
        support.nonEnumArgs = key != 0;
        support.nonEnumShadows = !/valueOf/.test(props);
      }(1));
      var isObject = Rx.internals.isObject = function(value) {
        var type = typeof value;
        return value && (type == 'function' || type == 'object') || false;
      };
      function keysIn(object) {
        var result = [];
        if (!isObject(object)) {
          return result;
        }
        if (support.nonEnumArgs && object.length && isArguments(object)) {
          object = slice.call(object);
        }
        var skipProto = support.enumPrototypes && typeof object == 'function',
            skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);
        for (var key in object) {
          if (!(skipProto && key == 'prototype') && !(skipErrorProps && (key == 'message' || key == 'name'))) {
            result.push(key);
          }
        }
        if (support.nonEnumShadows && object !== objectProto) {
          var ctor = object.constructor,
              index = -1,
              length = dontEnumsLength;
          if (object === (ctor && ctor.prototype)) {
            var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
                nonEnum = nonEnumProps[className];
          }
          while (++index < length) {
            key = dontEnums[index];
            if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
              result.push(key);
            }
          }
        }
        return result;
      }
      function internalFor(object, callback, keysFunc) {
        var index = -1,
            props = keysFunc(object),
            length = props.length;
        while (++index < length) {
          var key = props[index];
          if (callback(object[key], key, object) === false) {
            break;
          }
        }
        return object;
      }
      function internalForIn(object, callback) {
        return internalFor(object, callback, keysIn);
      }
      function isNode(value) {
        return typeof value.toString != 'function' && typeof(value + '') == 'string';
      }
      var isArguments = function(value) {
        return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
      };
      if (!supportsArgsClass) {
        isArguments = function(value) {
          return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
        };
      }
      var isEqual = Rx.internals.isEqual = function(x, y) {
        return deepEquals(x, y, [], []);
      };
      function deepEquals(a, b, stackA, stackB) {
        if (a === b) {
          return a !== 0 || (1 / a == 1 / b);
        }
        var type = typeof a,
            otherType = typeof b;
        if (a === a && (a == null || b == null || (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
          return false;
        }
        var className = toString.call(a),
            otherClass = toString.call(b);
        if (className == argsClass) {
          className = objectClass;
        }
        if (otherClass == argsClass) {
          otherClass = objectClass;
        }
        if (className != otherClass) {
          return false;
        }
        switch (className) {
          case boolClass:
          case dateClass:
            return +a == +b;
          case numberClass:
            return (a != +a) ? b != +b : (a == 0 ? (1 / a == 1 / b) : a == +b);
          case regexpClass:
          case stringClass:
            return a == String(b);
        }
        var isArr = className == arrayClass;
        if (!isArr) {
          if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
            return false;
          }
          var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
              ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;
          if (ctorA != ctorB && !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && ('constructor' in a && 'constructor' in b)) {
            return false;
          }
        }
        var initedStack = !stackA;
        stackA || (stackA = []);
        stackB || (stackB = []);
        var length = stackA.length;
        while (length--) {
          if (stackA[length] == a) {
            return stackB[length] == b;
          }
        }
        var size = 0;
        var result = true;
        stackA.push(a);
        stackB.push(b);
        if (isArr) {
          length = a.length;
          size = b.length;
          result = size == length;
          if (result) {
            while (size--) {
              var index = length,
                  value = b[size];
              if (!(result = deepEquals(a[size], value, stackA, stackB))) {
                break;
              }
            }
          }
        } else {
          internalForIn(b, function(value, key, b) {
            if (hasOwnProperty.call(b, key)) {
              size++;
              return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
            }
          });
          if (result) {
            internalForIn(a, function(value, key, a) {
              if (hasOwnProperty.call(a, key)) {
                return (result = --size > -1);
              }
            });
          }
        }
        stackA.pop();
        stackB.pop();
        return result;
      }
      var hasProp = {}.hasOwnProperty,
          slice = Array.prototype.slice;
      var inherits = this.inherits = Rx.internals.inherits = function(child, parent) {
        function __() {
          this.constructor = child;
        }
        __.prototype = parent.prototype;
        child.prototype = new __();
      };
      var addProperties = Rx.internals.addProperties = function(obj) {
        for (var sources = [],
            i = 1,
            len = arguments.length; i < len; i++) {
          sources.push(arguments[i]);
        }
        for (var idx = 0,
            ln = sources.length; idx < ln; idx++) {
          var source = sources[idx];
          for (var prop in source) {
            obj[prop] = source[prop];
          }
        }
      };
      var addRef = Rx.internals.addRef = function(xs, r) {
        return new AnonymousObservable(function(observer) {
          return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
        });
      };
      function arrayInitialize(count, factory) {
        var a = new Array(count);
        for (var i = 0; i < count; i++) {
          a[i] = factory();
        }
        return a;
      }
      var errorObj = {e: {}};
      var tryCatchTarget;
      function tryCatcher() {
        try {
          return tryCatchTarget.apply(this, arguments);
        } catch (e) {
          errorObj.e = e;
          return errorObj;
        }
      }
      function tryCatch(fn) {
        if (!isFunction(fn)) {
          throw new TypeError('fn must be a function');
        }
        tryCatchTarget = fn;
        return tryCatcher;
      }
      function thrower(e) {
        throw e;
      }
      function IndexedItem(id, value) {
        this.id = id;
        this.value = value;
      }
      IndexedItem.prototype.compareTo = function(other) {
        var c = this.value.compareTo(other.value);
        c === 0 && (c = this.id - other.id);
        return c;
      };
      var PriorityQueue = Rx.internals.PriorityQueue = function(capacity) {
        this.items = new Array(capacity);
        this.length = 0;
      };
      var priorityProto = PriorityQueue.prototype;
      priorityProto.isHigherPriority = function(left, right) {
        return this.items[left].compareTo(this.items[right]) < 0;
      };
      priorityProto.percolate = function(index) {
        if (index >= this.length || index < 0) {
          return;
        }
        var parent = index - 1 >> 1;
        if (parent < 0 || parent === index) {
          return;
        }
        if (this.isHigherPriority(index, parent)) {
          var temp = this.items[index];
          this.items[index] = this.items[parent];
          this.items[parent] = temp;
          this.percolate(parent);
        }
      };
      priorityProto.heapify = function(index) {
        +index || (index = 0);
        if (index >= this.length || index < 0) {
          return;
        }
        var left = 2 * index + 1,
            right = 2 * index + 2,
            first = index;
        if (left < this.length && this.isHigherPriority(left, first)) {
          first = left;
        }
        if (right < this.length && this.isHigherPriority(right, first)) {
          first = right;
        }
        if (first !== index) {
          var temp = this.items[index];
          this.items[index] = this.items[first];
          this.items[first] = temp;
          this.heapify(first);
        }
      };
      priorityProto.peek = function() {
        return this.items[0].value;
      };
      priorityProto.removeAt = function(index) {
        this.items[index] = this.items[--this.length];
        this.items[this.length] = undefined;
        this.heapify();
      };
      priorityProto.dequeue = function() {
        var result = this.peek();
        this.removeAt(0);
        return result;
      };
      priorityProto.enqueue = function(item) {
        var index = this.length++;
        this.items[index] = new IndexedItem(PriorityQueue.count++, item);
        this.percolate(index);
      };
      priorityProto.remove = function(item) {
        for (var i = 0; i < this.length; i++) {
          if (this.items[i].value === item) {
            this.removeAt(i);
            return true;
          }
        }
        return false;
      };
      PriorityQueue.count = 0;
      var CompositeDisposable = Rx.CompositeDisposable = function() {
        var args = [],
            i,
            len;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
          len = args.length;
        } else {
          len = arguments.length;
          args = new Array(len);
          for (i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        for (i = 0; i < len; i++) {
          if (!isDisposable(args[i])) {
            throw new TypeError('Not a disposable');
          }
        }
        this.disposables = args;
        this.isDisposed = false;
        this.length = args.length;
      };
      var CompositeDisposablePrototype = CompositeDisposable.prototype;
      CompositeDisposablePrototype.add = function(item) {
        if (this.isDisposed) {
          item.dispose();
        } else {
          this.disposables.push(item);
          this.length++;
        }
      };
      CompositeDisposablePrototype.remove = function(item) {
        var shouldDispose = false;
        if (!this.isDisposed) {
          var idx = this.disposables.indexOf(item);
          if (idx !== -1) {
            shouldDispose = true;
            this.disposables.splice(idx, 1);
            this.length--;
            item.dispose();
          }
        }
        return shouldDispose;
      };
      CompositeDisposablePrototype.dispose = function() {
        if (!this.isDisposed) {
          this.isDisposed = true;
          var len = this.disposables.length,
              currentDisposables = new Array(len);
          for (var i = 0; i < len; i++) {
            currentDisposables[i] = this.disposables[i];
          }
          this.disposables = [];
          this.length = 0;
          for (i = 0; i < len; i++) {
            currentDisposables[i].dispose();
          }
        }
      };
      var Disposable = Rx.Disposable = function(action) {
        this.isDisposed = false;
        this.action = action || noop;
      };
      Disposable.prototype.dispose = function() {
        if (!this.isDisposed) {
          this.action();
          this.isDisposed = true;
        }
      };
      var disposableCreate = Disposable.create = function(action) {
        return new Disposable(action);
      };
      var disposableEmpty = Disposable.empty = {dispose: noop};
      var isDisposable = Disposable.isDisposable = function(d) {
        return d && isFunction(d.dispose);
      };
      var checkDisposed = Disposable.checkDisposed = function(disposable) {
        if (disposable.isDisposed) {
          throw new ObjectDisposedError();
        }
      };
      var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function() {
        function BooleanDisposable() {
          this.isDisposed = false;
          this.current = null;
        }
        var booleanDisposablePrototype = BooleanDisposable.prototype;
        booleanDisposablePrototype.getDisposable = function() {
          return this.current;
        };
        booleanDisposablePrototype.setDisposable = function(value) {
          var shouldDispose = this.isDisposed;
          if (!shouldDispose) {
            var old = this.current;
            this.current = value;
          }
          old && old.dispose();
          shouldDispose && value && value.dispose();
        };
        booleanDisposablePrototype.dispose = function() {
          if (!this.isDisposed) {
            this.isDisposed = true;
            var old = this.current;
            this.current = null;
          }
          old && old.dispose();
        };
        return BooleanDisposable;
      }());
      var SerialDisposable = Rx.SerialDisposable = SingleAssignmentDisposable;
      var RefCountDisposable = Rx.RefCountDisposable = (function() {
        function InnerDisposable(disposable) {
          this.disposable = disposable;
          this.disposable.count++;
          this.isInnerDisposed = false;
        }
        InnerDisposable.prototype.dispose = function() {
          if (!this.disposable.isDisposed && !this.isInnerDisposed) {
            this.isInnerDisposed = true;
            this.disposable.count--;
            if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
              this.disposable.isDisposed = true;
              this.disposable.underlyingDisposable.dispose();
            }
          }
        };
        function RefCountDisposable(disposable) {
          this.underlyingDisposable = disposable;
          this.isDisposed = false;
          this.isPrimaryDisposed = false;
          this.count = 0;
        }
        RefCountDisposable.prototype.dispose = function() {
          if (!this.isDisposed && !this.isPrimaryDisposed) {
            this.isPrimaryDisposed = true;
            if (this.count === 0) {
              this.isDisposed = true;
              this.underlyingDisposable.dispose();
            }
          }
        };
        RefCountDisposable.prototype.getDisposable = function() {
          return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
        };
        return RefCountDisposable;
      })();
      function ScheduledDisposable(scheduler, disposable) {
        this.scheduler = scheduler;
        this.disposable = disposable;
        this.isDisposed = false;
      }
      function scheduleItem(s, self) {
        if (!self.isDisposed) {
          self.isDisposed = true;
          self.disposable.dispose();
        }
      }
      ScheduledDisposable.prototype.dispose = function() {
        this.scheduler.scheduleWithState(this, scheduleItem);
      };
      var ScheduledItem = Rx.internals.ScheduledItem = function(scheduler, state, action, dueTime, comparer) {
        this.scheduler = scheduler;
        this.state = state;
        this.action = action;
        this.dueTime = dueTime;
        this.comparer = comparer || defaultSubComparer;
        this.disposable = new SingleAssignmentDisposable();
      };
      ScheduledItem.prototype.invoke = function() {
        this.disposable.setDisposable(this.invokeCore());
      };
      ScheduledItem.prototype.compareTo = function(other) {
        return this.comparer(this.dueTime, other.dueTime);
      };
      ScheduledItem.prototype.isCancelled = function() {
        return this.disposable.isDisposed;
      };
      ScheduledItem.prototype.invokeCore = function() {
        return this.action(this.scheduler, this.state);
      };
      var Scheduler = Rx.Scheduler = (function() {
        function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
          this.now = now;
          this._schedule = schedule;
          this._scheduleRelative = scheduleRelative;
          this._scheduleAbsolute = scheduleAbsolute;
        }
        function invokeAction(scheduler, action) {
          action();
          return disposableEmpty;
        }
        var schedulerProto = Scheduler.prototype;
        schedulerProto.schedule = function(action) {
          return this._schedule(action, invokeAction);
        };
        schedulerProto.scheduleWithState = function(state, action) {
          return this._schedule(state, action);
        };
        schedulerProto.scheduleWithRelative = function(dueTime, action) {
          return this._scheduleRelative(action, dueTime, invokeAction);
        };
        schedulerProto.scheduleWithRelativeAndState = function(state, dueTime, action) {
          return this._scheduleRelative(state, dueTime, action);
        };
        schedulerProto.scheduleWithAbsolute = function(dueTime, action) {
          return this._scheduleAbsolute(action, dueTime, invokeAction);
        };
        schedulerProto.scheduleWithAbsoluteAndState = function(state, dueTime, action) {
          return this._scheduleAbsolute(state, dueTime, action);
        };
        Scheduler.now = defaultNow;
        Scheduler.normalize = function(timeSpan) {
          timeSpan < 0 && (timeSpan = 0);
          return timeSpan;
        };
        return Scheduler;
      }());
      var normalizeTime = Scheduler.normalize;
      (function(schedulerProto) {
        function invokeRecImmediate(scheduler, pair) {
          var state = pair[0],
              action = pair[1],
              group = new CompositeDisposable();
          function recursiveAction(state1) {
            action(state1, function(state2) {
              var isAdded = false,
                  isDone = false,
                  d = scheduler.scheduleWithState(state2, function(scheduler1, state3) {
                    if (isAdded) {
                      group.remove(d);
                    } else {
                      isDone = true;
                    }
                    recursiveAction(state3);
                    return disposableEmpty;
                  });
              if (!isDone) {
                group.add(d);
                isAdded = true;
              }
            });
          }
          recursiveAction(state);
          return group;
        }
        function invokeRecDate(scheduler, pair, method) {
          var state = pair[0],
              action = pair[1],
              group = new CompositeDisposable();
          function recursiveAction(state1) {
            action(state1, function(state2, dueTime1) {
              var isAdded = false,
                  isDone = false,
                  d = scheduler[method](state2, dueTime1, function(scheduler1, state3) {
                    if (isAdded) {
                      group.remove(d);
                    } else {
                      isDone = true;
                    }
                    recursiveAction(state3);
                    return disposableEmpty;
                  });
              if (!isDone) {
                group.add(d);
                isAdded = true;
              }
            });
          }
          ;
          recursiveAction(state);
          return group;
        }
        function scheduleInnerRecursive(action, self) {
          action(function(dt) {
            self(action, dt);
          });
        }
        schedulerProto.scheduleRecursive = function(action) {
          return this.scheduleRecursiveWithState(action, function(_action, self) {
            _action(function() {
              self(_action);
            });
          });
        };
        schedulerProto.scheduleRecursiveWithState = function(state, action) {
          return this.scheduleWithState([state, action], invokeRecImmediate);
        };
        schedulerProto.scheduleRecursiveWithRelative = function(dueTime, action) {
          return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
        };
        schedulerProto.scheduleRecursiveWithRelativeAndState = function(state, dueTime, action) {
          return this._scheduleRelative([state, action], dueTime, function(s, p) {
            return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
          });
        };
        schedulerProto.scheduleRecursiveWithAbsolute = function(dueTime, action) {
          return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
        };
        schedulerProto.scheduleRecursiveWithAbsoluteAndState = function(state, dueTime, action) {
          return this._scheduleAbsolute([state, action], dueTime, function(s, p) {
            return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
          });
        };
      }(Scheduler.prototype));
      (function(schedulerProto) {
        Scheduler.prototype.schedulePeriodic = function(period, action) {
          return this.schedulePeriodicWithState(null, period, action);
        };
        Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
          if (typeof root.setInterval === 'undefined') {
            throw new NotSupportedError();
          }
          period = normalizeTime(period);
          var s = state,
              id = root.setInterval(function() {
                s = action(s);
              }, period);
          return disposableCreate(function() {
            root.clearInterval(id);
          });
        };
      }(Scheduler.prototype));
      (function(schedulerProto) {
        schedulerProto.catchError = schedulerProto['catch'] = function(handler) {
          return new CatchScheduler(this, handler);
        };
      }(Scheduler.prototype));
      var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function() {
        function tick(command, recurse) {
          recurse(0, this._period);
          try {
            this._state = this._action(this._state);
          } catch (e) {
            this._cancel.dispose();
            throw e;
          }
        }
        function SchedulePeriodicRecursive(scheduler, state, period, action) {
          this._scheduler = scheduler;
          this._state = state;
          this._period = period;
          this._action = action;
        }
        SchedulePeriodicRecursive.prototype.start = function() {
          var d = new SingleAssignmentDisposable();
          this._cancel = d;
          d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));
          return d;
        };
        return SchedulePeriodicRecursive;
      }());
      var immediateScheduler = Scheduler.immediate = (function() {
        function scheduleNow(state, action) {
          return action(this, state);
        }
        return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
      }());
      var currentThreadScheduler = Scheduler.currentThread = (function() {
        var queue;
        function runTrampoline() {
          while (queue.length > 0) {
            var item = queue.dequeue();
            !item.isCancelled() && item.invoke();
          }
        }
        function scheduleNow(state, action) {
          var si = new ScheduledItem(this, state, action, this.now());
          if (!queue) {
            queue = new PriorityQueue(4);
            queue.enqueue(si);
            var result = tryCatch(runTrampoline)();
            queue = null;
            if (result === errorObj) {
              return thrower(result.e);
            }
          } else {
            queue.enqueue(si);
          }
          return si.disposable;
        }
        var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
        currentScheduler.scheduleRequired = function() {
          return !queue;
        };
        return currentScheduler;
      }());
      var scheduleMethod,
          clearMethod;
      var localTimer = (function() {
        var localSetTimeout,
            localClearTimeout = noop;
        if (!!root.WScript) {
          localSetTimeout = function(fn, time) {
            root.WScript.Sleep(time);
            fn();
          };
        } else if (!!root.setTimeout) {
          localSetTimeout = root.setTimeout;
          localClearTimeout = root.clearTimeout;
        } else {
          throw new NotSupportedError();
        }
        return {
          setTimeout: localSetTimeout,
          clearTimeout: localClearTimeout
        };
      }());
      var localSetTimeout = localTimer.setTimeout,
          localClearTimeout = localTimer.clearTimeout;
      (function() {
        var nextHandle = 1,
            tasksByHandle = {},
            currentlyRunning = false;
        clearMethod = function(handle) {
          delete tasksByHandle[handle];
        };
        function runTask(handle) {
          if (currentlyRunning) {
            localSetTimeout(function() {
              runTask(handle);
            }, 0);
          } else {
            var task = tasksByHandle[handle];
            if (task) {
              currentlyRunning = true;
              var result = tryCatch(task)();
              clearMethod(handle);
              currentlyRunning = false;
              if (result === errorObj) {
                return thrower(result.e);
              }
            }
          }
        }
        var reNative = RegExp('^' + String(toString).replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/toString| for [^\]]+/g, '.*?') + '$');
        var setImmediate = typeof(setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' && !reNative.test(setImmediate) && setImmediate;
        function postMessageSupported() {
          if (!root.postMessage || root.importScripts) {
            return false;
          }
          var isAsync = false,
              oldHandler = root.onmessage;
          root.onmessage = function() {
            isAsync = true;
          };
          root.postMessage('', '*');
          root.onmessage = oldHandler;
          return isAsync;
        }
        if (isFunction(setImmediate)) {
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            setImmediate(function() {
              runTask(id);
            });
            return id;
          };
        } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            process.nextTick(function() {
              runTask(id);
            });
            return id;
          };
        } else if (postMessageSupported()) {
          var MSG_PREFIX = 'ms.rx.schedule' + Math.random();
          function onGlobalPostMessage(event) {
            if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
              runTask(event.data.substring(MSG_PREFIX.length));
            }
          }
          if (root.addEventListener) {
            root.addEventListener('message', onGlobalPostMessage, false);
          } else {
            root.attachEvent('onmessage', onGlobalPostMessage, false);
          }
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            root.postMessage(MSG_PREFIX + currentId, '*');
            return id;
          };
        } else if (!!root.MessageChannel) {
          var channel = new root.MessageChannel();
          channel.port1.onmessage = function(e) {
            runTask(e.data);
          };
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            channel.port2.postMessage(id);
            return id;
          };
        } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {
          scheduleMethod = function(action) {
            var scriptElement = root.document.createElement('script');
            var id = nextHandle++;
            tasksByHandle[id] = action;
            scriptElement.onreadystatechange = function() {
              runTask(id);
              scriptElement.onreadystatechange = null;
              scriptElement.parentNode.removeChild(scriptElement);
              scriptElement = null;
            };
            root.document.documentElement.appendChild(scriptElement);
            return id;
          };
        } else {
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            localSetTimeout(function() {
              runTask(id);
            }, 0);
            return id;
          };
        }
      }());
      var timeoutScheduler = Scheduler.timeout = Scheduler.default = (function() {
        function scheduleNow(state, action) {
          var scheduler = this,
              disposable = new SingleAssignmentDisposable();
          var id = scheduleMethod(function() {
            if (!disposable.isDisposed) {
              disposable.setDisposable(action(scheduler, state));
            }
          });
          return new CompositeDisposable(disposable, disposableCreate(function() {
            clearMethod(id);
          }));
        }
        function scheduleRelative(state, dueTime, action) {
          var scheduler = this,
              dt = Scheduler.normalize(dueTime);
          if (dt === 0) {
            return scheduler.scheduleWithState(state, action);
          }
          var disposable = new SingleAssignmentDisposable();
          var id = localSetTimeout(function() {
            if (!disposable.isDisposed) {
              disposable.setDisposable(action(scheduler, state));
            }
          }, dt);
          return new CompositeDisposable(disposable, disposableCreate(function() {
            localClearTimeout(id);
          }));
        }
        function scheduleAbsolute(state, dueTime, action) {
          return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
        }
        return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
      })();
      var CatchScheduler = (function(__super__) {
        function scheduleNow(state, action) {
          return this._scheduler.scheduleWithState(state, this._wrap(action));
        }
        function scheduleRelative(state, dueTime, action) {
          return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
        }
        function scheduleAbsolute(state, dueTime, action) {
          return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
        }
        inherits(CatchScheduler, __super__);
        function CatchScheduler(scheduler, handler) {
          this._scheduler = scheduler;
          this._handler = handler;
          this._recursiveOriginal = null;
          this._recursiveWrapper = null;
          __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
        }
        CatchScheduler.prototype._clone = function(scheduler) {
          return new CatchScheduler(scheduler, this._handler);
        };
        CatchScheduler.prototype._wrap = function(action) {
          var parent = this;
          return function(self, state) {
            try {
              return action(parent._getRecursiveWrapper(self), state);
            } catch (e) {
              if (!parent._handler(e)) {
                throw e;
              }
              return disposableEmpty;
            }
          };
        };
        CatchScheduler.prototype._getRecursiveWrapper = function(scheduler) {
          if (this._recursiveOriginal !== scheduler) {
            this._recursiveOriginal = scheduler;
            var wrapper = this._clone(scheduler);
            wrapper._recursiveOriginal = scheduler;
            wrapper._recursiveWrapper = wrapper;
            this._recursiveWrapper = wrapper;
          }
          return this._recursiveWrapper;
        };
        CatchScheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
          var self = this,
              failed = false,
              d = new SingleAssignmentDisposable();
          d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function(state1) {
            if (failed) {
              return null;
            }
            try {
              return action(state1);
            } catch (e) {
              failed = true;
              if (!self._handler(e)) {
                throw e;
              }
              d.dispose();
              return null;
            }
          }));
          return d;
        };
        return CatchScheduler;
      }(Scheduler));
      var Notification = Rx.Notification = (function() {
        function Notification(kind, value, exception, accept, acceptObservable, toString) {
          this.kind = kind;
          this.value = value;
          this.exception = exception;
          this._accept = accept;
          this._acceptObservable = acceptObservable;
          this.toString = toString;
        }
        Notification.prototype.accept = function(observerOrOnNext, onError, onCompleted) {
          return observerOrOnNext && typeof observerOrOnNext === 'object' ? this._acceptObservable(observerOrOnNext) : this._accept(observerOrOnNext, onError, onCompleted);
        };
        Notification.prototype.toObservable = function(scheduler) {
          var self = this;
          isScheduler(scheduler) || (scheduler = immediateScheduler);
          return new AnonymousObservable(function(observer) {
            return scheduler.scheduleWithState(self, function(_, notification) {
              notification._acceptObservable(observer);
              notification.kind === 'N' && observer.onCompleted();
            });
          });
        };
        return Notification;
      })();
      var notificationCreateOnNext = Notification.createOnNext = (function() {
        function _accept(onNext) {
          return onNext(this.value);
        }
        function _acceptObservable(observer) {
          return observer.onNext(this.value);
        }
        function toString() {
          return 'OnNext(' + this.value + ')';
        }
        return function(value) {
          return new Notification('N', value, null, _accept, _acceptObservable, toString);
        };
      }());
      var notificationCreateOnError = Notification.createOnError = (function() {
        function _accept(onNext, onError) {
          return onError(this.exception);
        }
        function _acceptObservable(observer) {
          return observer.onError(this.exception);
        }
        function toString() {
          return 'OnError(' + this.exception + ')';
        }
        return function(e) {
          return new Notification('E', null, e, _accept, _acceptObservable, toString);
        };
      }());
      var notificationCreateOnCompleted = Notification.createOnCompleted = (function() {
        function _accept(onNext, onError, onCompleted) {
          return onCompleted();
        }
        function _acceptObservable(observer) {
          return observer.onCompleted();
        }
        function toString() {
          return 'OnCompleted()';
        }
        return function() {
          return new Notification('C', null, null, _accept, _acceptObservable, toString);
        };
      }());
      var Enumerator = Rx.internals.Enumerator = function(next) {
        this._next = next;
      };
      Enumerator.prototype.next = function() {
        return this._next();
      };
      Enumerator.prototype[$iterator$] = function() {
        return this;
      };
      var Enumerable = Rx.internals.Enumerable = function(iterator) {
        this._iterator = iterator;
      };
      Enumerable.prototype[$iterator$] = function() {
        return this._iterator();
      };
      Enumerable.prototype.concat = function() {
        var sources = this;
        return new AnonymousObservable(function(o) {
          var e = sources[$iterator$]();
          var isDisposed,
              subscription = new SerialDisposable();
          var cancelable = immediateScheduler.scheduleRecursive(function(self) {
            if (isDisposed) {
              return;
            }
            try {
              var currentItem = e.next();
            } catch (ex) {
              return o.onError(ex);
            }
            if (currentItem.done) {
              return o.onCompleted();
            }
            var currentValue = currentItem.value;
            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
            var d = new SingleAssignmentDisposable();
            subscription.setDisposable(d);
            d.setDisposable(currentValue.subscribe(function(x) {
              o.onNext(x);
            }, function(err) {
              o.onError(err);
            }, self));
          });
          return new CompositeDisposable(subscription, cancelable, disposableCreate(function() {
            isDisposed = true;
          }));
        });
      };
      Enumerable.prototype.catchError = function() {
        var sources = this;
        return new AnonymousObservable(function(o) {
          var e = sources[$iterator$]();
          var isDisposed,
              subscription = new SerialDisposable();
          var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function(lastException, self) {
            if (isDisposed) {
              return;
            }
            try {
              var currentItem = e.next();
            } catch (ex) {
              return observer.onError(ex);
            }
            if (currentItem.done) {
              if (lastException !== null) {
                o.onError(lastException);
              } else {
                o.onCompleted();
              }
              return;
            }
            var currentValue = currentItem.value;
            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
            var d = new SingleAssignmentDisposable();
            subscription.setDisposable(d);
            d.setDisposable(currentValue.subscribe(function(x) {
              o.onNext(x);
            }, self, function() {
              o.onCompleted();
            }));
          });
          return new CompositeDisposable(subscription, cancelable, disposableCreate(function() {
            isDisposed = true;
          }));
        });
      };
      Enumerable.prototype.catchErrorWhen = function(notificationHandler) {
        var sources = this;
        return new AnonymousObservable(function(o) {
          var exceptions = new Subject(),
              notifier = new Subject(),
              handled = notificationHandler(exceptions),
              notificationDisposable = handled.subscribe(notifier);
          var e = sources[$iterator$]();
          var isDisposed,
              lastException,
              subscription = new SerialDisposable();
          var cancelable = immediateScheduler.scheduleRecursive(function(self) {
            if (isDisposed) {
              return;
            }
            try {
              var currentItem = e.next();
            } catch (ex) {
              return o.onError(ex);
            }
            if (currentItem.done) {
              if (lastException) {
                o.onError(lastException);
              } else {
                o.onCompleted();
              }
              return;
            }
            var currentValue = currentItem.value;
            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
            var outer = new SingleAssignmentDisposable();
            var inner = new SingleAssignmentDisposable();
            subscription.setDisposable(new CompositeDisposable(inner, outer));
            outer.setDisposable(currentValue.subscribe(function(x) {
              o.onNext(x);
            }, function(exn) {
              inner.setDisposable(notifier.subscribe(self, function(ex) {
                o.onError(ex);
              }, function() {
                o.onCompleted();
              }));
              exceptions.onNext(exn);
            }, function() {
              o.onCompleted();
            }));
          });
          return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function() {
            isDisposed = true;
          }));
        });
      };
      var enumerableRepeat = Enumerable.repeat = function(value, repeatCount) {
        if (repeatCount == null) {
          repeatCount = -1;
        }
        return new Enumerable(function() {
          var left = repeatCount;
          return new Enumerator(function() {
            if (left === 0) {
              return doneEnumerator;
            }
            if (left > 0) {
              left--;
            }
            return {
              done: false,
              value: value
            };
          });
        });
      };
      var enumerableOf = Enumerable.of = function(source, selector, thisArg) {
        if (selector) {
          var selectorFn = bindCallback(selector, thisArg, 3);
        }
        return new Enumerable(function() {
          var index = -1;
          return new Enumerator(function() {
            return ++index < source.length ? {
              done: false,
              value: !selector ? source[index] : selectorFn(source[index], index, source)
            } : doneEnumerator;
          });
        });
      };
      var Observer = Rx.Observer = function() {};
      Observer.prototype.toNotifier = function() {
        var observer = this;
        return function(n) {
          return n.accept(observer);
        };
      };
      Observer.prototype.asObserver = function() {
        return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
      };
      Observer.prototype.checked = function() {
        return new CheckedObserver(this);
      };
      var observerCreate = Observer.create = function(onNext, onError, onCompleted) {
        onNext || (onNext = noop);
        onError || (onError = defaultError);
        onCompleted || (onCompleted = noop);
        return new AnonymousObserver(onNext, onError, onCompleted);
      };
      Observer.fromNotifier = function(handler, thisArg) {
        return new AnonymousObserver(function(x) {
          return handler.call(thisArg, notificationCreateOnNext(x));
        }, function(e) {
          return handler.call(thisArg, notificationCreateOnError(e));
        }, function() {
          return handler.call(thisArg, notificationCreateOnCompleted());
        });
      };
      Observer.prototype.notifyOn = function(scheduler) {
        return new ObserveOnObserver(scheduler, this);
      };
      Observer.prototype.makeSafe = function(disposable) {
        return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
      };
      var AbstractObserver = Rx.internals.AbstractObserver = (function(__super__) {
        inherits(AbstractObserver, __super__);
        function AbstractObserver() {
          this.isStopped = false;
          __super__.call(this);
        }
        AbstractObserver.prototype.next = notImplemented;
        AbstractObserver.prototype.error = notImplemented;
        AbstractObserver.prototype.completed = notImplemented;
        AbstractObserver.prototype.onNext = function(value) {
          if (!this.isStopped) {
            this.next(value);
          }
        };
        AbstractObserver.prototype.onError = function(error) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.error(error);
          }
        };
        AbstractObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            this.completed();
          }
        };
        AbstractObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        AbstractObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.error(e);
            return true;
          }
          return false;
        };
        return AbstractObserver;
      }(Observer));
      var AnonymousObserver = Rx.AnonymousObserver = (function(__super__) {
        inherits(AnonymousObserver, __super__);
        function AnonymousObserver(onNext, onError, onCompleted) {
          __super__.call(this);
          this._onNext = onNext;
          this._onError = onError;
          this._onCompleted = onCompleted;
        }
        AnonymousObserver.prototype.next = function(value) {
          this._onNext(value);
        };
        AnonymousObserver.prototype.error = function(error) {
          this._onError(error);
        };
        AnonymousObserver.prototype.completed = function() {
          this._onCompleted();
        };
        return AnonymousObserver;
      }(AbstractObserver));
      var CheckedObserver = (function(__super__) {
        inherits(CheckedObserver, __super__);
        function CheckedObserver(observer) {
          __super__.call(this);
          this._observer = observer;
          this._state = 0;
        }
        var CheckedObserverPrototype = CheckedObserver.prototype;
        CheckedObserverPrototype.onNext = function(value) {
          this.checkAccess();
          var res = tryCatch(this._observer.onNext).call(this._observer, value);
          this._state = 0;
          res === errorObj && thrower(res.e);
        };
        CheckedObserverPrototype.onError = function(err) {
          this.checkAccess();
          var res = tryCatch(this._observer.onError).call(this._observer, err);
          this._state = 2;
          res === errorObj && thrower(res.e);
        };
        CheckedObserverPrototype.onCompleted = function() {
          this.checkAccess();
          var res = tryCatch(this._observer.onCompleted).call(this._observer);
          this._state = 2;
          res === errorObj && thrower(res.e);
        };
        CheckedObserverPrototype.checkAccess = function() {
          if (this._state === 1) {
            throw new Error('Re-entrancy detected');
          }
          if (this._state === 2) {
            throw new Error('Observer completed');
          }
          if (this._state === 0) {
            this._state = 1;
          }
        };
        return CheckedObserver;
      }(Observer));
      var ScheduledObserver = Rx.internals.ScheduledObserver = (function(__super__) {
        inherits(ScheduledObserver, __super__);
        function ScheduledObserver(scheduler, observer) {
          __super__.call(this);
          this.scheduler = scheduler;
          this.observer = observer;
          this.isAcquired = false;
          this.hasFaulted = false;
          this.queue = [];
          this.disposable = new SerialDisposable();
        }
        ScheduledObserver.prototype.next = function(value) {
          var self = this;
          this.queue.push(function() {
            self.observer.onNext(value);
          });
        };
        ScheduledObserver.prototype.error = function(e) {
          var self = this;
          this.queue.push(function() {
            self.observer.onError(e);
          });
        };
        ScheduledObserver.prototype.completed = function() {
          var self = this;
          this.queue.push(function() {
            self.observer.onCompleted();
          });
        };
        ScheduledObserver.prototype.ensureActive = function() {
          var isOwner = false,
              parent = this;
          if (!this.hasFaulted && this.queue.length > 0) {
            isOwner = !this.isAcquired;
            this.isAcquired = true;
          }
          if (isOwner) {
            this.disposable.setDisposable(this.scheduler.scheduleRecursive(function(self) {
              var work;
              if (parent.queue.length > 0) {
                work = parent.queue.shift();
              } else {
                parent.isAcquired = false;
                return;
              }
              try {
                work();
              } catch (ex) {
                parent.queue = [];
                parent.hasFaulted = true;
                throw ex;
              }
              self();
            }));
          }
        };
        ScheduledObserver.prototype.dispose = function() {
          __super__.prototype.dispose.call(this);
          this.disposable.dispose();
        };
        return ScheduledObserver;
      }(AbstractObserver));
      var ObserveOnObserver = (function(__super__) {
        inherits(ObserveOnObserver, __super__);
        function ObserveOnObserver(scheduler, observer, cancel) {
          __super__.call(this, scheduler, observer);
          this._cancel = cancel;
        }
        ObserveOnObserver.prototype.next = function(value) {
          __super__.prototype.next.call(this, value);
          this.ensureActive();
        };
        ObserveOnObserver.prototype.error = function(e) {
          __super__.prototype.error.call(this, e);
          this.ensureActive();
        };
        ObserveOnObserver.prototype.completed = function() {
          __super__.prototype.completed.call(this);
          this.ensureActive();
        };
        ObserveOnObserver.prototype.dispose = function() {
          __super__.prototype.dispose.call(this);
          this._cancel && this._cancel.dispose();
          this._cancel = null;
        };
        return ObserveOnObserver;
      })(ScheduledObserver);
      var observableProto;
      var Observable = Rx.Observable = (function() {
        function Observable(subscribe) {
          if (Rx.config.longStackSupport && hasStacks) {
            try {
              throw new Error();
            } catch (e) {
              this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            }
            var self = this;
            this._subscribe = function(observer) {
              var oldOnError = observer.onError.bind(observer);
              observer.onError = function(err) {
                makeStackTraceLong(err, self);
                oldOnError(err);
              };
              return subscribe.call(self, observer);
            };
          } else {
            this._subscribe = subscribe;
          }
        }
        observableProto = Observable.prototype;
        observableProto.subscribe = observableProto.forEach = function(observerOrOnNext, onError, onCompleted) {
          return this._subscribe(typeof observerOrOnNext === 'object' ? observerOrOnNext : observerCreate(observerOrOnNext, onError, onCompleted));
        };
        observableProto.subscribeOnNext = function(onNext, thisArg) {
          return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) {
            onNext.call(thisArg, x);
          } : onNext));
        };
        observableProto.subscribeOnError = function(onError, thisArg) {
          return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) {
            onError.call(thisArg, e);
          } : onError));
        };
        observableProto.subscribeOnCompleted = function(onCompleted, thisArg) {
          return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() {
            onCompleted.call(thisArg);
          } : onCompleted));
        };
        return Observable;
      })();
      var ObservableBase = Rx.ObservableBase = (function(__super__) {
        inherits(ObservableBase, __super__);
        function fixSubscriber(subscriber) {
          return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
        }
        function setDisposable(s, state) {
          var ado = state[0],
              self = state[1];
          var sub = tryCatch(self.subscribeCore).call(self, ado);
          if (sub === errorObj) {
            if (!ado.fail(errorObj.e)) {
              return thrower(errorObj.e);
            }
          }
          ado.setDisposable(fixSubscriber(sub));
        }
        function subscribe(observer) {
          var ado = new AutoDetachObserver(observer),
              state = [ado, this];
          if (currentThreadScheduler.scheduleRequired()) {
            currentThreadScheduler.scheduleWithState(state, setDisposable);
          } else {
            setDisposable(null, state);
          }
          return ado;
        }
        function ObservableBase() {
          __super__.call(this, subscribe);
        }
        ObservableBase.prototype.subscribeCore = notImplemented;
        return ObservableBase;
      }(Observable));
      observableProto.observeOn = function(scheduler) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          return source.subscribe(new ObserveOnObserver(scheduler, observer));
        }, source);
      };
      observableProto.subscribeOn = function(scheduler) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var m = new SingleAssignmentDisposable(),
              d = new SerialDisposable();
          d.setDisposable(m);
          m.setDisposable(scheduler.schedule(function() {
            d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
          }));
          return d;
        }, source);
      };
      var observableFromPromise = Observable.fromPromise = function(promise) {
        return observableDefer(function() {
          var subject = new Rx.AsyncSubject();
          promise.then(function(value) {
            subject.onNext(value);
            subject.onCompleted();
          }, subject.onError.bind(subject));
          return subject;
        });
      };
      observableProto.toPromise = function(promiseCtor) {
        promiseCtor || (promiseCtor = Rx.config.Promise);
        if (!promiseCtor) {
          throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise');
        }
        var source = this;
        return new promiseCtor(function(resolve, reject) {
          var value,
              hasValue = false;
          source.subscribe(function(v) {
            value = v;
            hasValue = true;
          }, reject, function() {
            hasValue && resolve(value);
          });
        });
      };
      var ToArrayObservable = (function(__super__) {
        inherits(ToArrayObservable, __super__);
        function ToArrayObservable(source) {
          this.source = source;
          __super__.call(this);
        }
        ToArrayObservable.prototype.subscribeCore = function(observer) {
          return this.source.subscribe(new ToArrayObserver(observer));
        };
        return ToArrayObservable;
      }(ObservableBase));
      function ToArrayObserver(observer) {
        this.observer = observer;
        this.a = [];
        this.isStopped = false;
      }
      ToArrayObserver.prototype.onNext = function(x) {
        if (!this.isStopped) {
          this.a.push(x);
        }
      };
      ToArrayObserver.prototype.onError = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
        }
      };
      ToArrayObserver.prototype.onCompleted = function() {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onNext(this.a);
          this.observer.onCompleted();
        }
      };
      ToArrayObserver.prototype.dispose = function() {
        this.isStopped = true;
      };
      ToArrayObserver.prototype.fail = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
          return true;
        }
        return false;
      };
      observableProto.toArray = function() {
        return new ToArrayObservable(this);
      };
      Observable.create = Observable.createWithDisposable = function(subscribe, parent) {
        return new AnonymousObservable(subscribe, parent);
      };
      var observableDefer = Observable.defer = function(observableFactory) {
        return new AnonymousObservable(function(observer) {
          var result;
          try {
            result = observableFactory();
          } catch (e) {
            return observableThrow(e).subscribe(observer);
          }
          isPromise(result) && (result = observableFromPromise(result));
          return result.subscribe(observer);
        });
      };
      var observableEmpty = Observable.empty = function(scheduler) {
        isScheduler(scheduler) || (scheduler = immediateScheduler);
        return new AnonymousObservable(function(observer) {
          return scheduler.scheduleWithState(null, function() {
            observer.onCompleted();
          });
        });
      };
      var FromObservable = (function(__super__) {
        inherits(FromObservable, __super__);
        function FromObservable(iterable, mapper, scheduler) {
          this.iterable = iterable;
          this.mapper = mapper;
          this.scheduler = scheduler;
          __super__.call(this);
        }
        FromObservable.prototype.subscribeCore = function(observer) {
          var sink = new FromSink(observer, this);
          return sink.run();
        };
        return FromObservable;
      }(ObservableBase));
      var FromSink = (function() {
        function FromSink(observer, parent) {
          this.observer = observer;
          this.parent = parent;
        }
        FromSink.prototype.run = function() {
          var list = Object(this.parent.iterable),
              it = getIterable(list),
              observer = this.observer,
              mapper = this.parent.mapper;
          function loopRecursive(i, recurse) {
            try {
              var next = it.next();
            } catch (e) {
              return observer.onError(e);
            }
            if (next.done) {
              return observer.onCompleted();
            }
            var result = next.value;
            if (mapper) {
              try {
                result = mapper(result, i);
              } catch (e) {
                return observer.onError(e);
              }
            }
            observer.onNext(result);
            recurse(i + 1);
          }
          return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
        };
        return FromSink;
      }());
      var maxSafeInteger = Math.pow(2, 53) - 1;
      function StringIterable(str) {
        this._s = s;
      }
      StringIterable.prototype[$iterator$] = function() {
        return new StringIterator(this._s);
      };
      function StringIterator(str) {
        this._s = s;
        this._l = s.length;
        this._i = 0;
      }
      StringIterator.prototype[$iterator$] = function() {
        return this;
      };
      StringIterator.prototype.next = function() {
        return this._i < this._l ? {
          done: false,
          value: this._s.charAt(this._i++)
        } : doneEnumerator;
      };
      function ArrayIterable(a) {
        this._a = a;
      }
      ArrayIterable.prototype[$iterator$] = function() {
        return new ArrayIterator(this._a);
      };
      function ArrayIterator(a) {
        this._a = a;
        this._l = toLength(a);
        this._i = 0;
      }
      ArrayIterator.prototype[$iterator$] = function() {
        return this;
      };
      ArrayIterator.prototype.next = function() {
        return this._i < this._l ? {
          done: false,
          value: this._a[this._i++]
        } : doneEnumerator;
      };
      function numberIsFinite(value) {
        return typeof value === 'number' && root.isFinite(value);
      }
      function isNan(n) {
        return n !== n;
      }
      function getIterable(o) {
        var i = o[$iterator$],
            it;
        if (!i && typeof o === 'string') {
          it = new StringIterable(o);
          return it[$iterator$]();
        }
        if (!i && o.length !== undefined) {
          it = new ArrayIterable(o);
          return it[$iterator$]();
        }
        if (!i) {
          throw new TypeError('Object is not iterable');
        }
        return o[$iterator$]();
      }
      function sign(value) {
        var number = +value;
        if (number === 0) {
          return number;
        }
        if (isNaN(number)) {
          return number;
        }
        return number < 0 ? -1 : 1;
      }
      function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
          return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
          return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
          return 0;
        }
        if (len > maxSafeInteger) {
          return maxSafeInteger;
        }
        return len;
      }
      var observableFrom = Observable.from = function(iterable, mapFn, thisArg, scheduler) {
        if (iterable == null) {
          throw new Error('iterable cannot be null.');
        }
        if (mapFn && !isFunction(mapFn)) {
          throw new Error('mapFn when provided must be a function');
        }
        if (mapFn) {
          var mapper = bindCallback(mapFn, thisArg, 2);
        }
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new FromObservable(iterable, mapper, scheduler);
      };
      var FromArrayObservable = (function(__super__) {
        inherits(FromArrayObservable, __super__);
        function FromArrayObservable(args, scheduler) {
          this.args = args;
          this.scheduler = scheduler;
          __super__.call(this);
        }
        FromArrayObservable.prototype.subscribeCore = function(observer) {
          var sink = new FromArraySink(observer, this);
          return sink.run();
        };
        return FromArrayObservable;
      }(ObservableBase));
      function FromArraySink(observer, parent) {
        this.observer = observer;
        this.parent = parent;
      }
      FromArraySink.prototype.run = function() {
        var observer = this.observer,
            args = this.parent.args,
            len = args.length;
        function loopRecursive(i, recurse) {
          if (i < len) {
            observer.onNext(args[i]);
            recurse(i + 1);
          } else {
            observer.onCompleted();
          }
        }
        return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
      };
      var observableFromArray = Observable.fromArray = function(array, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new FromArrayObservable(array, scheduler);
      };
      Observable.generate = function(initialState, condition, iterate, resultSelector, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new AnonymousObservable(function(o) {
          var first = true;
          return scheduler.scheduleRecursiveWithState(initialState, function(state, self) {
            var hasResult,
                result;
            try {
              if (first) {
                first = false;
              } else {
                state = iterate(state);
              }
              hasResult = condition(state);
              hasResult && (result = resultSelector(state));
            } catch (e) {
              return o.onError(e);
            }
            if (hasResult) {
              o.onNext(result);
              self(state);
            } else {
              o.onCompleted();
            }
          });
        });
      };
      var observableNever = Observable.never = function() {
        return new AnonymousObservable(function() {
          return disposableEmpty;
        });
      };
      function observableOf(scheduler, array) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new FromArrayObservable(array, scheduler);
      }
      Observable.of = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        return new FromArrayObservable(args, currentThreadScheduler);
      };
      Observable.ofWithScheduler = function(scheduler) {
        var len = arguments.length,
            args = new Array(len - 1);
        for (var i = 1; i < len; i++) {
          args[i - 1] = arguments[i];
        }
        return new FromArrayObservable(args, scheduler);
      };
      Observable.pairs = function(obj, scheduler) {
        scheduler || (scheduler = Rx.Scheduler.currentThread);
        return new AnonymousObservable(function(observer) {
          var keys = Object.keys(obj),
              len = keys.length;
          return scheduler.scheduleRecursiveWithState(0, function(idx, self) {
            if (idx < len) {
              var key = keys[idx];
              observer.onNext([key, obj[key]]);
              self(idx + 1);
            } else {
              observer.onCompleted();
            }
          });
        });
      };
      var RangeObservable = (function(__super__) {
        inherits(RangeObservable, __super__);
        function RangeObservable(start, count, scheduler) {
          this.start = start;
          this.count = count;
          this.scheduler = scheduler;
          __super__.call(this);
        }
        RangeObservable.prototype.subscribeCore = function(observer) {
          var sink = new RangeSink(observer, this);
          return sink.run();
        };
        return RangeObservable;
      }(ObservableBase));
      var RangeSink = (function() {
        function RangeSink(observer, parent) {
          this.observer = observer;
          this.parent = parent;
        }
        RangeSink.prototype.run = function() {
          var start = this.parent.start,
              count = this.parent.count,
              observer = this.observer;
          function loopRecursive(i, recurse) {
            if (i < count) {
              observer.onNext(start + i);
              recurse(i + 1);
            } else {
              observer.onCompleted();
            }
          }
          return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
        };
        return RangeSink;
      }());
      Observable.range = function(start, count, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new RangeObservable(start, count, scheduler);
      };
      Observable.repeat = function(value, repeatCount, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return observableReturn(value, scheduler).repeat(repeatCount == null ? -1 : repeatCount);
      };
      var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function(value, scheduler) {
        isScheduler(scheduler) || (scheduler = immediateScheduler);
        return new AnonymousObservable(function(o) {
          return scheduler.scheduleWithState(value, function(_, v) {
            o.onNext(v);
            o.onCompleted();
          });
        });
      };
      var observableThrow = Observable['throw'] = Observable.throwError = function(error, scheduler) {
        isScheduler(scheduler) || (scheduler = immediateScheduler);
        return new AnonymousObservable(function(observer) {
          return scheduler.schedule(function() {
            observer.onError(error);
          });
        });
      };
      Observable.throwException = function() {
        return Observable.throwError.apply(null, arguments);
      };
      Observable.using = function(resourceFactory, observableFactory) {
        return new AnonymousObservable(function(observer) {
          var disposable = disposableEmpty,
              resource,
              source;
          try {
            resource = resourceFactory();
            resource && (disposable = resource);
            source = observableFactory(resource);
          } catch (exception) {
            return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
          }
          return new CompositeDisposable(source.subscribe(observer), disposable);
        });
      };
      observableProto.amb = function(rightSource) {
        var leftSource = this;
        return new AnonymousObservable(function(observer) {
          var choice,
              leftChoice = 'L',
              rightChoice = 'R',
              leftSubscription = new SingleAssignmentDisposable(),
              rightSubscription = new SingleAssignmentDisposable();
          isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));
          function choiceL() {
            if (!choice) {
              choice = leftChoice;
              rightSubscription.dispose();
            }
          }
          function choiceR() {
            if (!choice) {
              choice = rightChoice;
              leftSubscription.dispose();
            }
          }
          leftSubscription.setDisposable(leftSource.subscribe(function(left) {
            choiceL();
            if (choice === leftChoice) {
              observer.onNext(left);
            }
          }, function(err) {
            choiceL();
            if (choice === leftChoice) {
              observer.onError(err);
            }
          }, function() {
            choiceL();
            if (choice === leftChoice) {
              observer.onCompleted();
            }
          }));
          rightSubscription.setDisposable(rightSource.subscribe(function(right) {
            choiceR();
            if (choice === rightChoice) {
              observer.onNext(right);
            }
          }, function(err) {
            choiceR();
            if (choice === rightChoice) {
              observer.onError(err);
            }
          }, function() {
            choiceR();
            if (choice === rightChoice) {
              observer.onCompleted();
            }
          }));
          return new CompositeDisposable(leftSubscription, rightSubscription);
        });
      };
      Observable.amb = function() {
        var acc = observableNever(),
            items = [];
        if (Array.isArray(arguments[0])) {
          items = arguments[0];
        } else {
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            items.push(arguments[i]);
          }
        }
        function func(previous, current) {
          return previous.amb(current);
        }
        for (var i = 0,
            len = items.length; i < len; i++) {
          acc = func(acc, items[i]);
        }
        return acc;
      };
      function observableCatchHandler(source, handler) {
        return new AnonymousObservable(function(o) {
          var d1 = new SingleAssignmentDisposable(),
              subscription = new SerialDisposable();
          subscription.setDisposable(d1);
          d1.setDisposable(source.subscribe(function(x) {
            o.onNext(x);
          }, function(e) {
            try {
              var result = handler(e);
            } catch (ex) {
              return o.onError(ex);
            }
            isPromise(result) && (result = observableFromPromise(result));
            var d = new SingleAssignmentDisposable();
            subscription.setDisposable(d);
            d.setDisposable(result.subscribe(o));
          }, function(x) {
            o.onCompleted(x);
          }));
          return subscription;
        }, source);
      }
      observableProto['catch'] = observableProto.catchError = observableProto.catchException = function(handlerOrSecond) {
        return typeof handlerOrSecond === 'function' ? observableCatchHandler(this, handlerOrSecond) : observableCatch([this, handlerOrSecond]);
      };
      var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function() {
        var items = [];
        if (Array.isArray(arguments[0])) {
          items = arguments[0];
        } else {
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            items.push(arguments[i]);
          }
        }
        return enumerableOf(items).catchError();
      };
      observableProto.combineLatest = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        if (Array.isArray(args[0])) {
          args[0].unshift(this);
        } else {
          args.unshift(this);
        }
        return combineLatest.apply(this, args);
      };
      var combineLatest = Observable.combineLatest = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var resultSelector = args.pop();
        Array.isArray(args[0]) && (args = args[0]);
        return new AnonymousObservable(function(o) {
          var n = args.length,
              falseFactory = function() {
                return false;
              },
              hasValue = arrayInitialize(n, falseFactory),
              hasValueAll = false,
              isDone = arrayInitialize(n, falseFactory),
              values = new Array(n);
          function next(i) {
            hasValue[i] = true;
            if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
              try {
                var res = resultSelector.apply(null, values);
              } catch (e) {
                return o.onError(e);
              }
              o.onNext(res);
            } else if (isDone.filter(function(x, j) {
              return j !== i;
            }).every(identity)) {
              o.onCompleted();
            }
          }
          function done(i) {
            isDone[i] = true;
            isDone.every(identity) && o.onCompleted();
          }
          var subscriptions = new Array(n);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              var source = args[i],
                  sad = new SingleAssignmentDisposable();
              isPromise(source) && (source = observableFromPromise(source));
              sad.setDisposable(source.subscribe(function(x) {
                values[i] = x;
                next(i);
              }, function(e) {
                o.onError(e);
              }, function() {
                done(i);
              }));
              subscriptions[i] = sad;
            }(idx));
          }
          return new CompositeDisposable(subscriptions);
        }, this);
      };
      observableProto.concat = function() {
        for (var args = [],
            i = 0,
            len = arguments.length; i < len; i++) {
          args.push(arguments[i]);
        }
        args.unshift(this);
        return observableConcat.apply(null, args);
      };
      var observableConcat = Observable.concat = function() {
        var args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          args = new Array(arguments.length);
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        return enumerableOf(args).concat();
      };
      observableProto.concatAll = observableProto.concatObservable = function() {
        return this.merge(1);
      };
      var MergeObservable = (function(__super__) {
        inherits(MergeObservable, __super__);
        function MergeObservable(source, maxConcurrent) {
          this.source = source;
          this.maxConcurrent = maxConcurrent;
          __super__.call(this);
        }
        MergeObservable.prototype.subscribeCore = function(observer) {
          var g = new CompositeDisposable();
          g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
          return g;
        };
        return MergeObservable;
      }(ObservableBase));
      var MergeObserver = (function() {
        function MergeObserver(o, max, g) {
          this.o = o;
          this.max = max;
          this.g = g;
          this.done = false;
          this.q = [];
          this.activeCount = 0;
          this.isStopped = false;
        }
        MergeObserver.prototype.handleSubscribe = function(xs) {
          var sad = new SingleAssignmentDisposable();
          this.g.add(sad);
          isPromise(xs) && (xs = observableFromPromise(xs));
          sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
        };
        MergeObserver.prototype.onNext = function(innerSource) {
          if (this.isStopped) {
            return;
          }
          if (this.activeCount < this.max) {
            this.activeCount++;
            this.handleSubscribe(innerSource);
          } else {
            this.q.push(innerSource);
          }
        };
        MergeObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
          }
        };
        MergeObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            this.done = true;
            this.activeCount === 0 && this.o.onCompleted();
          }
        };
        MergeObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        MergeObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
            return true;
          }
          return false;
        };
        function InnerObserver(parent, sad) {
          this.parent = parent;
          this.sad = sad;
          this.isStopped = false;
        }
        InnerObserver.prototype.onNext = function(x) {
          if (!this.isStopped) {
            this.parent.o.onNext(x);
          }
        };
        InnerObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
          }
        };
        InnerObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            var parent = this.parent;
            parent.g.remove(this.sad);
            if (parent.q.length > 0) {
              parent.handleSubscribe(parent.q.shift());
            } else {
              parent.activeCount--;
              parent.done && parent.activeCount === 0 && parent.o.onCompleted();
            }
          }
        };
        InnerObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        InnerObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
            return true;
          }
          return false;
        };
        return MergeObserver;
      }());
      observableProto.merge = function(maxConcurrentOrOther) {
        return typeof maxConcurrentOrOther !== 'number' ? observableMerge(this, maxConcurrentOrOther) : new MergeObservable(this, maxConcurrentOrOther);
      };
      var observableMerge = Observable.merge = function() {
        var scheduler,
            sources = [],
            i,
            len = arguments.length;
        if (!arguments[0]) {
          scheduler = immediateScheduler;
          for (i = 1; i < len; i++) {
            sources.push(arguments[i]);
          }
        } else if (isScheduler(arguments[0])) {
          scheduler = arguments[0];
          for (i = 1; i < len; i++) {
            sources.push(arguments[i]);
          }
        } else {
          scheduler = immediateScheduler;
          for (i = 0; i < len; i++) {
            sources.push(arguments[i]);
          }
        }
        if (Array.isArray(sources[0])) {
          sources = sources[0];
        }
        return observableOf(scheduler, sources).mergeAll();
      };
      var CompositeError = Rx.CompositeError = function(errors) {
        this.name = "NotImplementedError";
        this.innerErrors = errors;
        this.message = 'This contains multiple errors. Check the innerErrors';
        Error.call(this);
      };
      CompositeError.prototype = Error.prototype;
      Observable.mergeDelayError = function() {
        var args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          var len = arguments.length;
          args = new Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        var source = observableOf(null, args);
        return new AnonymousObservable(function(o) {
          var group = new CompositeDisposable(),
              m = new SingleAssignmentDisposable(),
              isStopped = false,
              errors = [];
          function setCompletion() {
            if (errors.length === 0) {
              o.onCompleted();
            } else if (errors.length === 1) {
              o.onError(errors[0]);
            } else {
              o.onError(new CompositeError(errors));
            }
          }
          group.add(m);
          m.setDisposable(source.subscribe(function(innerSource) {
            var innerSubscription = new SingleAssignmentDisposable();
            group.add(innerSubscription);
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
            innerSubscription.setDisposable(innerSource.subscribe(function(x) {
              o.onNext(x);
            }, function(e) {
              errors.push(e);
              group.remove(innerSubscription);
              isStopped && group.length === 1 && setCompletion();
            }, function() {
              group.remove(innerSubscription);
              isStopped && group.length === 1 && setCompletion();
            }));
          }, function(e) {
            errors.push(e);
            isStopped = true;
            group.length === 1 && setCompletion();
          }, function() {
            isStopped = true;
            group.length === 1 && setCompletion();
          }));
          return group;
        });
      };
      var MergeAllObservable = (function(__super__) {
        inherits(MergeAllObservable, __super__);
        function MergeAllObservable(source) {
          this.source = source;
          __super__.call(this);
        }
        MergeAllObservable.prototype.subscribeCore = function(observer) {
          var g = new CompositeDisposable(),
              m = new SingleAssignmentDisposable();
          g.add(m);
          m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
          return g;
        };
        return MergeAllObservable;
      }(ObservableBase));
      var MergeAllObserver = (function() {
        function MergeAllObserver(o, g) {
          this.o = o;
          this.g = g;
          this.isStopped = false;
          this.done = false;
        }
        MergeAllObserver.prototype.onNext = function(innerSource) {
          if (this.isStopped) {
            return;
          }
          var sad = new SingleAssignmentDisposable();
          this.g.add(sad);
          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
          sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
        };
        MergeAllObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
          }
        };
        MergeAllObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            this.done = true;
            this.g.length === 1 && this.o.onCompleted();
          }
        };
        MergeAllObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        MergeAllObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
            return true;
          }
          return false;
        };
        function InnerObserver(parent, g, sad) {
          this.parent = parent;
          this.g = g;
          this.sad = sad;
          this.isStopped = false;
        }
        InnerObserver.prototype.onNext = function(x) {
          if (!this.isStopped) {
            this.parent.o.onNext(x);
          }
        };
        InnerObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
          }
        };
        InnerObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            var parent = this.parent;
            this.isStopped = true;
            parent.g.remove(this.sad);
            parent.done && parent.g.length === 1 && parent.o.onCompleted();
          }
        };
        InnerObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        InnerObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
            return true;
          }
          return false;
        };
        return MergeAllObserver;
      }());
      observableProto.mergeAll = observableProto.mergeObservable = function() {
        return new MergeAllObservable(this);
      };
      observableProto.onErrorResumeNext = function(second) {
        if (!second) {
          throw new Error('Second observable is required');
        }
        return onErrorResumeNext([this, second]);
      };
      var onErrorResumeNext = Observable.onErrorResumeNext = function() {
        var sources = [];
        if (Array.isArray(arguments[0])) {
          sources = arguments[0];
        } else {
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            sources.push(arguments[i]);
          }
        }
        return new AnonymousObservable(function(observer) {
          var pos = 0,
              subscription = new SerialDisposable(),
              cancelable = immediateScheduler.scheduleRecursive(function(self) {
                var current,
                    d;
                if (pos < sources.length) {
                  current = sources[pos++];
                  isPromise(current) && (current = observableFromPromise(current));
                  d = new SingleAssignmentDisposable();
                  subscription.setDisposable(d);
                  d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
                } else {
                  observer.onCompleted();
                }
              });
          return new CompositeDisposable(subscription, cancelable);
        });
      };
      observableProto.skipUntil = function(other) {
        var source = this;
        return new AnonymousObservable(function(o) {
          var isOpen = false;
          var disposables = new CompositeDisposable(source.subscribe(function(left) {
            isOpen && o.onNext(left);
          }, function(e) {
            o.onError(e);
          }, function() {
            isOpen && o.onCompleted();
          }));
          isPromise(other) && (other = observableFromPromise(other));
          var rightSubscription = new SingleAssignmentDisposable();
          disposables.add(rightSubscription);
          rightSubscription.setDisposable(other.subscribe(function() {
            isOpen = true;
            rightSubscription.dispose();
          }, function(e) {
            o.onError(e);
          }, function() {
            rightSubscription.dispose();
          }));
          return disposables;
        }, source);
      };
      observableProto['switch'] = observableProto.switchLatest = function() {
        var sources = this;
        return new AnonymousObservable(function(observer) {
          var hasLatest = false,
              innerSubscription = new SerialDisposable(),
              isStopped = false,
              latest = 0,
              subscription = sources.subscribe(function(innerSource) {
                var d = new SingleAssignmentDisposable(),
                    id = ++latest;
                hasLatest = true;
                innerSubscription.setDisposable(d);
                isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
                d.setDisposable(innerSource.subscribe(function(x) {
                  latest === id && observer.onNext(x);
                }, function(e) {
                  latest === id && observer.onError(e);
                }, function() {
                  if (latest === id) {
                    hasLatest = false;
                    isStopped && observer.onCompleted();
                  }
                }));
              }, function(e) {
                observer.onError(e);
              }, function() {
                isStopped = true;
                !hasLatest && observer.onCompleted();
              });
          return new CompositeDisposable(subscription, innerSubscription);
        }, sources);
      };
      observableProto.takeUntil = function(other) {
        var source = this;
        return new AnonymousObservable(function(o) {
          isPromise(other) && (other = observableFromPromise(other));
          return new CompositeDisposable(source.subscribe(o), other.subscribe(function() {
            o.onCompleted();
          }, function(e) {
            o.onError(e);
          }, noop));
        }, source);
      };
      observableProto.withLatestFrom = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var resultSelector = args.pop(),
            source = this;
        if (typeof source === 'undefined') {
          throw new Error('Source observable not found for withLatestFrom().');
        }
        if (typeof resultSelector !== 'function') {
          throw new Error('withLatestFrom() expects a resultSelector function.');
        }
        if (Array.isArray(args[0])) {
          args = args[0];
        }
        return new AnonymousObservable(function(observer) {
          var falseFactory = function() {
            return false;
          },
              n = args.length,
              hasValue = arrayInitialize(n, falseFactory),
              hasValueAll = false,
              values = new Array(n);
          var subscriptions = new Array(n + 1);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              var other = args[i],
                  sad = new SingleAssignmentDisposable();
              isPromise(other) && (other = observableFromPromise(other));
              sad.setDisposable(other.subscribe(function(x) {
                values[i] = x;
                hasValue[i] = true;
                hasValueAll = hasValue.every(identity);
              }, observer.onError.bind(observer), function() {}));
              subscriptions[i] = sad;
            }(idx));
          }
          var sad = new SingleAssignmentDisposable();
          sad.setDisposable(source.subscribe(function(x) {
            var res;
            var allValues = [x].concat(values);
            if (!hasValueAll)
              return;
            try {
              res = resultSelector.apply(null, allValues);
            } catch (ex) {
              observer.onError(ex);
              return;
            }
            observer.onNext(res);
          }, observer.onError.bind(observer), function() {
            observer.onCompleted();
          }));
          subscriptions[n] = sad;
          return new CompositeDisposable(subscriptions);
        }, this);
      };
      function zipArray(second, resultSelector) {
        var first = this;
        return new AnonymousObservable(function(observer) {
          var index = 0,
              len = second.length;
          return first.subscribe(function(left) {
            if (index < len) {
              var right = second[index++],
                  result;
              try {
                result = resultSelector(left, right);
              } catch (e) {
                return observer.onError(e);
              }
              observer.onNext(result);
            } else {
              observer.onCompleted();
            }
          }, function(e) {
            observer.onError(e);
          }, function() {
            observer.onCompleted();
          });
        }, first);
      }
      function falseFactory() {
        return false;
      }
      function emptyArrayFactory() {
        return [];
      }
      observableProto.zip = function() {
        if (Array.isArray(arguments[0])) {
          return zipArray.apply(this, arguments);
        }
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var parent = this,
            resultSelector = args.pop();
        args.unshift(parent);
        return new AnonymousObservable(function(observer) {
          var n = args.length,
              queues = arrayInitialize(n, emptyArrayFactory),
              isDone = arrayInitialize(n, falseFactory);
          function next(i) {
            var res,
                queuedValues;
            if (queues.every(function(x) {
              return x.length > 0;
            })) {
              try {
                queuedValues = queues.map(function(x) {
                  return x.shift();
                });
                res = resultSelector.apply(parent, queuedValues);
              } catch (ex) {
                observer.onError(ex);
                return;
              }
              observer.onNext(res);
            } else if (isDone.filter(function(x, j) {
              return j !== i;
            }).every(identity)) {
              observer.onCompleted();
            }
          }
          ;
          function done(i) {
            isDone[i] = true;
            if (isDone.every(function(x) {
              return x;
            })) {
              observer.onCompleted();
            }
          }
          var subscriptions = new Array(n);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              var source = args[i],
                  sad = new SingleAssignmentDisposable();
              isPromise(source) && (source = observableFromPromise(source));
              sad.setDisposable(source.subscribe(function(x) {
                queues[i].push(x);
                next(i);
              }, function(e) {
                observer.onError(e);
              }, function() {
                done(i);
              }));
              subscriptions[i] = sad;
            })(idx);
          }
          return new CompositeDisposable(subscriptions);
        }, parent);
      };
      Observable.zip = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var first = args.shift();
        return first.zip.apply(first, args);
      };
      Observable.zipArray = function() {
        var sources;
        if (Array.isArray(arguments[0])) {
          sources = arguments[0];
        } else {
          var len = arguments.length;
          sources = new Array(len);
          for (var i = 0; i < len; i++) {
            sources[i] = arguments[i];
          }
        }
        return new AnonymousObservable(function(observer) {
          var n = sources.length,
              queues = arrayInitialize(n, function() {
                return [];
              }),
              isDone = arrayInitialize(n, function() {
                return false;
              });
          function next(i) {
            if (queues.every(function(x) {
              return x.length > 0;
            })) {
              var res = queues.map(function(x) {
                return x.shift();
              });
              observer.onNext(res);
            } else if (isDone.filter(function(x, j) {
              return j !== i;
            }).every(identity)) {
              observer.onCompleted();
              return;
            }
          }
          ;
          function done(i) {
            isDone[i] = true;
            if (isDone.every(identity)) {
              observer.onCompleted();
              return;
            }
          }
          var subscriptions = new Array(n);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              subscriptions[i] = new SingleAssignmentDisposable();
              subscriptions[i].setDisposable(sources[i].subscribe(function(x) {
                queues[i].push(x);
                next(i);
              }, function(e) {
                observer.onError(e);
              }, function() {
                done(i);
              }));
            })(idx);
          }
          return new CompositeDisposable(subscriptions);
        });
      };
      observableProto.asObservable = function() {
        var source = this;
        return new AnonymousObservable(function(o) {
          return source.subscribe(o);
        }, this);
      };
      observableProto.bufferWithCount = function(count, skip) {
        if (typeof skip !== 'number') {
          skip = count;
        }
        return this.windowWithCount(count, skip).selectMany(function(x) {
          return x.toArray();
        }).where(function(x) {
          return x.length > 0;
        });
      };
      observableProto.dematerialize = function() {
        var source = this;
        return new AnonymousObservable(function(o) {
          return source.subscribe(function(x) {
            return x.accept(o);
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, this);
      };
      observableProto.distinctUntilChanged = function(keySelector, comparer) {
        var source = this;
        comparer || (comparer = defaultComparer);
        return new AnonymousObservable(function(o) {
          var hasCurrentKey = false,
              currentKey;
          return source.subscribe(function(value) {
            var key = value;
            if (keySelector) {
              try {
                key = keySelector(value);
              } catch (e) {
                o.onError(e);
                return;
              }
            }
            if (hasCurrentKey) {
              try {
                var comparerEquals = comparer(currentKey, key);
              } catch (e) {
                o.onError(e);
                return;
              }
            }
            if (!hasCurrentKey || !comparerEquals) {
              hasCurrentKey = true;
              currentKey = key;
              o.onNext(value);
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, this);
      };
      observableProto['do'] = observableProto.tap = observableProto.doAction = function(observerOrOnNext, onError, onCompleted) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ? observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) : observerOrOnNext;
          return source.subscribe(function(x) {
            try {
              tapObserver.onNext(x);
            } catch (e) {
              observer.onError(e);
            }
            observer.onNext(x);
          }, function(err) {
            try {
              tapObserver.onError(err);
            } catch (e) {
              observer.onError(e);
            }
            observer.onError(err);
          }, function() {
            try {
              tapObserver.onCompleted();
            } catch (e) {
              observer.onError(e);
            }
            observer.onCompleted();
          });
        }, this);
      };
      observableProto.doOnNext = observableProto.tapOnNext = function(onNext, thisArg) {
        return this.tap(typeof thisArg !== 'undefined' ? function(x) {
          onNext.call(thisArg, x);
        } : onNext);
      };
      observableProto.doOnError = observableProto.tapOnError = function(onError, thisArg) {
        return this.tap(noop, typeof thisArg !== 'undefined' ? function(e) {
          onError.call(thisArg, e);
        } : onError);
      };
      observableProto.doOnCompleted = observableProto.tapOnCompleted = function(onCompleted, thisArg) {
        return this.tap(noop, null, typeof thisArg !== 'undefined' ? function() {
          onCompleted.call(thisArg);
        } : onCompleted);
      };
      observableProto['finally'] = observableProto.ensure = function(action) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var subscription;
          try {
            subscription = source.subscribe(observer);
          } catch (e) {
            action();
            throw e;
          }
          return disposableCreate(function() {
            try {
              subscription.dispose();
            } catch (e) {
              throw e;
            } finally {
              action();
            }
          });
        }, this);
      };
      observableProto.finallyAction = function(action) {
        return this.ensure(action);
      };
      observableProto.ignoreElements = function() {
        var source = this;
        return new AnonymousObservable(function(o) {
          return source.subscribe(noop, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.materialize = function() {
        var source = this;
        return new AnonymousObservable(function(observer) {
          return source.subscribe(function(value) {
            observer.onNext(notificationCreateOnNext(value));
          }, function(e) {
            observer.onNext(notificationCreateOnError(e));
            observer.onCompleted();
          }, function() {
            observer.onNext(notificationCreateOnCompleted());
            observer.onCompleted();
          });
        }, source);
      };
      observableProto.repeat = function(repeatCount) {
        return enumerableRepeat(this, repeatCount).concat();
      };
      observableProto.retry = function(retryCount) {
        return enumerableRepeat(this, retryCount).catchError();
      };
      observableProto.retryWhen = function(notifier) {
        return enumerableRepeat(this).catchErrorWhen(notifier);
      };
      observableProto.scan = function() {
        var hasSeed = false,
            seed,
            accumulator,
            source = this;
        if (arguments.length === 2) {
          hasSeed = true;
          seed = arguments[0];
          accumulator = arguments[1];
        } else {
          accumulator = arguments[0];
        }
        return new AnonymousObservable(function(o) {
          var hasAccumulation,
              accumulation,
              hasValue;
          return source.subscribe(function(x) {
            !hasValue && (hasValue = true);
            try {
              if (hasAccumulation) {
                accumulation = accumulator(accumulation, x);
              } else {
                accumulation = hasSeed ? accumulator(seed, x) : x;
                hasAccumulation = true;
              }
            } catch (e) {
              o.onError(e);
              return;
            }
            o.onNext(accumulation);
          }, function(e) {
            o.onError(e);
          }, function() {
            !hasValue && hasSeed && o.onNext(seed);
            o.onCompleted();
          });
        }, source);
      };
      observableProto.skipLast = function(count) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var q = [];
          return source.subscribe(function(x) {
            q.push(x);
            q.length > count && o.onNext(q.shift());
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.startWith = function() {
        var values,
            scheduler,
            start = 0;
        if (!!arguments.length && isScheduler(arguments[0])) {
          scheduler = arguments[0];
          start = 1;
        } else {
          scheduler = immediateScheduler;
        }
        for (var args = [],
            i = start,
            len = arguments.length; i < len; i++) {
          args.push(arguments[i]);
        }
        return enumerableOf([observableFromArray(args, scheduler), this]).concat();
      };
      observableProto.takeLast = function(count) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var q = [];
          return source.subscribe(function(x) {
            q.push(x);
            q.length > count && q.shift();
          }, function(e) {
            o.onError(e);
          }, function() {
            while (q.length > 0) {
              o.onNext(q.shift());
            }
            o.onCompleted();
          });
        }, source);
      };
      observableProto.takeLastBuffer = function(count) {
        var source = this;
        return new AnonymousObservable(function(o) {
          var q = [];
          return source.subscribe(function(x) {
            q.push(x);
            q.length > count && q.shift();
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onNext(q);
            o.onCompleted();
          });
        }, source);
      };
      observableProto.windowWithCount = function(count, skip) {
        var source = this;
        +count || (count = 0);
        Math.abs(count) === Infinity && (count = 0);
        if (count <= 0) {
          throw new ArgumentOutOfRangeError();
        }
        skip == null && (skip = count);
        +skip || (skip = 0);
        Math.abs(skip) === Infinity && (skip = 0);
        if (skip <= 0) {
          throw new ArgumentOutOfRangeError();
        }
        return new AnonymousObservable(function(observer) {
          var m = new SingleAssignmentDisposable(),
              refCountDisposable = new RefCountDisposable(m),
              n = 0,
              q = [];
          function createWindow() {
            var s = new Subject();
            q.push(s);
            observer.onNext(addRef(s, refCountDisposable));
          }
          createWindow();
          m.setDisposable(source.subscribe(function(x) {
            for (var i = 0,
                len = q.length; i < len; i++) {
              q[i].onNext(x);
            }
            var c = n - count + 1;
            c >= 0 && c % skip === 0 && q.shift().onCompleted();
            ++n % skip === 0 && createWindow();
          }, function(e) {
            while (q.length > 0) {
              q.shift().onError(e);
            }
            observer.onError(e);
          }, function() {
            while (q.length > 0) {
              q.shift().onCompleted();
            }
            observer.onCompleted();
          }));
          return refCountDisposable;
        }, source);
      };
      function concatMap(source, selector, thisArg) {
        var selectorFunc = bindCallback(selector, thisArg, 3);
        return source.map(function(x, i) {
          var result = selectorFunc(x, i, source);
          isPromise(result) && (result = observableFromPromise(result));
          (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
          return result;
        }).concatAll();
      }
      observableProto.selectConcat = observableProto.concatMap = function(selector, resultSelector, thisArg) {
        if (isFunction(selector) && isFunction(resultSelector)) {
          return this.concatMap(function(x, i) {
            var selectorResult = selector(x, i);
            isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
            (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
            return selectorResult.map(function(y, i2) {
              return resultSelector(x, y, i, i2);
            });
          });
        }
        return isFunction(selector) ? concatMap(this, selector, thisArg) : concatMap(this, function() {
          return selector;
        });
      };
      observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
        var source = this,
            onNextFunc = bindCallback(onNext, thisArg, 2),
            onErrorFunc = bindCallback(onError, thisArg, 1),
            onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
        return new AnonymousObservable(function(observer) {
          var index = 0;
          return source.subscribe(function(x) {
            var result;
            try {
              result = onNextFunc(x, index++);
            } catch (e) {
              observer.onError(e);
              return;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
          }, function(err) {
            var result;
            try {
              result = onErrorFunc(err);
            } catch (e) {
              observer.onError(e);
              return;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          }, function() {
            var result;
            try {
              result = onCompletedFunc();
            } catch (e) {
              observer.onError(e);
              return;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          });
        }, this).concatAll();
      };
      observableProto.defaultIfEmpty = function(defaultValue) {
        var source = this;
        defaultValue === undefined && (defaultValue = null);
        return new AnonymousObservable(function(observer) {
          var found = false;
          return source.subscribe(function(x) {
            found = true;
            observer.onNext(x);
          }, function(e) {
            observer.onError(e);
          }, function() {
            !found && observer.onNext(defaultValue);
            observer.onCompleted();
          });
        }, source);
      };
      function arrayIndexOfComparer(array, item, comparer) {
        for (var i = 0,
            len = array.length; i < len; i++) {
          if (comparer(array[i], item)) {
            return i;
          }
        }
        return -1;
      }
      function HashSet(comparer) {
        this.comparer = comparer;
        this.set = [];
      }
      HashSet.prototype.push = function(value) {
        var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
        retValue && this.set.push(value);
        return retValue;
      };
      observableProto.distinct = function(keySelector, comparer) {
        var source = this;
        comparer || (comparer = defaultComparer);
        return new AnonymousObservable(function(o) {
          var hashSet = new HashSet(comparer);
          return source.subscribe(function(x) {
            var key = x;
            if (keySelector) {
              try {
                key = keySelector(x);
              } catch (e) {
                o.onError(e);
                return;
              }
            }
            hashSet.push(key) && o.onNext(x);
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, this);
      };
      var MapObservable = (function(__super__) {
        inherits(MapObservable, __super__);
        function MapObservable(source, selector, thisArg) {
          this.source = source;
          this.selector = bindCallback(selector, thisArg, 3);
          __super__.call(this);
        }
        MapObservable.prototype.internalMap = function(selector, thisArg) {
          var self = this;
          return new MapObservable(this.source, function(x, i, o) {
            return selector.call(this, self.selector(x, i, o), i, o);
          }, thisArg);
        };
        MapObservable.prototype.subscribeCore = function(observer) {
          return this.source.subscribe(new MapObserver(observer, this.selector, this));
        };
        return MapObservable;
      }(ObservableBase));
      function MapObserver(observer, selector, source) {
        this.observer = observer;
        this.selector = selector;
        this.source = source;
        this.i = 0;
        this.isStopped = false;
      }
      MapObserver.prototype.onNext = function(x) {
        if (this.isStopped) {
          return;
        }
        var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
        if (result === errorObj) {
          return this.observer.onError(result.e);
        }
        this.observer.onNext(result);
      };
      MapObserver.prototype.onError = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
        }
      };
      MapObserver.prototype.onCompleted = function() {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onCompleted();
        }
      };
      MapObserver.prototype.dispose = function() {
        this.isStopped = true;
      };
      MapObserver.prototype.fail = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
          return true;
        }
        return false;
      };
      observableProto.map = observableProto.select = function(selector, thisArg) {
        var selectorFn = typeof selector === 'function' ? selector : function() {
          return selector;
        };
        return this instanceof MapObservable ? this.internalMap(selectorFn, thisArg) : new MapObservable(this, selectorFn, thisArg);
      };
      observableProto.pluck = function() {
        var args = arguments,
            len = arguments.length;
        if (len === 0) {
          throw new Error('List of properties cannot be empty.');
        }
        return this.map(function(x) {
          var currentProp = x;
          for (var i = 0; i < len; i++) {
            var p = currentProp[args[i]];
            if (typeof p !== 'undefined') {
              currentProp = p;
            } else {
              return undefined;
            }
          }
          return currentProp;
        });
      };
      observableProto.flatMapObserver = observableProto.selectManyObserver = function(onNext, onError, onCompleted, thisArg) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var index = 0;
          return source.subscribe(function(x) {
            var result;
            try {
              result = onNext.call(thisArg, x, index++);
            } catch (e) {
              observer.onError(e);
              return;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
          }, function(err) {
            var result;
            try {
              result = onError.call(thisArg, err);
            } catch (e) {
              observer.onError(e);
              return;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          }, function() {
            var result;
            try {
              result = onCompleted.call(thisArg);
            } catch (e) {
              observer.onError(e);
              return;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          });
        }, source).mergeAll();
      };
      function flatMap(source, selector, thisArg) {
        var selectorFunc = bindCallback(selector, thisArg, 3);
        return source.map(function(x, i) {
          var result = selectorFunc(x, i, source);
          isPromise(result) && (result = observableFromPromise(result));
          (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
          return result;
        }).mergeAll();
      }
      observableProto.selectMany = observableProto.flatMap = function(selector, resultSelector, thisArg) {
        if (isFunction(selector) && isFunction(resultSelector)) {
          return this.flatMap(function(x, i) {
            var selectorResult = selector(x, i);
            isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
            (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
            return selectorResult.map(function(y, i2) {
              return resultSelector(x, y, i, i2);
            });
          }, thisArg);
        }
        return isFunction(selector) ? flatMap(this, selector, thisArg) : flatMap(this, function() {
          return selector;
        });
      };
      observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function(selector, thisArg) {
        return this.select(selector, thisArg).switchLatest();
      };
      observableProto.skip = function(count) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var remaining = count;
          return source.subscribe(function(x) {
            if (remaining <= 0) {
              o.onNext(x);
            } else {
              remaining--;
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.skipWhile = function(predicate, thisArg) {
        var source = this,
            callback = bindCallback(predicate, thisArg, 3);
        return new AnonymousObservable(function(o) {
          var i = 0,
              running = false;
          return source.subscribe(function(x) {
            if (!running) {
              try {
                running = !callback(x, i++, source);
              } catch (e) {
                o.onError(e);
                return;
              }
            }
            running && o.onNext(x);
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.take = function(count, scheduler) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (count === 0) {
          return observableEmpty(scheduler);
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var remaining = count;
          return source.subscribe(function(x) {
            if (remaining-- > 0) {
              o.onNext(x);
              remaining === 0 && o.onCompleted();
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.takeWhile = function(predicate, thisArg) {
        var source = this,
            callback = bindCallback(predicate, thisArg, 3);
        return new AnonymousObservable(function(o) {
          var i = 0,
              running = true;
          return source.subscribe(function(x) {
            if (running) {
              try {
                running = callback(x, i++, source);
              } catch (e) {
                o.onError(e);
                return;
              }
              if (running) {
                o.onNext(x);
              } else {
                o.onCompleted();
              }
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      var FilterObservable = (function(__super__) {
        inherits(FilterObservable, __super__);
        function FilterObservable(source, predicate, thisArg) {
          this.source = source;
          this.predicate = bindCallback(predicate, thisArg, 3);
          __super__.call(this);
        }
        FilterObservable.prototype.subscribeCore = function(observer) {
          return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
        };
        FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
          var self = this;
          return new FilterObservable(this.source, function(x, i, o) {
            return self.predicate(x, i, o) && predicate.call(this, x, i, o);
          }, thisArg);
        };
        return FilterObservable;
      }(ObservableBase));
      function FilterObserver(observer, predicate, source) {
        this.observer = observer;
        this.predicate = predicate;
        this.source = source;
        this.i = 0;
        this.isStopped = false;
      }
      FilterObserver.prototype.onNext = function(x) {
        if (this.isStopped) {
          return;
        }
        var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
        if (shouldYield === errorObj) {
          return this.observer.onError(shouldYield.e);
        }
        shouldYield && this.observer.onNext(x);
      };
      FilterObserver.prototype.onError = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
        }
      };
      FilterObserver.prototype.onCompleted = function() {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onCompleted();
        }
      };
      FilterObserver.prototype.dispose = function() {
        this.isStopped = true;
      };
      FilterObserver.prototype.fail = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
          return true;
        }
        return false;
      };
      observableProto.filter = observableProto.where = function(predicate, thisArg) {
        return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) : new FilterObservable(this, predicate, thisArg);
      };
      observableProto.transduce = function(transducer) {
        var source = this;
        function transformForObserver(o) {
          return {
            '@@transducer/init': function() {
              return o;
            },
            '@@transducer/step': function(obs, input) {
              return obs.onNext(input);
            },
            '@@transducer/result': function(obs) {
              return obs.onCompleted();
            }
          };
        }
        return new AnonymousObservable(function(o) {
          var xform = transducer(transformForObserver(o));
          return source.subscribe(function(v) {
            try {
              xform['@@transducer/step'](o, v);
            } catch (e) {
              o.onError(e);
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            xform['@@transducer/result'](o);
          });
        }, source);
      };
      var AnonymousObservable = Rx.AnonymousObservable = (function(__super__) {
        inherits(AnonymousObservable, __super__);
        function fixSubscriber(subscriber) {
          return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
        }
        function setDisposable(s, state) {
          var ado = state[0],
              subscribe = state[1];
          var sub = tryCatch(subscribe)(ado);
          if (sub === errorObj) {
            if (!ado.fail(errorObj.e)) {
              return thrower(errorObj.e);
            }
          }
          ado.setDisposable(fixSubscriber(sub));
        }
        function AnonymousObservable(subscribe, parent) {
          this.source = parent;
          function s(observer) {
            var ado = new AutoDetachObserver(observer),
                state = [ado, subscribe];
            if (currentThreadScheduler.scheduleRequired()) {
              currentThreadScheduler.scheduleWithState(state, setDisposable);
            } else {
              setDisposable(null, state);
            }
            return ado;
          }
          __super__.call(this, s);
        }
        return AnonymousObservable;
      }(Observable));
      var AutoDetachObserver = (function(__super__) {
        inherits(AutoDetachObserver, __super__);
        function AutoDetachObserver(observer) {
          __super__.call(this);
          this.observer = observer;
          this.m = new SingleAssignmentDisposable();
        }
        var AutoDetachObserverPrototype = AutoDetachObserver.prototype;
        AutoDetachObserverPrototype.next = function(value) {
          var result = tryCatch(this.observer.onNext).call(this.observer, value);
          if (result === errorObj) {
            this.dispose();
            thrower(result.e);
          }
        };
        AutoDetachObserverPrototype.error = function(err) {
          var result = tryCatch(this.observer.onError).call(this.observer, err);
          this.dispose();
          result === errorObj && thrower(result.e);
        };
        AutoDetachObserverPrototype.completed = function() {
          var result = tryCatch(this.observer.onCompleted).call(this.observer);
          this.dispose();
          result === errorObj && thrower(result.e);
        };
        AutoDetachObserverPrototype.setDisposable = function(value) {
          this.m.setDisposable(value);
        };
        AutoDetachObserverPrototype.getDisposable = function() {
          return this.m.getDisposable();
        };
        AutoDetachObserverPrototype.dispose = function() {
          __super__.prototype.dispose.call(this);
          this.m.dispose();
        };
        return AutoDetachObserver;
      }(AbstractObserver));
      var InnerSubscription = function(subject, observer) {
        this.subject = subject;
        this.observer = observer;
      };
      InnerSubscription.prototype.dispose = function() {
        if (!this.subject.isDisposed && this.observer !== null) {
          var idx = this.subject.observers.indexOf(this.observer);
          this.subject.observers.splice(idx, 1);
          this.observer = null;
        }
      };
      var Subject = Rx.Subject = (function(__super__) {
        function subscribe(observer) {
          checkDisposed(this);
          if (!this.isStopped) {
            this.observers.push(observer);
            return new InnerSubscription(this, observer);
          }
          if (this.hasError) {
            observer.onError(this.error);
            return disposableEmpty;
          }
          observer.onCompleted();
          return disposableEmpty;
        }
        inherits(Subject, __super__);
        function Subject() {
          __super__.call(this, subscribe);
          this.isDisposed = false, this.isStopped = false, this.observers = [];
          this.hasError = false;
        }
        addProperties(Subject.prototype, Observer.prototype, {
          hasObservers: function() {
            return this.observers.length > 0;
          },
          onCompleted: function() {
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onCompleted();
              }
              this.observers.length = 0;
            }
          },
          onError: function(error) {
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              this.error = error;
              this.hasError = true;
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onError(error);
              }
              this.observers.length = 0;
            }
          },
          onNext: function(value) {
            checkDisposed(this);
            if (!this.isStopped) {
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onNext(value);
              }
            }
          },
          dispose: function() {
            this.isDisposed = true;
            this.observers = null;
          }
        });
        Subject.create = function(observer, observable) {
          return new AnonymousSubject(observer, observable);
        };
        return Subject;
      }(Observable));
      var AsyncSubject = Rx.AsyncSubject = (function(__super__) {
        function subscribe(observer) {
          checkDisposed(this);
          if (!this.isStopped) {
            this.observers.push(observer);
            return new InnerSubscription(this, observer);
          }
          if (this.hasError) {
            observer.onError(this.error);
          } else if (this.hasValue) {
            observer.onNext(this.value);
            observer.onCompleted();
          } else {
            observer.onCompleted();
          }
          return disposableEmpty;
        }
        inherits(AsyncSubject, __super__);
        function AsyncSubject() {
          __super__.call(this, subscribe);
          this.isDisposed = false;
          this.isStopped = false;
          this.hasValue = false;
          this.observers = [];
          this.hasError = false;
        }
        addProperties(AsyncSubject.prototype, Observer, {
          hasObservers: function() {
            checkDisposed(this);
            return this.observers.length > 0;
          },
          onCompleted: function() {
            var i,
                len;
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              var os = cloneArray(this.observers),
                  len = os.length;
              if (this.hasValue) {
                for (i = 0; i < len; i++) {
                  var o = os[i];
                  o.onNext(this.value);
                  o.onCompleted();
                }
              } else {
                for (i = 0; i < len; i++) {
                  os[i].onCompleted();
                }
              }
              this.observers.length = 0;
            }
          },
          onError: function(error) {
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              this.hasError = true;
              this.error = error;
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onError(error);
              }
              this.observers.length = 0;
            }
          },
          onNext: function(value) {
            checkDisposed(this);
            if (this.isStopped) {
              return;
            }
            this.value = value;
            this.hasValue = true;
          },
          dispose: function() {
            this.isDisposed = true;
            this.observers = null;
            this.exception = null;
            this.value = null;
          }
        });
        return AsyncSubject;
      }(Observable));
      var AnonymousSubject = Rx.AnonymousSubject = (function(__super__) {
        inherits(AnonymousSubject, __super__);
        function subscribe(observer) {
          return this.observable.subscribe(observer);
        }
        function AnonymousSubject(observer, observable) {
          this.observer = observer;
          this.observable = observable;
          __super__.call(this, subscribe);
        }
        addProperties(AnonymousSubject.prototype, Observer.prototype, {
          onCompleted: function() {
            this.observer.onCompleted();
          },
          onError: function(error) {
            this.observer.onError(error);
          },
          onNext: function(value) {
            this.observer.onNext(value);
          }
        });
        return AnonymousSubject;
      }(Observable));
      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root.Rx = Rx;
        define(function() {
          return Rx;
        });
      } else if (freeExports && freeModule) {
        if (moduleExports) {
          (freeModule.exports = Rx).Rx = Rx;
        } else {
          freeExports.Rx = Rx;
        }
      } else {
        root.Rx = Rx;
      }
      var rEndingLine = captureLine();
    }.call(this));
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.aggregates.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        CompositeDisposable = Rx.CompositeDisposable,
        AnonymousObservable = Rx.AnonymousObservable,
        disposableEmpty = Rx.Disposable.empty,
        isEqual = Rx.internals.isEqual,
        helpers = Rx.helpers,
        not = helpers.not,
        defaultComparer = helpers.defaultComparer,
        identity = helpers.identity,
        defaultSubComparer = helpers.defaultSubComparer,
        isFunction = helpers.isFunction,
        isPromise = helpers.isPromise,
        isArrayLike = helpers.isArrayLike,
        isIterable = helpers.isIterable,
        observableFromPromise = Observable.fromPromise,
        observableFrom = Observable.from,
        bindCallback = Rx.internals.bindCallback,
        EmptyError = Rx.EmptyError,
        ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError;
    function extremaBy(source, keySelector, comparer) {
      return new AnonymousObservable(function(o) {
        var hasValue = false,
            lastKey = null,
            list = [];
        return source.subscribe(function(x) {
          var comparison,
              key;
          try {
            key = keySelector(x);
          } catch (ex) {
            o.onError(ex);
            return;
          }
          comparison = 0;
          if (!hasValue) {
            hasValue = true;
            lastKey = key;
          } else {
            try {
              comparison = comparer(key, lastKey);
            } catch (ex1) {
              o.onError(ex1);
              return;
            }
          }
          if (comparison > 0) {
            lastKey = key;
            list = [];
          }
          if (comparison >= 0) {
            list.push(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(list);
          o.onCompleted();
        });
      }, source);
    }
    function firstOnly(x) {
      if (x.length === 0) {
        throw new EmptyError();
      }
      return x[0];
    }
    observableProto.aggregate = function() {
      var hasSeed = false,
          accumulator,
          seed,
          source = this;
      if (arguments.length === 2) {
        hasSeed = true;
        seed = arguments[0];
        accumulator = arguments[1];
      } else {
        accumulator = arguments[0];
      }
      return new AnonymousObservable(function(o) {
        var hasAccumulation,
            accumulation,
            hasValue;
        return source.subscribe(function(x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            return o.onError(e);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new EmptyError());
          o.onCompleted();
        });
      }, source);
    };
    observableProto.reduce = function(accumulator) {
      var hasSeed = false,
          seed,
          source = this;
      if (arguments.length === 2) {
        hasSeed = true;
        seed = arguments[1];
      }
      return new AnonymousObservable(function(o) {
        var hasAccumulation,
            accumulation,
            hasValue;
        return source.subscribe(function(x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            return o.onError(e);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new EmptyError());
          o.onCompleted();
        });
      }, source);
    };
    observableProto.some = function(predicate, thisArg) {
      var source = this;
      return predicate ? source.filter(predicate, thisArg).some() : new AnonymousObservable(function(observer) {
        return source.subscribe(function() {
          observer.onNext(true);
          observer.onCompleted();
        }, function(e) {
          observer.onError(e);
        }, function() {
          observer.onNext(false);
          observer.onCompleted();
        });
      }, source);
    };
    observableProto.any = function() {
      return this.some.apply(this, arguments);
    };
    observableProto.isEmpty = function() {
      return this.any().map(not);
    };
    observableProto.every = function(predicate, thisArg) {
      return this.filter(function(v) {
        return !predicate(v);
      }, thisArg).some().map(not);
    };
    observableProto.all = function() {
      return this.every.apply(this, arguments);
    };
    observableProto.includes = function(searchElement, fromIndex) {
      var source = this;
      function comparer(a, b) {
        return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
      }
      return new AnonymousObservable(function(o) {
        var i = 0,
            n = +fromIndex || 0;
        Math.abs(n) === Infinity && (n = 0);
        if (n < 0) {
          o.onNext(false);
          o.onCompleted();
          return disposableEmpty;
        }
        return source.subscribe(function(x) {
          if (i++ >= n && comparer(x, searchElement)) {
            o.onNext(true);
            o.onCompleted();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(false);
          o.onCompleted();
        });
      }, this);
    };
    observableProto.contains = function(searchElement, fromIndex) {
      observableProto.includes(searchElement, fromIndex);
    };
    observableProto.count = function(predicate, thisArg) {
      return predicate ? this.filter(predicate, thisArg).count() : this.reduce(function(count) {
        return count + 1;
      }, 0);
    };
    observableProto.indexOf = function(searchElement, fromIndex) {
      var source = this;
      return new AnonymousObservable(function(o) {
        var i = 0,
            n = +fromIndex || 0;
        Math.abs(n) === Infinity && (n = 0);
        if (n < 0) {
          o.onNext(-1);
          o.onCompleted();
          return disposableEmpty;
        }
        return source.subscribe(function(x) {
          if (i >= n && x === searchElement) {
            o.onNext(i);
            o.onCompleted();
          }
          i++;
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(-1);
          o.onCompleted();
        });
      }, source);
    };
    observableProto.sum = function(keySelector, thisArg) {
      return keySelector && isFunction(keySelector) ? this.map(keySelector, thisArg).sum() : this.reduce(function(prev, curr) {
        return prev + curr;
      }, 0);
    };
    observableProto.minBy = function(keySelector, comparer) {
      comparer || (comparer = defaultSubComparer);
      return extremaBy(this, keySelector, function(x, y) {
        return comparer(x, y) * -1;
      });
    };
    observableProto.min = function(comparer) {
      return this.minBy(identity, comparer).map(function(x) {
        return firstOnly(x);
      });
    };
    observableProto.maxBy = function(keySelector, comparer) {
      comparer || (comparer = defaultSubComparer);
      return extremaBy(this, keySelector, comparer);
    };
    observableProto.max = function(comparer) {
      return this.maxBy(identity, comparer).map(function(x) {
        return firstOnly(x);
      });
    };
    observableProto.average = function(keySelector, thisArg) {
      return keySelector && isFunction(keySelector) ? this.map(keySelector, thisArg).average() : this.reduce(function(prev, cur) {
        return {
          sum: prev.sum + cur,
          count: prev.count + 1
        };
      }, {
        sum: 0,
        count: 0
      }).map(function(s) {
        if (s.count === 0) {
          throw new EmptyError();
        }
        return s.sum / s.count;
      });
    };
    observableProto.sequenceEqual = function(second, comparer) {
      var first = this;
      comparer || (comparer = defaultComparer);
      return new AnonymousObservable(function(o) {
        var donel = false,
            doner = false,
            ql = [],
            qr = [];
        var subscription1 = first.subscribe(function(x) {
          var equal,
              v;
          if (qr.length > 0) {
            v = qr.shift();
            try {
              equal = comparer(v, x);
            } catch (e) {
              o.onError(e);
              return;
            }
            if (!equal) {
              o.onNext(false);
              o.onCompleted();
            }
          } else if (doner) {
            o.onNext(false);
            o.onCompleted();
          } else {
            ql.push(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          donel = true;
          if (ql.length === 0) {
            if (qr.length > 0) {
              o.onNext(false);
              o.onCompleted();
            } else if (doner) {
              o.onNext(true);
              o.onCompleted();
            }
          }
        });
        (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
        isPromise(second) && (second = observableFromPromise(second));
        var subscription2 = second.subscribe(function(x) {
          var equal;
          if (ql.length > 0) {
            var v = ql.shift();
            try {
              equal = comparer(v, x);
            } catch (exception) {
              o.onError(exception);
              return;
            }
            if (!equal) {
              o.onNext(false);
              o.onCompleted();
            }
          } else if (donel) {
            o.onNext(false);
            o.onCompleted();
          } else {
            qr.push(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          doner = true;
          if (qr.length === 0) {
            if (ql.length > 0) {
              o.onNext(false);
              o.onCompleted();
            } else if (donel) {
              o.onNext(true);
              o.onCompleted();
            }
          }
        });
        return new CompositeDisposable(subscription1, subscription2);
      }, first);
    };
    function elementAtOrDefault(source, index, hasDefault, defaultValue) {
      if (index < 0) {
        throw new ArgumentOutOfRangeError();
      }
      return new AnonymousObservable(function(o) {
        var i = index;
        return source.subscribe(function(x) {
          if (i-- === 0) {
            o.onNext(x);
            o.onCompleted();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!hasDefault) {
            o.onError(new ArgumentOutOfRangeError());
          } else {
            o.onNext(defaultValue);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.elementAt = function(index) {
      return elementAtOrDefault(this, index, false);
    };
    observableProto.elementAtOrDefault = function(index, defaultValue) {
      return elementAtOrDefault(this, index, true, defaultValue);
    };
    function singleOrDefaultAsync(source, hasDefault, defaultValue) {
      return new AnonymousObservable(function(o) {
        var value = defaultValue,
            seenValue = false;
        return source.subscribe(function(x) {
          if (seenValue) {
            o.onError(new Error('Sequence contains more than one element'));
          } else {
            value = x;
            seenValue = true;
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!seenValue && !hasDefault) {
            o.onError(new EmptyError());
          } else {
            o.onNext(value);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.single = function(predicate, thisArg) {
      return predicate && isFunction(predicate) ? this.where(predicate, thisArg).single() : singleOrDefaultAsync(this, false);
    };
    observableProto.singleOrDefault = function(predicate, defaultValue, thisArg) {
      return predicate && isFunction(predicate) ? this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) : singleOrDefaultAsync(this, true, defaultValue);
    };
    function firstOrDefaultAsync(source, hasDefault, defaultValue) {
      return new AnonymousObservable(function(o) {
        return source.subscribe(function(x) {
          o.onNext(x);
          o.onCompleted();
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!hasDefault) {
            o.onError(new EmptyError());
          } else {
            o.onNext(defaultValue);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.first = function(predicate, thisArg) {
      return predicate ? this.where(predicate, thisArg).first() : firstOrDefaultAsync(this, false);
    };
    observableProto.firstOrDefault = function(predicate, defaultValue, thisArg) {
      return predicate ? this.where(predicate).firstOrDefault(null, defaultValue) : firstOrDefaultAsync(this, true, defaultValue);
    };
    function lastOrDefaultAsync(source, hasDefault, defaultValue) {
      return new AnonymousObservable(function(o) {
        var value = defaultValue,
            seenValue = false;
        return source.subscribe(function(x) {
          value = x;
          seenValue = true;
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!seenValue && !hasDefault) {
            o.onError(new EmptyError());
          } else {
            o.onNext(value);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.last = function(predicate, thisArg) {
      return predicate ? this.where(predicate, thisArg).last() : lastOrDefaultAsync(this, false);
    };
    observableProto.lastOrDefault = function(predicate, defaultValue, thisArg) {
      return predicate ? this.where(predicate, thisArg).lastOrDefault(null, defaultValue) : lastOrDefaultAsync(this, true, defaultValue);
    };
    function findValue(source, predicate, thisArg, yieldIndex) {
      var callback = bindCallback(predicate, thisArg, 3);
      return new AnonymousObservable(function(o) {
        var i = 0;
        return source.subscribe(function(x) {
          var shouldRun;
          try {
            shouldRun = callback(x, i, source);
          } catch (e) {
            o.onError(e);
            return;
          }
          if (shouldRun) {
            o.onNext(yieldIndex ? i : x);
            o.onCompleted();
          } else {
            i++;
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(yieldIndex ? -1 : undefined);
          o.onCompleted();
        });
      }, source);
    }
    observableProto.find = function(predicate, thisArg) {
      return findValue(this, predicate, thisArg, false);
    };
    observableProto.findIndex = function(predicate, thisArg) {
      return findValue(this, predicate, thisArg, true);
    };
    observableProto.toSet = function() {
      if (typeof root.Set === 'undefined') {
        throw new TypeError();
      }
      var source = this;
      return new AnonymousObservable(function(o) {
        var s = new root.Set();
        return source.subscribe(function(x) {
          s.add(x);
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(s);
          o.onCompleted();
        });
      }, source);
    };
    observableProto.toMap = function(keySelector, elementSelector) {
      if (typeof root.Map === 'undefined') {
        throw new TypeError();
      }
      var source = this;
      return new AnonymousObservable(function(o) {
        var m = new root.Map();
        return source.subscribe(function(x) {
          var key;
          try {
            key = keySelector(x);
          } catch (e) {
            o.onError(e);
            return;
          }
          var element = x;
          if (elementSelector) {
            try {
              element = elementSelector(x);
            } catch (e) {
              o.onError(e);
              return;
            }
          }
          m.set(key, element);
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(m);
          o.onCompleted();
        });
      }, source);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.async.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx.binding', 'exports'], function(Rx, exports) {
        root.Rx = factory(root, exports, Rx);
        return root.Rx;
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        observableFromPromise = Observable.fromPromise,
        observableThrow = Observable.throwError,
        AnonymousObservable = Rx.AnonymousObservable,
        AsyncSubject = Rx.AsyncSubject,
        disposableCreate = Rx.Disposable.create,
        CompositeDisposable = Rx.CompositeDisposable,
        immediateScheduler = Rx.Scheduler.immediate,
        timeoutScheduler = Rx.Scheduler.timeout,
        isScheduler = Rx.helpers.isScheduler,
        slice = Array.prototype.slice;
    var fnString = 'function',
        throwString = 'throw',
        isObject = Rx.internals.isObject;
    function toThunk(obj, ctx) {
      if (Array.isArray(obj)) {
        return objectToThunk.call(ctx, obj);
      }
      if (isGeneratorFunction(obj)) {
        return observableSpawn(obj.call(ctx));
      }
      if (isGenerator(obj)) {
        return observableSpawn(obj);
      }
      if (isObservable(obj)) {
        return observableToThunk(obj);
      }
      if (isPromise(obj)) {
        return promiseToThunk(obj);
      }
      if (typeof obj === fnString) {
        return obj;
      }
      if (isObject(obj) || Array.isArray(obj)) {
        return objectToThunk.call(ctx, obj);
      }
      return obj;
    }
    function objectToThunk(obj) {
      var ctx = this;
      return function(done) {
        var keys = Object.keys(obj),
            pending = keys.length,
            results = new obj.constructor(),
            finished;
        if (!pending) {
          timeoutScheduler.schedule(function() {
            done(null, results);
          });
          return;
        }
        for (var i = 0,
            len = keys.length; i < len; i++) {
          run(obj[keys[i]], keys[i]);
        }
        function run(fn, key) {
          if (finished) {
            return;
          }
          try {
            fn = toThunk(fn, ctx);
            if (typeof fn !== fnString) {
              results[key] = fn;
              return --pending || done(null, results);
            }
            fn.call(ctx, function(err, res) {
              if (finished) {
                return;
              }
              if (err) {
                finished = true;
                return done(err);
              }
              results[key] = res;
              --pending || done(null, results);
            });
          } catch (e) {
            finished = true;
            done(e);
          }
        }
      };
    }
    function observableToThunk(observable) {
      return function(fn) {
        var value,
            hasValue = false;
        observable.subscribe(function(v) {
          value = v;
          hasValue = true;
        }, fn, function() {
          hasValue && fn(null, value);
        });
      };
    }
    function promiseToThunk(promise) {
      return function(fn) {
        promise.then(function(res) {
          fn(null, res);
        }, fn);
      };
    }
    function isObservable(obj) {
      return obj && typeof obj.subscribe === fnString;
    }
    function isGeneratorFunction(obj) {
      return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
    }
    function isGenerator(obj) {
      return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
    }
    var observableSpawn = Rx.spawn = function(fn) {
      var isGenFun = isGeneratorFunction(fn);
      return function(done) {
        var ctx = this,
            gen = fn;
        if (isGenFun) {
          for (var args = [],
              i = 0,
              len = arguments.length; i < len; i++) {
            args.push(arguments[i]);
          }
          var len = args.length,
              hasCallback = len && typeof args[len - 1] === fnString;
          done = hasCallback ? args.pop() : handleError;
          gen = fn.apply(this, args);
        } else {
          done = done || handleError;
        }
        next();
        function exit(err, res) {
          timeoutScheduler.schedule(done.bind(ctx, err, res));
        }
        function next(err, res) {
          var ret;
          if (arguments.length > 2) {
            for (var res = [],
                i = 1,
                len = arguments.length; i < len; i++) {
              res.push(arguments[i]);
            }
          }
          if (err) {
            try {
              ret = gen[throwString](err);
            } catch (e) {
              return exit(e);
            }
          }
          if (!err) {
            try {
              ret = gen.next(res);
            } catch (e) {
              return exit(e);
            }
          }
          if (ret.done) {
            return exit(null, ret.value);
          }
          ret.value = toThunk(ret.value, ctx);
          if (typeof ret.value === fnString) {
            var called = false;
            try {
              ret.value.call(ctx, function() {
                if (called) {
                  return;
                }
                called = true;
                next.apply(ctx, arguments);
              });
            } catch (e) {
              timeoutScheduler.schedule(function() {
                if (called) {
                  return;
                }
                called = true;
                next.call(ctx, e);
              });
            }
            return;
          }
          next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
        }
      };
    };
    function handleError(err) {
      if (!err) {
        return;
      }
      timeoutScheduler.schedule(function() {
        throw err;
      });
    }
    Observable.start = function(func, context, scheduler) {
      return observableToAsync(func, context, scheduler)();
    };
    var observableToAsync = Observable.toAsync = function(func, context, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return function() {
        var args = arguments,
            subject = new AsyncSubject();
        scheduler.schedule(function() {
          var result;
          try {
            result = func.apply(context, args);
          } catch (e) {
            subject.onError(e);
            return;
          }
          subject.onNext(result);
          subject.onCompleted();
        });
        return subject.asObservable();
      };
    };
    Observable.fromCallback = function(func, context, selector) {
      return function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        return new AnonymousObservable(function(observer) {
          function handler() {
            var len = arguments.length,
                results = new Array(len);
            for (var i = 0; i < len; i++) {
              results[i] = arguments[i];
            }
            if (selector) {
              try {
                results = selector.apply(context, results);
              } catch (e) {
                return observer.onError(e);
              }
              observer.onNext(results);
            } else {
              if (results.length <= 1) {
                observer.onNext.apply(observer, results);
              } else {
                observer.onNext(results);
              }
            }
            observer.onCompleted();
          }
          args.push(handler);
          func.apply(context, args);
        }).publishLast().refCount();
      };
    };
    Observable.fromNodeCallback = function(func, context, selector) {
      return function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        return new AnonymousObservable(function(observer) {
          function handler(err) {
            if (err) {
              observer.onError(err);
              return;
            }
            var len = arguments.length,
                results = [];
            for (var i = 1; i < len; i++) {
              results[i - 1] = arguments[i];
            }
            if (selector) {
              try {
                results = selector.apply(context, results);
              } catch (e) {
                return observer.onError(e);
              }
              observer.onNext(results);
            } else {
              if (results.length <= 1) {
                observer.onNext.apply(observer, results);
              } else {
                observer.onNext(results);
              }
            }
            observer.onCompleted();
          }
          args.push(handler);
          func.apply(context, args);
        }).publishLast().refCount();
      };
    };
    function createListener(element, name, handler) {
      if (element.addEventListener) {
        element.addEventListener(name, handler, false);
        return disposableCreate(function() {
          element.removeEventListener(name, handler, false);
        });
      }
      throw new Error('No listener found');
    }
    function createEventListener(el, eventName, handler) {
      var disposables = new CompositeDisposable();
      if (Object.prototype.toString.call(el) === '[object NodeList]') {
        for (var i = 0,
            len = el.length; i < len; i++) {
          disposables.add(createEventListener(el.item(i), eventName, handler));
        }
      } else if (el) {
        disposables.add(createListener(el, eventName, handler));
      }
      return disposables;
    }
    Rx.config.useNativeEvents = false;
    Observable.fromEvent = function(element, eventName, selector) {
      if (element.addListener) {
        return fromEventPattern(function(h) {
          element.addListener(eventName, h);
        }, function(h) {
          element.removeListener(eventName, h);
        }, selector);
      }
      if (!Rx.config.useNativeEvents) {
        if (typeof element.on === 'function' && typeof element.off === 'function') {
          return fromEventPattern(function(h) {
            element.on(eventName, h);
          }, function(h) {
            element.off(eventName, h);
          }, selector);
        }
      }
      return new AnonymousObservable(function(observer) {
        return createEventListener(element, eventName, function handler(e) {
          var results = e;
          if (selector) {
            try {
              results = selector(arguments);
            } catch (err) {
              return observer.onError(err);
            }
          }
          observer.onNext(results);
        });
      }).publish().refCount();
    };
    var fromEventPattern = Observable.fromEventPattern = function(addHandler, removeHandler, selector) {
      return new AnonymousObservable(function(observer) {
        function innerHandler(e) {
          var result = e;
          if (selector) {
            try {
              result = selector(arguments);
            } catch (err) {
              return observer.onError(err);
            }
          }
          observer.onNext(result);
        }
        var returnValue = addHandler(innerHandler);
        return disposableCreate(function() {
          if (removeHandler) {
            removeHandler(innerHandler, returnValue);
          }
        });
      }).publish().refCount();
    };
    Observable.startAsync = function(functionAsync) {
      var promise;
      try {
        promise = functionAsync();
      } catch (e) {
        return observableThrow(e);
      }
      return observableFromPromise(promise);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.backpressure.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        AbstractObserver = Rx.internals.AbstractObserver,
        CompositeDisposable = Rx.CompositeDisposable,
        Subject = Rx.Subject,
        Observer = Rx.Observer,
        disposableEmpty = Rx.Disposable.empty,
        disposableCreate = Rx.Disposable.create,
        inherits = Rx.internals.inherits,
        addProperties = Rx.internals.addProperties,
        timeoutScheduler = Rx.Scheduler.timeout,
        currentThreadScheduler = Rx.Scheduler.currentThread,
        identity = Rx.helpers.identity,
        checkDisposed = Rx.Disposable.checkDisposed;
    Rx.Pauser = (function(__super__) {
      inherits(Pauser, __super__);
      function Pauser() {
        __super__.call(this);
      }
      Pauser.prototype.pause = function() {
        this.onNext(false);
      };
      Pauser.prototype.resume = function() {
        this.onNext(true);
      };
      return Pauser;
    }(Subject));
    var PausableObservable = (function(__super__) {
      inherits(PausableObservable, __super__);
      function subscribe(observer) {
        var conn = this.source.publish(),
            subscription = conn.subscribe(observer),
            connection = disposableEmpty;
        var pausable = this.pauser.distinctUntilChanged().subscribe(function(b) {
          if (b) {
            connection = conn.connect();
          } else {
            connection.dispose();
            connection = disposableEmpty;
          }
        });
        return new CompositeDisposable(subscription, connection, pausable);
      }
      function PausableObservable(source, pauser) {
        this.source = source;
        this.controller = new Subject();
        if (pauser && pauser.subscribe) {
          this.pauser = this.controller.merge(pauser);
        } else {
          this.pauser = this.controller;
        }
        __super__.call(this, subscribe, source);
      }
      PausableObservable.prototype.pause = function() {
        this.controller.onNext(false);
      };
      PausableObservable.prototype.resume = function() {
        this.controller.onNext(true);
      };
      return PausableObservable;
    }(Observable));
    observableProto.pausable = function(pauser) {
      return new PausableObservable(this, pauser);
    };
    function combineLatestSource(source, subject, resultSelector) {
      return new AnonymousObservable(function(o) {
        var hasValue = [false, false],
            hasValueAll = false,
            isDone = false,
            values = new Array(2),
            err;
        function next(x, i) {
          values[i] = x;
          var res;
          hasValue[i] = true;
          if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
            if (err) {
              o.onError(err);
              return;
            }
            try {
              res = resultSelector.apply(null, values);
            } catch (ex) {
              o.onError(ex);
              return;
            }
            o.onNext(res);
          }
          if (isDone && values[1]) {
            o.onCompleted();
          }
        }
        return new CompositeDisposable(source.subscribe(function(x) {
          next(x, 0);
        }, function(e) {
          if (values[1]) {
            o.onError(e);
          } else {
            err = e;
          }
        }, function() {
          isDone = true;
          values[1] && o.onCompleted();
        }), subject.subscribe(function(x) {
          next(x, 1);
        }, function(e) {
          o.onError(e);
        }, function() {
          isDone = true;
          next(true, 1);
        }));
      }, source);
    }
    var PausableBufferedObservable = (function(__super__) {
      inherits(PausableBufferedObservable, __super__);
      function subscribe(o) {
        var q = [],
            previousShouldFire;
        var subscription = combineLatestSource(this.source, this.pauser.distinctUntilChanged().startWith(false), function(data, shouldFire) {
          return {
            data: data,
            shouldFire: shouldFire
          };
        }).subscribe(function(results) {
          if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
            previousShouldFire = results.shouldFire;
            if (results.shouldFire) {
              while (q.length > 0) {
                o.onNext(q.shift());
              }
            }
          } else {
            previousShouldFire = results.shouldFire;
            if (results.shouldFire) {
              o.onNext(results.data);
            } else {
              q.push(results.data);
            }
          }
        }, function(err) {
          while (q.length > 0) {
            o.onNext(q.shift());
          }
          o.onError(err);
        }, function() {
          while (q.length > 0) {
            o.onNext(q.shift());
          }
          o.onCompleted();
        });
        return subscription;
      }
      function PausableBufferedObservable(source, pauser) {
        this.source = source;
        this.controller = new Subject();
        if (pauser && pauser.subscribe) {
          this.pauser = this.controller.merge(pauser);
        } else {
          this.pauser = this.controller;
        }
        __super__.call(this, subscribe, source);
      }
      PausableBufferedObservable.prototype.pause = function() {
        this.controller.onNext(false);
      };
      PausableBufferedObservable.prototype.resume = function() {
        this.controller.onNext(true);
      };
      return PausableBufferedObservable;
    }(Observable));
    observableProto.pausableBuffered = function(subject) {
      return new PausableBufferedObservable(this, subject);
    };
    var ControlledObservable = (function(__super__) {
      inherits(ControlledObservable, __super__);
      function subscribe(observer) {
        return this.source.subscribe(observer);
      }
      function ControlledObservable(source, enableQueue) {
        __super__.call(this, subscribe, source);
        this.subject = new ControlledSubject(enableQueue);
        this.source = source.multicast(this.subject).refCount();
      }
      ControlledObservable.prototype.request = function(numberOfItems) {
        if (numberOfItems == null) {
          numberOfItems = -1;
        }
        return this.subject.request(numberOfItems);
      };
      return ControlledObservable;
    }(Observable));
    var ControlledSubject = (function(__super__) {
      function subscribe(observer) {
        return this.subject.subscribe(observer);
      }
      inherits(ControlledSubject, __super__);
      function ControlledSubject(enableQueue) {
        enableQueue == null && (enableQueue = true);
        __super__.call(this, subscribe);
        this.subject = new Subject();
        this.enableQueue = enableQueue;
        this.queue = enableQueue ? [] : null;
        this.requestedCount = 0;
        this.requestedDisposable = disposableEmpty;
        this.error = null;
        this.hasFailed = false;
        this.hasCompleted = false;
      }
      addProperties(ControlledSubject.prototype, Observer, {
        onCompleted: function() {
          this.hasCompleted = true;
          if (!this.enableQueue || this.queue.length === 0)
            this.subject.onCompleted();
          else
            this.queue.push(Rx.Notification.createOnCompleted());
        },
        onError: function(error) {
          this.hasFailed = true;
          this.error = error;
          if (!this.enableQueue || this.queue.length === 0)
            this.subject.onError(error);
          else
            this.queue.push(Rx.Notification.createOnError(error));
        },
        onNext: function(value) {
          var hasRequested = false;
          if (this.requestedCount === 0) {
            this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));
          } else {
            (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
            hasRequested = true;
          }
          hasRequested && this.subject.onNext(value);
        },
        _processRequest: function(numberOfItems) {
          if (this.enableQueue) {
            while ((this.queue.length >= numberOfItems && numberOfItems > 0) || (this.queue.length > 0 && this.queue[0].kind !== 'N')) {
              var first = this.queue.shift();
              first.accept(this.subject);
              if (first.kind === 'N')
                numberOfItems--;
              else {
                this.disposeCurrentRequest();
                this.queue = [];
              }
            }
            return {
              numberOfItems: numberOfItems,
              returnValue: this.queue.length !== 0
            };
          }
          return {
            numberOfItems: numberOfItems,
            returnValue: false
          };
        },
        request: function(number) {
          this.disposeCurrentRequest();
          var self = this,
              r = this._processRequest(number);
          var number = r.numberOfItems;
          if (!r.returnValue) {
            this.requestedCount = number;
            this.requestedDisposable = disposableCreate(function() {
              self.requestedCount = 0;
            });
            return this.requestedDisposable;
          } else {
            return disposableEmpty;
          }
        },
        disposeCurrentRequest: function() {
          this.requestedDisposable.dispose();
          this.requestedDisposable = disposableEmpty;
        }
      });
      return ControlledSubject;
    }(Observable));
    observableProto.controlled = function(enableQueue) {
      if (enableQueue == null) {
        enableQueue = true;
      }
      return new ControlledObservable(this, enableQueue);
    };
    var StopAndWaitObservable = (function(__super__) {
      function subscribe(observer) {
        this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));
        var self = this;
        timeoutScheduler.schedule(function() {
          self.source.request(1);
        });
        return this.subscription;
      }
      inherits(StopAndWaitObservable, __super__);
      function StopAndWaitObservable(source) {
        __super__.call(this, subscribe, source);
        this.source = source;
      }
      var StopAndWaitObserver = (function(__sub__) {
        inherits(StopAndWaitObserver, __sub__);
        function StopAndWaitObserver(observer, observable, cancel) {
          __sub__.call(this);
          this.observer = observer;
          this.observable = observable;
          this.cancel = cancel;
        }
        var stopAndWaitObserverProto = StopAndWaitObserver.prototype;
        stopAndWaitObserverProto.completed = function() {
          this.observer.onCompleted();
          this.dispose();
        };
        stopAndWaitObserverProto.error = function(error) {
          this.observer.onError(error);
          this.dispose();
        };
        stopAndWaitObserverProto.next = function(value) {
          this.observer.onNext(value);
          var self = this;
          timeoutScheduler.schedule(function() {
            self.observable.source.request(1);
          });
        };
        stopAndWaitObserverProto.dispose = function() {
          this.observer = null;
          if (this.cancel) {
            this.cancel.dispose();
            this.cancel = null;
          }
          __sub__.prototype.dispose.call(this);
        };
        return StopAndWaitObserver;
      }(AbstractObserver));
      return StopAndWaitObservable;
    }(Observable));
    ControlledObservable.prototype.stopAndWait = function() {
      return new StopAndWaitObservable(this);
    };
    var WindowedObservable = (function(__super__) {
      function subscribe(observer) {
        this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));
        var self = this;
        timeoutScheduler.schedule(function() {
          self.source.request(self.windowSize);
        });
        return this.subscription;
      }
      inherits(WindowedObservable, __super__);
      function WindowedObservable(source, windowSize) {
        __super__.call(this, subscribe, source);
        this.source = source;
        this.windowSize = windowSize;
      }
      var WindowedObserver = (function(__sub__) {
        inherits(WindowedObserver, __sub__);
        function WindowedObserver(observer, observable, cancel) {
          this.observer = observer;
          this.observable = observable;
          this.cancel = cancel;
          this.received = 0;
        }
        var windowedObserverPrototype = WindowedObserver.prototype;
        windowedObserverPrototype.completed = function() {
          this.observer.onCompleted();
          this.dispose();
        };
        windowedObserverPrototype.error = function(error) {
          this.observer.onError(error);
          this.dispose();
        };
        windowedObserverPrototype.next = function(value) {
          this.observer.onNext(value);
          this.received = ++this.received % this.observable.windowSize;
          if (this.received === 0) {
            var self = this;
            timeoutScheduler.schedule(function() {
              self.observable.source.request(self.observable.windowSize);
            });
          }
        };
        windowedObserverPrototype.dispose = function() {
          this.observer = null;
          if (this.cancel) {
            this.cancel.dispose();
            this.cancel = null;
          }
          __sub__.prototype.dispose.call(this);
        };
        return WindowedObserver;
      }(AbstractObserver));
      return WindowedObservable;
    }(Observable));
    ControlledObservable.prototype.windowed = function(windowSize) {
      return new WindowedObservable(this, windowSize);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.binding.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        Subject = Rx.Subject,
        AsyncSubject = Rx.AsyncSubject,
        Observer = Rx.Observer,
        ScheduledObserver = Rx.internals.ScheduledObserver,
        disposableCreate = Rx.Disposable.create,
        disposableEmpty = Rx.Disposable.empty,
        CompositeDisposable = Rx.CompositeDisposable,
        currentThreadScheduler = Rx.Scheduler.currentThread,
        isFunction = Rx.helpers.isFunction,
        inherits = Rx.internals.inherits,
        addProperties = Rx.internals.addProperties,
        checkDisposed = Rx.Disposable.checkDisposed;
    function cloneArray(arr) {
      var len = arr.length,
          a = new Array(len);
      for (var i = 0; i < len; i++) {
        a[i] = arr[i];
      }
      return a;
    }
    observableProto.multicast = function(subjectOrSubjectSelector, selector) {
      var source = this;
      return typeof subjectOrSubjectSelector === 'function' ? new AnonymousObservable(function(observer) {
        var connectable = source.multicast(subjectOrSubjectSelector());
        return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
      }, source) : new ConnectableObservable(source, subjectOrSubjectSelector);
    };
    observableProto.publish = function(selector) {
      return selector && isFunction(selector) ? this.multicast(function() {
        return new Subject();
      }, selector) : this.multicast(new Subject());
    };
    observableProto.share = function() {
      return this.publish().refCount();
    };
    observableProto.publishLast = function(selector) {
      return selector && isFunction(selector) ? this.multicast(function() {
        return new AsyncSubject();
      }, selector) : this.multicast(new AsyncSubject());
    };
    observableProto.publishValue = function(initialValueOrSelector, initialValue) {
      return arguments.length === 2 ? this.multicast(function() {
        return new BehaviorSubject(initialValue);
      }, initialValueOrSelector) : this.multicast(new BehaviorSubject(initialValueOrSelector));
    };
    observableProto.shareValue = function(initialValue) {
      return this.publishValue(initialValue).refCount();
    };
    observableProto.replay = function(selector, bufferSize, windowSize, scheduler) {
      return selector && isFunction(selector) ? this.multicast(function() {
        return new ReplaySubject(bufferSize, windowSize, scheduler);
      }, selector) : this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
    };
    observableProto.shareReplay = function(bufferSize, windowSize, scheduler) {
      return this.replay(null, bufferSize, windowSize, scheduler).refCount();
    };
    var InnerSubscription = function(subject, observer) {
      this.subject = subject;
      this.observer = observer;
    };
    InnerSubscription.prototype.dispose = function() {
      if (!this.subject.isDisposed && this.observer !== null) {
        var idx = this.subject.observers.indexOf(this.observer);
        this.subject.observers.splice(idx, 1);
        this.observer = null;
      }
    };
    var BehaviorSubject = Rx.BehaviorSubject = (function(__super__) {
      function subscribe(observer) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.observers.push(observer);
          observer.onNext(this.value);
          return new InnerSubscription(this, observer);
        }
        if (this.hasError) {
          observer.onError(this.error);
        } else {
          observer.onCompleted();
        }
        return disposableEmpty;
      }
      inherits(BehaviorSubject, __super__);
      function BehaviorSubject(value) {
        __super__.call(this, subscribe);
        this.value = value, this.observers = [], this.isDisposed = false, this.isStopped = false, this.hasError = false;
      }
      addProperties(BehaviorSubject.prototype, Observer, {
        getValue: function() {
          checkDisposed(this);
          if (this.hasError) {
            throw this.error;
          }
          return this.value;
        },
        hasObservers: function() {
          return this.observers.length > 0;
        },
        onCompleted: function() {
          checkDisposed(this);
          if (this.isStopped) {
            return;
          }
          this.isStopped = true;
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            os[i].onCompleted();
          }
          this.observers.length = 0;
        },
        onError: function(error) {
          checkDisposed(this);
          if (this.isStopped) {
            return;
          }
          this.isStopped = true;
          this.hasError = true;
          this.error = error;
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            os[i].onError(error);
          }
          this.observers.length = 0;
        },
        onNext: function(value) {
          checkDisposed(this);
          if (this.isStopped) {
            return;
          }
          this.value = value;
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            os[i].onNext(value);
          }
        },
        dispose: function() {
          this.isDisposed = true;
          this.observers = null;
          this.value = null;
          this.exception = null;
        }
      });
      return BehaviorSubject;
    }(Observable));
    var ReplaySubject = Rx.ReplaySubject = (function(__super__) {
      var maxSafeInteger = Math.pow(2, 53) - 1;
      function createRemovableDisposable(subject, observer) {
        return disposableCreate(function() {
          observer.dispose();
          !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
        });
      }
      function subscribe(observer) {
        var so = new ScheduledObserver(this.scheduler, observer),
            subscription = createRemovableDisposable(this, so);
        checkDisposed(this);
        this._trim(this.scheduler.now());
        this.observers.push(so);
        for (var i = 0,
            len = this.q.length; i < len; i++) {
          so.onNext(this.q[i].value);
        }
        if (this.hasError) {
          so.onError(this.error);
        } else if (this.isStopped) {
          so.onCompleted();
        }
        so.ensureActive();
        return subscription;
      }
      inherits(ReplaySubject, __super__);
      function ReplaySubject(bufferSize, windowSize, scheduler) {
        this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
        this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
        this.scheduler = scheduler || currentThreadScheduler;
        this.q = [];
        this.observers = [];
        this.isStopped = false;
        this.isDisposed = false;
        this.hasError = false;
        this.error = null;
        __super__.call(this, subscribe);
      }
      addProperties(ReplaySubject.prototype, Observer.prototype, {
        hasObservers: function() {
          return this.observers.length > 0;
        },
        _trim: function(now) {
          while (this.q.length > this.bufferSize) {
            this.q.shift();
          }
          while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
            this.q.shift();
          }
        },
        onNext: function(value) {
          checkDisposed(this);
          if (this.isStopped) {
            return;
          }
          var now = this.scheduler.now();
          this.q.push({
            interval: now,
            value: value
          });
          this._trim(now);
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            var observer = os[i];
            observer.onNext(value);
            observer.ensureActive();
          }
        },
        onError: function(error) {
          checkDisposed(this);
          if (this.isStopped) {
            return;
          }
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          var now = this.scheduler.now();
          this._trim(now);
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            var observer = os[i];
            observer.onError(error);
            observer.ensureActive();
          }
          this.observers.length = 0;
        },
        onCompleted: function() {
          checkDisposed(this);
          if (this.isStopped) {
            return;
          }
          this.isStopped = true;
          var now = this.scheduler.now();
          this._trim(now);
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            var observer = os[i];
            observer.onCompleted();
            observer.ensureActive();
          }
          this.observers.length = 0;
        },
        dispose: function() {
          this.isDisposed = true;
          this.observers = null;
        }
      });
      return ReplaySubject;
    }(Observable));
    var ConnectableObservable = Rx.ConnectableObservable = (function(__super__) {
      inherits(ConnectableObservable, __super__);
      function ConnectableObservable(source, subject) {
        var hasSubscription = false,
            subscription,
            sourceObservable = source.asObservable();
        this.connect = function() {
          if (!hasSubscription) {
            hasSubscription = true;
            subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function() {
              hasSubscription = false;
            }));
          }
          return subscription;
        };
        __super__.call(this, function(o) {
          return subject.subscribe(o);
        });
      }
      ConnectableObservable.prototype.refCount = function() {
        var connectableSubscription,
            count = 0,
            source = this;
        return new AnonymousObservable(function(observer) {
          var shouldConnect = ++count === 1,
              subscription = source.subscribe(observer);
          shouldConnect && (connectableSubscription = source.connect());
          return function() {
            subscription.dispose();
            --count === 0 && connectableSubscription.dispose();
          };
        });
      };
      return ConnectableObservable;
    }(Observable));
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.coincidence.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        CompositeDisposable = Rx.CompositeDisposable,
        RefCountDisposable = Rx.RefCountDisposable,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        SerialDisposable = Rx.SerialDisposable,
        Subject = Rx.Subject,
        observableProto = Observable.prototype,
        observableEmpty = Observable.empty,
        observableNever = Observable.never,
        AnonymousObservable = Rx.AnonymousObservable,
        observerCreate = Rx.Observer.create,
        addRef = Rx.internals.addRef,
        defaultComparer = Rx.internals.isEqual,
        inherits = Rx.internals.inherits,
        noop = Rx.helpers.noop,
        identity = Rx.helpers.identity,
        isPromise = Rx.helpers.isPromise,
        observableFromPromise = Observable.fromPromise,
        ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError;
    var Dictionary = (function() {
      var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
          noSuchkey = "no such key",
          duplicatekey = "duplicate key";
      function isPrime(candidate) {
        if ((candidate & 1) === 0) {
          return candidate === 2;
        }
        var num1 = Math.sqrt(candidate),
            num2 = 3;
        while (num2 <= num1) {
          if (candidate % num2 === 0) {
            return false;
          }
          num2 += 2;
        }
        return true;
      }
      function getPrime(min) {
        var index,
            num,
            candidate;
        for (index = 0; index < primes.length; ++index) {
          num = primes[index];
          if (num >= min) {
            return num;
          }
        }
        candidate = min | 1;
        while (candidate < primes[primes.length - 1]) {
          if (isPrime(candidate)) {
            return candidate;
          }
          candidate += 2;
        }
        return min;
      }
      function stringHashFn(str) {
        var hash = 757602046;
        if (!str.length) {
          return hash;
        }
        for (var i = 0,
            len = str.length; i < len; i++) {
          var character = str.charCodeAt(i);
          hash = ((hash << 5) - hash) + character;
          hash = hash & hash;
        }
        return hash;
      }
      function numberHashFn(key) {
        var c2 = 0x27d4eb2d;
        key = (key ^ 61) ^ (key >>> 16);
        key = key + (key << 3);
        key = key ^ (key >>> 4);
        key = key * c2;
        key = key ^ (key >>> 15);
        return key;
      }
      var getHashCode = (function() {
        var uniqueIdCounter = 0;
        return function(obj) {
          if (obj == null) {
            throw new Error(noSuchkey);
          }
          if (typeof obj === 'string') {
            return stringHashFn(obj);
          }
          if (typeof obj === 'number') {
            return numberHashFn(obj);
          }
          if (typeof obj === 'boolean') {
            return obj === true ? 1 : 0;
          }
          if (obj instanceof Date) {
            return numberHashFn(obj.valueOf());
          }
          if (obj instanceof RegExp) {
            return stringHashFn(obj.toString());
          }
          if (typeof obj.valueOf === 'function') {
            var valueOf = obj.valueOf();
            if (typeof valueOf === 'number') {
              return numberHashFn(valueOf);
            }
            if (typeof valueOf === 'string') {
              return stringHashFn(valueOf);
            }
          }
          if (obj.hashCode) {
            return obj.hashCode();
          }
          var id = 17 * uniqueIdCounter++;
          obj.hashCode = function() {
            return id;
          };
          return id;
        };
      }());
      function newEntry() {
        return {
          key: null,
          value: null,
          next: 0,
          hashCode: 0
        };
      }
      function Dictionary(capacity, comparer) {
        if (capacity < 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (capacity > 0) {
          this._initialize(capacity);
        }
        this.comparer = comparer || defaultComparer;
        this.freeCount = 0;
        this.size = 0;
        this.freeList = -1;
      }
      var dictionaryProto = Dictionary.prototype;
      dictionaryProto._initialize = function(capacity) {
        var prime = getPrime(capacity),
            i;
        this.buckets = new Array(prime);
        this.entries = new Array(prime);
        for (i = 0; i < prime; i++) {
          this.buckets[i] = -1;
          this.entries[i] = newEntry();
        }
        this.freeList = -1;
      };
      dictionaryProto.add = function(key, value) {
        this._insert(key, value, true);
      };
      dictionaryProto._insert = function(key, value, add) {
        if (!this.buckets) {
          this._initialize(0);
        }
        var index3,
            num = getHashCode(key) & 2147483647,
            index1 = num % this.buckets.length;
        for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
          if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
            if (add) {
              throw new Error(duplicatekey);
            }
            this.entries[index2].value = value;
            return;
          }
        }
        if (this.freeCount > 0) {
          index3 = this.freeList;
          this.freeList = this.entries[index3].next;
          --this.freeCount;
        } else {
          if (this.size === this.entries.length) {
            this._resize();
            index1 = num % this.buckets.length;
          }
          index3 = this.size;
          ++this.size;
        }
        this.entries[index3].hashCode = num;
        this.entries[index3].next = this.buckets[index1];
        this.entries[index3].key = key;
        this.entries[index3].value = value;
        this.buckets[index1] = index3;
      };
      dictionaryProto._resize = function() {
        var prime = getPrime(this.size * 2),
            numArray = new Array(prime);
        for (index = 0; index < numArray.length; ++index) {
          numArray[index] = -1;
        }
        var entryArray = new Array(prime);
        for (index = 0; index < this.size; ++index) {
          entryArray[index] = this.entries[index];
        }
        for (var index = this.size; index < prime; ++index) {
          entryArray[index] = newEntry();
        }
        for (var index1 = 0; index1 < this.size; ++index1) {
          var index2 = entryArray[index1].hashCode % prime;
          entryArray[index1].next = numArray[index2];
          numArray[index2] = index1;
        }
        this.buckets = numArray;
        this.entries = entryArray;
      };
      dictionaryProto.remove = function(key) {
        if (this.buckets) {
          var num = getHashCode(key) & 2147483647,
              index1 = num % this.buckets.length,
              index2 = -1;
          for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
            if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
              if (index2 < 0) {
                this.buckets[index1] = this.entries[index3].next;
              } else {
                this.entries[index2].next = this.entries[index3].next;
              }
              this.entries[index3].hashCode = -1;
              this.entries[index3].next = this.freeList;
              this.entries[index3].key = null;
              this.entries[index3].value = null;
              this.freeList = index3;
              ++this.freeCount;
              return true;
            } else {
              index2 = index3;
            }
          }
        }
        return false;
      };
      dictionaryProto.clear = function() {
        var index,
            len;
        if (this.size <= 0) {
          return;
        }
        for (index = 0, len = this.buckets.length; index < len; ++index) {
          this.buckets[index] = -1;
        }
        for (index = 0; index < this.size; ++index) {
          this.entries[index] = newEntry();
        }
        this.freeList = -1;
        this.size = 0;
      };
      dictionaryProto._findEntry = function(key) {
        if (this.buckets) {
          var num = getHashCode(key) & 2147483647;
          for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
            if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
              return index;
            }
          }
        }
        return -1;
      };
      dictionaryProto.count = function() {
        return this.size - this.freeCount;
      };
      dictionaryProto.tryGetValue = function(key) {
        var entry = this._findEntry(key);
        return entry >= 0 ? this.entries[entry].value : undefined;
      };
      dictionaryProto.getValues = function() {
        var index = 0,
            results = [];
        if (this.entries) {
          for (var index1 = 0; index1 < this.size; index1++) {
            if (this.entries[index1].hashCode >= 0) {
              results[index++] = this.entries[index1].value;
            }
          }
        }
        return results;
      };
      dictionaryProto.get = function(key) {
        var entry = this._findEntry(key);
        if (entry >= 0) {
          return this.entries[entry].value;
        }
        throw new Error(noSuchkey);
      };
      dictionaryProto.set = function(key, value) {
        this._insert(key, value, false);
      };
      dictionaryProto.containskey = function(key) {
        return this._findEntry(key) >= 0;
      };
      return Dictionary;
    }());
    observableProto.join = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {
      var left = this;
      return new AnonymousObservable(function(observer) {
        var group = new CompositeDisposable();
        var leftDone = false,
            rightDone = false;
        var leftId = 0,
            rightId = 0;
        var leftMap = new Dictionary(),
            rightMap = new Dictionary();
        group.add(left.subscribe(function(value) {
          var id = leftId++;
          var md = new SingleAssignmentDisposable();
          leftMap.add(id, value);
          group.add(md);
          var expire = function() {
            leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
            group.remove(md);
          };
          var duration;
          try {
            duration = leftDurationSelector(value);
          } catch (e) {
            observer.onError(e);
            return;
          }
          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
          rightMap.getValues().forEach(function(v) {
            var result;
            try {
              result = resultSelector(value, v);
            } catch (exn) {
              observer.onError(exn);
              return;
            }
            observer.onNext(result);
          });
        }, observer.onError.bind(observer), function() {
          leftDone = true;
          (rightDone || leftMap.count() === 0) && observer.onCompleted();
        }));
        group.add(right.subscribe(function(value) {
          var id = rightId++;
          var md = new SingleAssignmentDisposable();
          rightMap.add(id, value);
          group.add(md);
          var expire = function() {
            rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
            group.remove(md);
          };
          var duration;
          try {
            duration = rightDurationSelector(value);
          } catch (e) {
            observer.onError(e);
            return;
          }
          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
          leftMap.getValues().forEach(function(v) {
            var result;
            try {
              result = resultSelector(v, value);
            } catch (exn) {
              observer.onError(exn);
              return;
            }
            observer.onNext(result);
          });
        }, observer.onError.bind(observer), function() {
          rightDone = true;
          (leftDone || rightMap.count() === 0) && observer.onCompleted();
        }));
        return group;
      }, left);
    };
    observableProto.groupJoin = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {
      var left = this;
      return new AnonymousObservable(function(observer) {
        var group = new CompositeDisposable();
        var r = new RefCountDisposable(group);
        var leftMap = new Dictionary(),
            rightMap = new Dictionary();
        var leftId = 0,
            rightId = 0;
        function handleError(e) {
          return function(v) {
            v.onError(e);
          };
        }
        ;
        group.add(left.subscribe(function(value) {
          var s = new Subject();
          var id = leftId++;
          leftMap.add(id, s);
          var result;
          try {
            result = resultSelector(value, addRef(s, r));
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          observer.onNext(result);
          rightMap.getValues().forEach(function(v) {
            s.onNext(v);
          });
          var md = new SingleAssignmentDisposable();
          group.add(md);
          var expire = function() {
            leftMap.remove(id) && s.onCompleted();
            group.remove(md);
          };
          var duration;
          try {
            duration = leftDurationSelector(value);
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          md.setDisposable(duration.take(1).subscribe(noop, function(e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
          }, expire));
        }, function(e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        }, observer.onCompleted.bind(observer)));
        group.add(right.subscribe(function(value) {
          var id = rightId++;
          rightMap.add(id, value);
          var md = new SingleAssignmentDisposable();
          group.add(md);
          var expire = function() {
            rightMap.remove(id);
            group.remove(md);
          };
          var duration;
          try {
            duration = rightDurationSelector(value);
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          md.setDisposable(duration.take(1).subscribe(noop, function(e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
          }, expire));
          leftMap.getValues().forEach(function(v) {
            v.onNext(value);
          });
        }, function(e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        }));
        return r;
      }, left);
    };
    observableProto.buffer = function(bufferOpeningsOrClosingSelector, bufferClosingSelector) {
      return this.window.apply(this, arguments).selectMany(function(x) {
        return x.toArray();
      });
    };
    observableProto.window = function(windowOpeningsOrClosingSelector, windowClosingSelector) {
      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
        return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
      }
      return typeof windowOpeningsOrClosingSelector === 'function' ? observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) : observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
    };
    function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
      return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function(_, win) {
        return win;
      });
    }
    function observableWindowWithBoundaries(windowBoundaries) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var win = new Subject(),
            d = new CompositeDisposable(),
            r = new RefCountDisposable(d);
        observer.onNext(addRef(win, r));
        d.add(source.subscribe(function(x) {
          win.onNext(x);
        }, function(err) {
          win.onError(err);
          observer.onError(err);
        }, function() {
          win.onCompleted();
          observer.onCompleted();
        }));
        isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));
        d.add(windowBoundaries.subscribe(function(w) {
          win.onCompleted();
          win = new Subject();
          observer.onNext(addRef(win, r));
        }, function(err) {
          win.onError(err);
          observer.onError(err);
        }, function() {
          win.onCompleted();
          observer.onCompleted();
        }));
        return r;
      }, source);
    }
    function observableWindowWithClosingSelector(windowClosingSelector) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var m = new SerialDisposable(),
            d = new CompositeDisposable(m),
            r = new RefCountDisposable(d),
            win = new Subject();
        observer.onNext(addRef(win, r));
        d.add(source.subscribe(function(x) {
          win.onNext(x);
        }, function(err) {
          win.onError(err);
          observer.onError(err);
        }, function() {
          win.onCompleted();
          observer.onCompleted();
        }));
        function createWindowClose() {
          var windowClose;
          try {
            windowClose = windowClosingSelector();
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));
          var m1 = new SingleAssignmentDisposable();
          m.setDisposable(m1);
          m1.setDisposable(windowClose.take(1).subscribe(noop, function(err) {
            win.onError(err);
            observer.onError(err);
          }, function() {
            win.onCompleted();
            win = new Subject();
            observer.onNext(addRef(win, r));
            createWindowClose();
          }));
        }
        createWindowClose();
        return r;
      }, source);
    }
    observableProto.pairwise = function() {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var previous,
            hasPrevious = false;
        return source.subscribe(function(x) {
          if (hasPrevious) {
            observer.onNext([previous, x]);
          } else {
            hasPrevious = true;
          }
          previous = x;
        }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
      }, source);
    };
    observableProto.partition = function(predicate, thisArg) {
      return [this.filter(predicate, thisArg), this.filter(function(x, i, o) {
        return !predicate.call(thisArg, x, i, o);
      })];
    };
    observableProto.groupBy = function(keySelector, elementSelector, comparer) {
      return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
    };
    observableProto.groupByUntil = function(keySelector, elementSelector, durationSelector, comparer) {
      var source = this;
      elementSelector || (elementSelector = identity);
      comparer || (comparer = defaultComparer);
      return new AnonymousObservable(function(observer) {
        function handleError(e) {
          return function(item) {
            item.onError(e);
          };
        }
        var map = new Dictionary(0, comparer),
            groupDisposable = new CompositeDisposable(),
            refCountDisposable = new RefCountDisposable(groupDisposable);
        groupDisposable.add(source.subscribe(function(x) {
          var key;
          try {
            key = keySelector(x);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          var fireNewMapEntry = false,
              writer = map.tryGetValue(key);
          if (!writer) {
            writer = new Subject();
            map.set(key, writer);
            fireNewMapEntry = true;
          }
          if (fireNewMapEntry) {
            var group = new GroupedObservable(key, writer, refCountDisposable),
                durationGroup = new GroupedObservable(key, writer);
            try {
              duration = durationSelector(durationGroup);
            } catch (e) {
              map.getValues().forEach(handleError(e));
              observer.onError(e);
              return;
            }
            observer.onNext(group);
            var md = new SingleAssignmentDisposable();
            groupDisposable.add(md);
            var expire = function() {
              map.remove(key) && writer.onCompleted();
              groupDisposable.remove(md);
            };
            md.setDisposable(duration.take(1).subscribe(noop, function(exn) {
              map.getValues().forEach(handleError(exn));
              observer.onError(exn);
            }, expire));
          }
          var element;
          try {
            element = elementSelector(x);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          writer.onNext(element);
        }, function(ex) {
          map.getValues().forEach(handleError(ex));
          observer.onError(ex);
        }, function() {
          map.getValues().forEach(function(item) {
            item.onCompleted();
          });
          observer.onCompleted();
        }));
        return refCountDisposable;
      }, source);
    };
    var GroupedObservable = (function(__super__) {
      inherits(GroupedObservable, __super__);
      function subscribe(observer) {
        return this.underlyingObservable.subscribe(observer);
      }
      function GroupedObservable(key, underlyingObservable, mergedDisposable) {
        __super__.call(this, subscribe);
        this.key = key;
        this.underlyingObservable = !mergedDisposable ? underlyingObservable : new AnonymousObservable(function(observer) {
          return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
        });
      }
      return GroupedObservable;
    }(Observable));
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.experimental.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableConcat = Observable.concat,
        observableDefer = Observable.defer,
        observableEmpty = Observable.empty,
        disposableEmpty = Rx.Disposable.empty,
        CompositeDisposable = Rx.CompositeDisposable,
        SerialDisposable = Rx.SerialDisposable,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        Enumerator = Rx.internals.Enumerator,
        Enumerable = Rx.internals.Enumerable,
        enumerableOf = Enumerable.of,
        immediateScheduler = Rx.Scheduler.immediate,
        currentThreadScheduler = Rx.Scheduler.currentThread,
        slice = Array.prototype.slice,
        AsyncSubject = Rx.AsyncSubject,
        Observer = Rx.Observer,
        inherits = Rx.internals.inherits,
        bindCallback = Rx.internals.bindCallback,
        addProperties = Rx.internals.addProperties,
        helpers = Rx.helpers,
        noop = helpers.noop,
        isPromise = helpers.isPromise,
        isScheduler = helpers.isScheduler,
        observableFromPromise = Observable.fromPromise;
    var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) || '_es6shim_iterator_';
    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
      $iterator$ = '@@iterator';
    }
    var doneEnumerator = Rx.doneEnumerator = {
      done: true,
      value: undefined
    };
    var isIterable = Rx.helpers.isIterable = function(o) {
      return o[$iterator$] !== undefined;
    };
    var isArrayLike = Rx.helpers.isArrayLike = function(o) {
      return o && o.length !== undefined;
    };
    Rx.helpers.iterator = $iterator$;
    function enumerableWhile(condition, source) {
      return new Enumerable(function() {
        return new Enumerator(function() {
          return condition() ? {
            done: false,
            value: source
          } : {
            done: true,
            value: undefined
          };
        });
      });
    }
    observableProto.letBind = observableProto['let'] = function(func) {
      return func(this);
    };
    Observable['if'] = Observable.ifThen = function(condition, thenSource, elseSourceOrScheduler) {
      return observableDefer(function() {
        elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());
        isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
        isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));
        typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
        return condition() ? thenSource : elseSourceOrScheduler;
      });
    };
    Observable['for'] = Observable.forIn = function(sources, resultSelector, thisArg) {
      return enumerableOf(sources, resultSelector, thisArg).concat();
    };
    var observableWhileDo = Observable['while'] = Observable.whileDo = function(condition, source) {
      isPromise(source) && (source = observableFromPromise(source));
      return enumerableWhile(condition, source).concat();
    };
    observableProto.doWhile = function(condition) {
      return observableConcat([this, observableWhileDo(condition, this)]);
    };
    Observable['case'] = Observable.switchCase = function(selector, sources, defaultSourceOrScheduler) {
      return observableDefer(function() {
        isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
        defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());
        typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));
        var result = sources[selector()];
        isPromise(result) && (result = observableFromPromise(result));
        return result || defaultSourceOrScheduler;
      });
    };
    observableProto.expand = function(selector, scheduler) {
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      var source = this;
      return new AnonymousObservable(function(observer) {
        var q = [],
            m = new SerialDisposable(),
            d = new CompositeDisposable(m),
            activeCount = 0,
            isAcquired = false;
        var ensureActive = function() {
          var isOwner = false;
          if (q.length > 0) {
            isOwner = !isAcquired;
            isAcquired = true;
          }
          if (isOwner) {
            m.setDisposable(scheduler.scheduleRecursive(function(self) {
              var work;
              if (q.length > 0) {
                work = q.shift();
              } else {
                isAcquired = false;
                return;
              }
              var m1 = new SingleAssignmentDisposable();
              d.add(m1);
              m1.setDisposable(work.subscribe(function(x) {
                observer.onNext(x);
                var result = null;
                try {
                  result = selector(x);
                } catch (e) {
                  observer.onError(e);
                }
                q.push(result);
                activeCount++;
                ensureActive();
              }, observer.onError.bind(observer), function() {
                d.remove(m1);
                activeCount--;
                if (activeCount === 0) {
                  observer.onCompleted();
                }
              }));
              self();
            }));
          }
        };
        q.push(source);
        activeCount++;
        ensureActive();
        return d;
      }, this);
    };
    Observable.forkJoin = function() {
      var allSources = [];
      if (Array.isArray(arguments[0])) {
        allSources = arguments[0];
      } else {
        for (var i = 0,
            len = arguments.length; i < len; i++) {
          allSources.push(arguments[i]);
        }
      }
      return new AnonymousObservable(function(subscriber) {
        var count = allSources.length;
        if (count === 0) {
          subscriber.onCompleted();
          return disposableEmpty;
        }
        var group = new CompositeDisposable(),
            finished = false,
            hasResults = new Array(count),
            hasCompleted = new Array(count),
            results = new Array(count);
        for (var idx = 0; idx < count; idx++) {
          (function(i) {
            var source = allSources[i];
            isPromise(source) && (source = observableFromPromise(source));
            group.add(source.subscribe(function(value) {
              if (!finished) {
                hasResults[i] = true;
                results[i] = value;
              }
            }, function(e) {
              finished = true;
              subscriber.onError(e);
              group.dispose();
            }, function() {
              if (!finished) {
                if (!hasResults[i]) {
                  subscriber.onCompleted();
                  return;
                }
                hasCompleted[i] = true;
                for (var ix = 0; ix < count; ix++) {
                  if (!hasCompleted[ix]) {
                    return;
                  }
                }
                finished = true;
                subscriber.onNext(results);
                subscriber.onCompleted();
              }
            }));
          })(idx);
        }
        return group;
      });
    };
    observableProto.forkJoin = function(second, resultSelector) {
      var first = this;
      return new AnonymousObservable(function(observer) {
        var leftStopped = false,
            rightStopped = false,
            hasLeft = false,
            hasRight = false,
            lastLeft,
            lastRight,
            leftSubscription = new SingleAssignmentDisposable(),
            rightSubscription = new SingleAssignmentDisposable();
        isPromise(second) && (second = observableFromPromise(second));
        leftSubscription.setDisposable(first.subscribe(function(left) {
          hasLeft = true;
          lastLeft = left;
        }, function(err) {
          rightSubscription.dispose();
          observer.onError(err);
        }, function() {
          leftStopped = true;
          if (rightStopped) {
            if (!hasLeft) {
              observer.onCompleted();
            } else if (!hasRight) {
              observer.onCompleted();
            } else {
              var result;
              try {
                result = resultSelector(lastLeft, lastRight);
              } catch (e) {
                observer.onError(e);
                return;
              }
              observer.onNext(result);
              observer.onCompleted();
            }
          }
        }));
        rightSubscription.setDisposable(second.subscribe(function(right) {
          hasRight = true;
          lastRight = right;
        }, function(err) {
          leftSubscription.dispose();
          observer.onError(err);
        }, function() {
          rightStopped = true;
          if (leftStopped) {
            if (!hasLeft) {
              observer.onCompleted();
            } else if (!hasRight) {
              observer.onCompleted();
            } else {
              var result;
              try {
                result = resultSelector(lastLeft, lastRight);
              } catch (e) {
                observer.onError(e);
                return;
              }
              observer.onNext(result);
              observer.onCompleted();
            }
          }
        }));
        return new CompositeDisposable(leftSubscription, rightSubscription);
      }, first);
    };
    observableProto.manySelect = function(selector, scheduler) {
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      var source = this;
      return observableDefer(function() {
        var chain;
        return source.map(function(x) {
          var curr = new ChainObservable(x);
          chain && chain.onNext(x);
          chain = curr;
          return curr;
        }).tap(noop, function(e) {
          chain && chain.onError(e);
        }, function() {
          chain && chain.onCompleted();
        }).observeOn(scheduler).map(selector);
      }, source);
    };
    var ChainObservable = (function(__super__) {
      function subscribe(observer) {
        var self = this,
            g = new CompositeDisposable();
        g.add(currentThreadScheduler.schedule(function() {
          observer.onNext(self.head);
          g.add(self.tail.mergeAll().subscribe(observer));
        }));
        return g;
      }
      inherits(ChainObservable, __super__);
      function ChainObservable(head) {
        __super__.call(this, subscribe);
        this.head = head;
        this.tail = new AsyncSubject();
      }
      addProperties(ChainObservable.prototype, Observer, {
        onCompleted: function() {
          this.onNext(Observable.empty());
        },
        onError: function(e) {
          this.onNext(Observable.throwError(e));
        },
        onNext: function(v) {
          this.tail.onNext(v);
          this.tail.onCompleted();
        }
      });
      return ChainObservable;
    }(Observable));
    observableProto.exclusive = function() {
      var sources = this;
      return new AnonymousObservable(function(observer) {
        var hasCurrent = false,
            isStopped = false,
            m = new SingleAssignmentDisposable(),
            g = new CompositeDisposable();
        g.add(m);
        m.setDisposable(sources.subscribe(function(innerSource) {
          if (!hasCurrent) {
            hasCurrent = true;
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
            var innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);
            innerSubscription.setDisposable(innerSource.subscribe(observer.onNext.bind(observer), observer.onError.bind(observer), function() {
              g.remove(innerSubscription);
              hasCurrent = false;
              if (isStopped && g.length === 1) {
                observer.onCompleted();
              }
            }));
          }
        }, observer.onError.bind(observer), function() {
          isStopped = true;
          if (!hasCurrent && g.length === 1) {
            observer.onCompleted();
          }
        }));
        return g;
      }, this);
    };
    observableProto.exclusiveMap = function(selector, thisArg) {
      var sources = this,
          selectorFunc = bindCallback(selector, thisArg, 3);
      return new AnonymousObservable(function(observer) {
        var index = 0,
            hasCurrent = false,
            isStopped = true,
            m = new SingleAssignmentDisposable(),
            g = new CompositeDisposable();
        g.add(m);
        m.setDisposable(sources.subscribe(function(innerSource) {
          if (!hasCurrent) {
            hasCurrent = true;
            innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
            innerSubscription.setDisposable(innerSource.subscribe(function(x) {
              var result;
              try {
                result = selectorFunc(x, index++, innerSource);
              } catch (e) {
                observer.onError(e);
                return;
              }
              observer.onNext(result);
            }, function(e) {
              observer.onError(e);
            }, function() {
              g.remove(innerSubscription);
              hasCurrent = false;
              if (isStopped && g.length === 1) {
                observer.onCompleted();
              }
            }));
          }
        }, function(e) {
          observer.onError(e);
        }, function() {
          isStopped = true;
          if (g.length === 1 && !hasCurrent) {
            observer.onCompleted();
          }
        }));
        return g;
      }, this);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.joinpatterns.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableThrow = Observable.throwError,
        observerCreate = Rx.Observer.create,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        CompositeDisposable = Rx.CompositeDisposable,
        AbstractObserver = Rx.internals.AbstractObserver,
        noop = Rx.helpers.noop,
        defaultComparer = Rx.internals.isEqual,
        inherits = Rx.internals.inherits,
        Enumerable = Rx.internals.Enumerable,
        Enumerator = Rx.internals.Enumerator,
        $iterator$ = Rx.iterator,
        doneEnumerator = Rx.doneEnumerator;
    var Map = root.Map || (function() {
      function Map() {
        this._keys = [];
        this._values = [];
      }
      Map.prototype.get = function(key) {
        var i = this._keys.indexOf(key);
        return i !== -1 ? this._values[i] : undefined;
      };
      Map.prototype.set = function(key, value) {
        var i = this._keys.indexOf(key);
        i !== -1 && (this._values[i] = value);
        this._values[this._keys.push(key) - 1] = value;
      };
      Map.prototype.forEach = function(callback, thisArg) {
        for (var i = 0,
            len = this._keys.length; i < len; i++) {
          callback.call(thisArg, this._values[i], this._keys[i]);
        }
      };
      return Map;
    }());
    function Pattern(patterns) {
      this.patterns = patterns;
    }
    Pattern.prototype.and = function(other) {
      return new Pattern(this.patterns.concat(other));
    };
    Pattern.prototype.thenDo = function(selector) {
      return new Plan(this, selector);
    };
    function Plan(expression, selector) {
      this.expression = expression;
      this.selector = selector;
    }
    Plan.prototype.activate = function(externalSubscriptions, observer, deactivate) {
      var self = this;
      var joinObservers = [];
      for (var i = 0,
          len = this.expression.patterns.length; i < len; i++) {
        joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
      }
      var activePlan = new ActivePlan(joinObservers, function() {
        var result;
        try {
          result = self.selector.apply(self, arguments);
        } catch (e) {
          observer.onError(e);
          return;
        }
        observer.onNext(result);
      }, function() {
        for (var j = 0,
            jlen = joinObservers.length; j < jlen; j++) {
          joinObservers[j].removeActivePlan(activePlan);
        }
        deactivate(activePlan);
      });
      for (i = 0, len = joinObservers.length; i < len; i++) {
        joinObservers[i].addActivePlan(activePlan);
      }
      return activePlan;
    };
    function planCreateObserver(externalSubscriptions, observable, onError) {
      var entry = externalSubscriptions.get(observable);
      if (!entry) {
        var observer = new JoinObserver(observable, onError);
        externalSubscriptions.set(observable, observer);
        return observer;
      }
      return entry;
    }
    function ActivePlan(joinObserverArray, onNext, onCompleted) {
      this.joinObserverArray = joinObserverArray;
      this.onNext = onNext;
      this.onCompleted = onCompleted;
      this.joinObservers = new Map();
      for (var i = 0,
          len = this.joinObserverArray.length; i < len; i++) {
        var joinObserver = this.joinObserverArray[i];
        this.joinObservers.set(joinObserver, joinObserver);
      }
    }
    ActivePlan.prototype.dequeue = function() {
      this.joinObservers.forEach(function(v) {
        v.queue.shift();
      });
    };
    ActivePlan.prototype.match = function() {
      var i,
          len,
          hasValues = true;
      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
        if (this.joinObserverArray[i].queue.length === 0) {
          hasValues = false;
          break;
        }
      }
      if (hasValues) {
        var firstValues = [],
            isCompleted = false;
        for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
          firstValues.push(this.joinObserverArray[i].queue[0]);
          this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
        }
        if (isCompleted) {
          this.onCompleted();
        } else {
          this.dequeue();
          var values = [];
          for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
            values.push(firstValues[i].value);
          }
          this.onNext.apply(this, values);
        }
      }
    };
    var JoinObserver = (function(__super__) {
      inherits(JoinObserver, __super__);
      function JoinObserver(source, onError) {
        __super__.call(this);
        this.source = source;
        this.onError = onError;
        this.queue = [];
        this.activePlans = [];
        this.subscription = new SingleAssignmentDisposable();
        this.isDisposed = false;
      }
      var JoinObserverPrototype = JoinObserver.prototype;
      JoinObserverPrototype.next = function(notification) {
        if (!this.isDisposed) {
          if (notification.kind === 'E') {
            return this.onError(notification.exception);
          }
          this.queue.push(notification);
          var activePlans = this.activePlans.slice(0);
          for (var i = 0,
              len = activePlans.length; i < len; i++) {
            activePlans[i].match();
          }
        }
      };
      JoinObserverPrototype.error = noop;
      JoinObserverPrototype.completed = noop;
      JoinObserverPrototype.addActivePlan = function(activePlan) {
        this.activePlans.push(activePlan);
      };
      JoinObserverPrototype.subscribe = function() {
        this.subscription.setDisposable(this.source.materialize().subscribe(this));
      };
      JoinObserverPrototype.removeActivePlan = function(activePlan) {
        this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
        this.activePlans.length === 0 && this.dispose();
      };
      JoinObserverPrototype.dispose = function() {
        __super__.prototype.dispose.call(this);
        if (!this.isDisposed) {
          this.isDisposed = true;
          this.subscription.dispose();
        }
      };
      return JoinObserver;
    }(AbstractObserver));
    observableProto.and = function(right) {
      return new Pattern([this, right]);
    };
    observableProto.thenDo = function(selector) {
      return new Pattern([this]).thenDo(selector);
    };
    Observable.when = function() {
      var len = arguments.length,
          plans;
      if (Array.isArray(arguments[0])) {
        plans = arguments[0];
      } else {
        plans = new Array(len);
        for (var i = 0; i < len; i++) {
          plans[i] = arguments[i];
        }
      }
      return new AnonymousObservable(function(o) {
        var activePlans = [],
            externalSubscriptions = new Map();
        var outObserver = observerCreate(function(x) {
          o.onNext(x);
        }, function(err) {
          externalSubscriptions.forEach(function(v) {
            v.onError(err);
          });
          o.onError(err);
        }, function(x) {
          o.onCompleted();
        });
        try {
          for (var i = 0,
              len = plans.length; i < len; i++) {
            activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function(activePlan) {
              var idx = activePlans.indexOf(activePlan);
              activePlans.splice(idx, 1);
              activePlans.length === 0 && o.onCompleted();
            }));
          }
        } catch (e) {
          observableThrow(e).subscribe(o);
        }
        var group = new CompositeDisposable();
        externalSubscriptions.forEach(function(joinObserver) {
          joinObserver.subscribe();
          group.add(joinObserver);
        });
        return group;
      });
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.sorting.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableNever = Observable.never,
        isEqual = Rx.internals.isEqual,
        defaultSubComparer = Rx.helpers.defaultSubComparer;
    observableProto.jortSort = function() {
      return this.jortSortUntil(observableNever());
    };
    observableProto.jortSortUntil = function(other) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var arr = [];
        return source.takeUntil(other).subscribe(arr.push.bind(arr), observer.onError.bind(observer), function() {
          var sorted = arr.slice(0).sort(defaultSubComparer);
          observer.onNext(isEqual(arr, sorted));
          observer.onCompleted();
        });
      }, source);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.virtualtime.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Scheduler = Rx.Scheduler,
        PriorityQueue = Rx.internals.PriorityQueue,
        ScheduledItem = Rx.internals.ScheduledItem,
        SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive,
        disposableEmpty = Rx.Disposable.empty,
        inherits = Rx.internals.inherits,
        defaultSubComparer = Rx.helpers.defaultSubComparer,
        notImplemented = Rx.helpers.notImplemented;
    Rx.VirtualTimeScheduler = (function(__super__) {
      function localNow() {
        return this.toDateTimeOffset(this.clock);
      }
      function scheduleNow(state, action) {
        return this.scheduleAbsoluteWithState(state, this.clock, action);
      }
      function scheduleRelative(state, dueTime, action) {
        return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
      }
      function scheduleAbsolute(state, dueTime, action) {
        return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
      }
      function invokeAction(scheduler, action) {
        action();
        return disposableEmpty;
      }
      inherits(VirtualTimeScheduler, __super__);
      function VirtualTimeScheduler(initialClock, comparer) {
        this.clock = initialClock;
        this.comparer = comparer;
        this.isEnabled = false;
        this.queue = new PriorityQueue(1024);
        __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
      }
      var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;
      VirtualTimeSchedulerPrototype.add = notImplemented;
      VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;
      VirtualTimeSchedulerPrototype.toRelative = notImplemented;
      VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function(state, period, action) {
        var s = new SchedulePeriodicRecursive(this, state, period, action);
        return s.start();
      };
      VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function(state, dueTime, action) {
        var runAt = this.add(this.clock, dueTime);
        return this.scheduleAbsoluteWithState(state, runAt, action);
      };
      VirtualTimeSchedulerPrototype.scheduleRelative = function(dueTime, action) {
        return this.scheduleRelativeWithState(action, dueTime, invokeAction);
      };
      VirtualTimeSchedulerPrototype.start = function() {
        if (!this.isEnabled) {
          this.isEnabled = true;
          do {
            var next = this.getNext();
            if (next !== null) {
              this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
              next.invoke();
            } else {
              this.isEnabled = false;
            }
          } while (this.isEnabled);
        }
      };
      VirtualTimeSchedulerPrototype.stop = function() {
        this.isEnabled = false;
      };
      VirtualTimeSchedulerPrototype.advanceTo = function(time) {
        var dueToClock = this.comparer(this.clock, time);
        if (this.comparer(this.clock, time) > 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (dueToClock === 0) {
          return;
        }
        if (!this.isEnabled) {
          this.isEnabled = true;
          do {
            var next = this.getNext();
            if (next !== null && this.comparer(next.dueTime, time) <= 0) {
              this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
              next.invoke();
            } else {
              this.isEnabled = false;
            }
          } while (this.isEnabled);
          this.clock = time;
        }
      };
      VirtualTimeSchedulerPrototype.advanceBy = function(time) {
        var dt = this.add(this.clock, time),
            dueToClock = this.comparer(this.clock, dt);
        if (dueToClock > 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (dueToClock === 0) {
          return;
        }
        this.advanceTo(dt);
      };
      VirtualTimeSchedulerPrototype.sleep = function(time) {
        var dt = this.add(this.clock, time);
        if (this.comparer(this.clock, dt) >= 0) {
          throw new ArgumentOutOfRangeError();
        }
        this.clock = dt;
      };
      VirtualTimeSchedulerPrototype.getNext = function() {
        while (this.queue.length > 0) {
          var next = this.queue.peek();
          if (next.isCancelled()) {
            this.queue.dequeue();
          } else {
            return next;
          }
        }
        return null;
      };
      VirtualTimeSchedulerPrototype.scheduleAbsolute = function(dueTime, action) {
        return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
      };
      VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function(state, dueTime, action) {
        var self = this;
        function run(scheduler, state1) {
          self.queue.remove(si);
          return action(scheduler, state1);
        }
        var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
        this.queue.enqueue(si);
        return si.disposable;
      };
      return VirtualTimeScheduler;
    }(Scheduler));
    Rx.HistoricalScheduler = (function(__super__) {
      inherits(HistoricalScheduler, __super__);
      function HistoricalScheduler(initialClock, comparer) {
        var clock = initialClock == null ? 0 : initialClock;
        var cmp = comparer || defaultSubComparer;
        __super__.call(this, clock, cmp);
      }
      var HistoricalSchedulerProto = HistoricalScheduler.prototype;
      HistoricalSchedulerProto.add = function(absolute, relative) {
        return absolute + relative;
      };
      HistoricalSchedulerProto.toDateTimeOffset = function(absolute) {
        return new Date(absolute).getTime();
      };
      HistoricalSchedulerProto.toRelative = function(timeSpan) {
        return timeSpan;
      };
      return HistoricalScheduler;
    }(Rx.VirtualTimeScheduler));
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.testing.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx.virtualtime', 'exports'], function(Rx, exports) {
        root.Rx = factory(root, exports, Rx);
        return root.Rx;
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observer = Rx.Observer,
        Observable = Rx.Observable,
        Notification = Rx.Notification,
        VirtualTimeScheduler = Rx.VirtualTimeScheduler,
        Disposable = Rx.Disposable,
        disposableEmpty = Disposable.empty,
        disposableCreate = Disposable.create,
        CompositeDisposable = Rx.CompositeDisposable,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        inherits = Rx.internals.inherits,
        defaultComparer = Rx.internals.isEqual;
    function OnNextPredicate(predicate) {
      this.predicate = predicate;
    }
    ;
    OnNextPredicate.prototype.equals = function(other) {
      if (other === this) {
        return true;
      }
      if (other == null) {
        return false;
      }
      if (other.kind !== 'N') {
        return false;
      }
      return this.predicate(other.value);
    };
    function OnErrorPredicate(predicate) {
      this.predicate = predicate;
    }
    ;
    OnErrorPredicate.prototype.equals = function(other) {
      if (other === this) {
        return true;
      }
      if (other == null) {
        return false;
      }
      if (other.kind !== 'E') {
        return false;
      }
      return this.predicate(other.exception);
    };
    var ReactiveTest = Rx.ReactiveTest = {
      created: 100,
      subscribed: 200,
      disposed: 1000,
      onNext: function(ticks, value) {
        return typeof value === 'function' ? new Recorded(ticks, new OnNextPredicate(value)) : new Recorded(ticks, Notification.createOnNext(value));
      },
      onError: function(ticks, error) {
        return typeof error === 'function' ? new Recorded(ticks, new OnErrorPredicate(error)) : new Recorded(ticks, Notification.createOnError(error));
      },
      onCompleted: function(ticks) {
        return new Recorded(ticks, Notification.createOnCompleted());
      },
      subscribe: function(start, end) {
        return new Subscription(start, end);
      }
    };
    var Recorded = Rx.Recorded = function(time, value, comparer) {
      this.time = time;
      this.value = value;
      this.comparer = comparer || defaultComparer;
    };
    Recorded.prototype.equals = function(other) {
      return this.time === other.time && this.comparer(this.value, other.value);
    };
    Recorded.prototype.toString = function() {
      return this.value.toString() + '@' + this.time;
    };
    var Subscription = Rx.Subscription = function(start, end) {
      this.subscribe = start;
      this.unsubscribe = end || Number.MAX_VALUE;
    };
    Subscription.prototype.equals = function(other) {
      return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;
    };
    Subscription.prototype.toString = function() {
      return '(' + this.subscribe + ', ' + (this.unsubscribe === Number.MAX_VALUE ? 'Infinite' : this.unsubscribe) + ')';
    };
    var MockDisposable = Rx.MockDisposable = function(scheduler) {
      this.scheduler = scheduler;
      this.disposes = [];
      this.disposes.push(this.scheduler.clock);
    };
    MockDisposable.prototype.dispose = function() {
      this.disposes.push(this.scheduler.clock);
    };
    var MockObserver = (function(__super__) {
      inherits(MockObserver, __super__);
      function MockObserver(scheduler) {
        __super__.call(this);
        this.scheduler = scheduler;
        this.messages = [];
      }
      var MockObserverPrototype = MockObserver.prototype;
      MockObserverPrototype.onNext = function(value) {
        this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));
      };
      MockObserverPrototype.onError = function(exception) {
        this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(exception)));
      };
      MockObserverPrototype.onCompleted = function() {
        this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));
      };
      return MockObserver;
    })(Observer);
    function MockPromise(scheduler, messages) {
      var self = this;
      this.scheduler = scheduler;
      this.messages = messages;
      this.subscriptions = [];
      this.observers = [];
      for (var i = 0,
          len = this.messages.length; i < len; i++) {
        var message = this.messages[i],
            notification = message.value;
        (function(innerNotification) {
          scheduler.scheduleAbsoluteWithState(null, message.time, function() {
            var obs = self.observers.slice(0);
            for (var j = 0,
                jLen = obs.length; j < jLen; j++) {
              innerNotification.accept(obs[j]);
            }
            return disposableEmpty;
          });
        })(notification);
      }
    }
    MockPromise.prototype.then = function(onResolved, onRejected) {
      var self = this;
      this.subscriptions.push(new Subscription(this.scheduler.clock));
      var index = this.subscriptions.length - 1;
      var newPromise;
      var observer = Rx.Observer.create(function(x) {
        var retValue = onResolved(x);
        if (retValue && typeof retValue.then === 'function') {
          newPromise = retValue;
        } else {
          var ticks = self.scheduler.clock;
          newPromise = new MockPromise(self.scheduler, [Rx.ReactiveTest.onNext(ticks, undefined), Rx.ReactiveTest.onCompleted(ticks)]);
        }
        var idx = self.observers.indexOf(observer);
        self.observers.splice(idx, 1);
        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
      }, function(err) {
        onRejected(err);
        var idx = self.observers.indexOf(observer);
        self.observers.splice(idx, 1);
        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
      });
      this.observers.push(observer);
      return newPromise || new MockPromise(this.scheduler, this.messages);
    };
    var HotObservable = (function(__super__) {
      function subscribe(observer) {
        var observable = this;
        this.observers.push(observer);
        this.subscriptions.push(new Subscription(this.scheduler.clock));
        var index = this.subscriptions.length - 1;
        return disposableCreate(function() {
          var idx = observable.observers.indexOf(observer);
          observable.observers.splice(idx, 1);
          observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
        });
      }
      inherits(HotObservable, __super__);
      function HotObservable(scheduler, messages) {
        __super__.call(this, subscribe);
        var message,
            notification,
            observable = this;
        this.scheduler = scheduler;
        this.messages = messages;
        this.subscriptions = [];
        this.observers = [];
        for (var i = 0,
            len = this.messages.length; i < len; i++) {
          message = this.messages[i];
          notification = message.value;
          (function(innerNotification) {
            scheduler.scheduleAbsoluteWithState(null, message.time, function() {
              var obs = observable.observers.slice(0);
              for (var j = 0,
                  jLen = obs.length; j < jLen; j++) {
                innerNotification.accept(obs[j]);
              }
              return disposableEmpty;
            });
          })(notification);
        }
      }
      return HotObservable;
    })(Observable);
    var ColdObservable = (function(__super__) {
      function subscribe(observer) {
        var message,
            notification,
            observable = this;
        this.subscriptions.push(new Subscription(this.scheduler.clock));
        var index = this.subscriptions.length - 1;
        var d = new CompositeDisposable();
        for (var i = 0,
            len = this.messages.length; i < len; i++) {
          message = this.messages[i];
          notification = message.value;
          (function(innerNotification) {
            d.add(observable.scheduler.scheduleRelativeWithState(null, message.time, function() {
              innerNotification.accept(observer);
              return disposableEmpty;
            }));
          })(notification);
        }
        return disposableCreate(function() {
          observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
          d.dispose();
        });
      }
      inherits(ColdObservable, __super__);
      function ColdObservable(scheduler, messages) {
        __super__.call(this, subscribe);
        this.scheduler = scheduler;
        this.messages = messages;
        this.subscriptions = [];
      }
      return ColdObservable;
    })(Observable);
    Rx.TestScheduler = (function(__super__) {
      inherits(TestScheduler, __super__);
      function baseComparer(x, y) {
        return x > y ? 1 : (x < y ? -1 : 0);
      }
      function TestScheduler() {
        __super__.call(this, 0, baseComparer);
      }
      TestScheduler.prototype.scheduleAbsoluteWithState = function(state, dueTime, action) {
        dueTime <= this.clock && (dueTime = this.clock + 1);
        return __super__.prototype.scheduleAbsoluteWithState.call(this, state, dueTime, action);
      };
      TestScheduler.prototype.add = function(absolute, relative) {
        return absolute + relative;
      };
      TestScheduler.prototype.toDateTimeOffset = function(absolute) {
        return new Date(absolute).getTime();
      };
      TestScheduler.prototype.toRelative = function(timeSpan) {
        return timeSpan;
      };
      TestScheduler.prototype.startWithTiming = function(create, created, subscribed, disposed) {
        var observer = this.createObserver(),
            source,
            subscription;
        this.scheduleAbsoluteWithState(null, created, function() {
          source = create();
          return disposableEmpty;
        });
        this.scheduleAbsoluteWithState(null, subscribed, function() {
          subscription = source.subscribe(observer);
          return disposableEmpty;
        });
        this.scheduleAbsoluteWithState(null, disposed, function() {
          subscription.dispose();
          return disposableEmpty;
        });
        this.start();
        return observer;
      };
      TestScheduler.prototype.startWithDispose = function(create, disposed) {
        return this.startWithTiming(create, ReactiveTest.created, ReactiveTest.subscribed, disposed);
      };
      TestScheduler.prototype.startWithCreate = function(create) {
        return this.startWithTiming(create, ReactiveTest.created, ReactiveTest.subscribed, ReactiveTest.disposed);
      };
      TestScheduler.prototype.createHotObservable = function() {
        var len = arguments.length,
            args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          args = new Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        return new HotObservable(this, args);
      };
      TestScheduler.prototype.createColdObservable = function() {
        var len = arguments.length,
            args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          args = new Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        return new ColdObservable(this, args);
      };
      TestScheduler.prototype.createResolvedPromise = function(ticks, value) {
        return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);
      };
      TestScheduler.prototype.createRejectedPromise = function(ticks, reason) {
        return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);
      };
      TestScheduler.prototype.createObserver = function() {
        return new MockObserver(this);
      };
      return TestScheduler;
    })(VirtualTimeScheduler);
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:rx@2.5.1/dist/rx.time.js", ["npm:rx@2.5.1/dist/rx.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(['rx'], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx.js"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableDefer = Observable.defer,
        observableEmpty = Observable.empty,
        observableNever = Observable.never,
        observableThrow = Observable.throwException,
        observableFromArray = Observable.fromArray,
        timeoutScheduler = Rx.Scheduler.timeout,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        SerialDisposable = Rx.SerialDisposable,
        CompositeDisposable = Rx.CompositeDisposable,
        RefCountDisposable = Rx.RefCountDisposable,
        Subject = Rx.Subject,
        addRef = Rx.internals.addRef,
        normalizeTime = Rx.Scheduler.normalize,
        helpers = Rx.helpers,
        isPromise = helpers.isPromise,
        isScheduler = helpers.isScheduler,
        observableFromPromise = Observable.fromPromise;
    function observableTimerDate(dueTime, scheduler) {
      return new AnonymousObservable(function(observer) {
        return scheduler.scheduleWithAbsolute(dueTime, function() {
          observer.onNext(0);
          observer.onCompleted();
        });
      });
    }
    function observableTimerDateAndPeriod(dueTime, period, scheduler) {
      return new AnonymousObservable(function(observer) {
        var d = dueTime,
            p = normalizeTime(period);
        return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function(count, self) {
          if (p > 0) {
            var now = scheduler.now();
            d = d + p;
            d <= now && (d = now + p);
          }
          observer.onNext(count);
          self(count + 1, d);
        });
      });
    }
    function observableTimerTimeSpan(dueTime, scheduler) {
      return new AnonymousObservable(function(observer) {
        return scheduler.scheduleWithRelative(normalizeTime(dueTime), function() {
          observer.onNext(0);
          observer.onCompleted();
        });
      });
    }
    function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
      return dueTime === period ? new AnonymousObservable(function(observer) {
        return scheduler.schedulePeriodicWithState(0, period, function(count) {
          observer.onNext(count);
          return count + 1;
        });
      }) : observableDefer(function() {
        return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
      });
    }
    var observableinterval = Observable.interval = function(period, scheduler) {
      return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
    };
    var observableTimer = Observable.timer = function(dueTime, periodOrScheduler, scheduler) {
      var period;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
        period = periodOrScheduler;
      } else if (isScheduler(periodOrScheduler)) {
        scheduler = periodOrScheduler;
      }
      if (dueTime instanceof Date && period === undefined) {
        return observableTimerDate(dueTime.getTime(), scheduler);
      }
      if (dueTime instanceof Date && period !== undefined) {
        period = periodOrScheduler;
        return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
      }
      return period === undefined ? observableTimerTimeSpan(dueTime, scheduler) : observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
    };
    function observableDelayTimeSpan(source, dueTime, scheduler) {
      return new AnonymousObservable(function(observer) {
        var active = false,
            cancelable = new SerialDisposable(),
            exception = null,
            q = [],
            running = false,
            subscription;
        subscription = source.materialize().timestamp(scheduler).subscribe(function(notification) {
          var d,
              shouldRun;
          if (notification.value.kind === 'E') {
            q = [];
            q.push(notification);
            exception = notification.value.exception;
            shouldRun = !running;
          } else {
            q.push({
              value: notification.value,
              timestamp: notification.timestamp + dueTime
            });
            shouldRun = !active;
            active = true;
          }
          if (shouldRun) {
            if (exception !== null) {
              observer.onError(exception);
            } else {
              d = new SingleAssignmentDisposable();
              cancelable.setDisposable(d);
              d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function(self) {
                var e,
                    recurseDueTime,
                    result,
                    shouldRecurse;
                if (exception !== null) {
                  return;
                }
                running = true;
                do {
                  result = null;
                  if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
                    result = q.shift().value;
                  }
                  if (result !== null) {
                    result.accept(observer);
                  }
                } while (result !== null);
                shouldRecurse = false;
                recurseDueTime = 0;
                if (q.length > 0) {
                  shouldRecurse = true;
                  recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
                } else {
                  active = false;
                }
                e = exception;
                running = false;
                if (e !== null) {
                  observer.onError(e);
                } else if (shouldRecurse) {
                  self(recurseDueTime);
                }
              }));
            }
          }
        });
        return new CompositeDisposable(subscription, cancelable);
      }, source);
    }
    function observableDelayDate(source, dueTime, scheduler) {
      return observableDefer(function() {
        return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
      });
    }
    observableProto.delay = function(dueTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return dueTime instanceof Date ? observableDelayDate(this, dueTime.getTime(), scheduler) : observableDelayTimeSpan(this, dueTime, scheduler);
    };
    observableProto.debounce = observableProto.throttleWithTimeout = function(dueTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this;
      return new AnonymousObservable(function(observer) {
        var cancelable = new SerialDisposable(),
            hasvalue = false,
            value,
            id = 0;
        var subscription = source.subscribe(function(x) {
          hasvalue = true;
          value = x;
          id++;
          var currentId = id,
              d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function() {
            hasvalue && id === currentId && observer.onNext(value);
            hasvalue = false;
          }));
        }, function(e) {
          cancelable.dispose();
          observer.onError(e);
          hasvalue = false;
          id++;
        }, function() {
          cancelable.dispose();
          hasvalue && observer.onNext(value);
          observer.onCompleted();
          hasvalue = false;
          id++;
        });
        return new CompositeDisposable(subscription, cancelable);
      }, this);
    };
    observableProto.throttle = function(dueTime, scheduler) {
      return this.debounce(dueTime, scheduler);
    };
    observableProto.windowWithTime = function(timeSpan, timeShiftOrScheduler, scheduler) {
      var source = this,
          timeShift;
      timeShiftOrScheduler == null && (timeShift = timeSpan);
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      if (typeof timeShiftOrScheduler === 'number') {
        timeShift = timeShiftOrScheduler;
      } else if (isScheduler(timeShiftOrScheduler)) {
        timeShift = timeSpan;
        scheduler = timeShiftOrScheduler;
      }
      return new AnonymousObservable(function(observer) {
        var groupDisposable,
            nextShift = timeShift,
            nextSpan = timeSpan,
            q = [],
            refCountDisposable,
            timerD = new SerialDisposable(),
            totalTime = 0;
        groupDisposable = new CompositeDisposable(timerD), refCountDisposable = new RefCountDisposable(groupDisposable);
        function createTimer() {
          var m = new SingleAssignmentDisposable(),
              isSpan = false,
              isShift = false;
          timerD.setDisposable(m);
          if (nextSpan === nextShift) {
            isSpan = true;
            isShift = true;
          } else if (nextSpan < nextShift) {
            isSpan = true;
          } else {
            isShift = true;
          }
          var newTotalTime = isSpan ? nextSpan : nextShift,
              ts = newTotalTime - totalTime;
          totalTime = newTotalTime;
          if (isSpan) {
            nextSpan += timeShift;
          }
          if (isShift) {
            nextShift += timeShift;
          }
          m.setDisposable(scheduler.scheduleWithRelative(ts, function() {
            if (isShift) {
              var s = new Subject();
              q.push(s);
              observer.onNext(addRef(s, refCountDisposable));
            }
            isSpan && q.shift().onCompleted();
            createTimer();
          }));
        }
        ;
        q.push(new Subject());
        observer.onNext(addRef(q[0], refCountDisposable));
        createTimer();
        groupDisposable.add(source.subscribe(function(x) {
          for (var i = 0,
              len = q.length; i < len; i++) {
            q[i].onNext(x);
          }
        }, function(e) {
          for (var i = 0,
              len = q.length; i < len; i++) {
            q[i].onError(e);
          }
          observer.onError(e);
        }, function() {
          for (var i = 0,
              len = q.length; i < len; i++) {
            q[i].onCompleted();
          }
          observer.onCompleted();
        }));
        return refCountDisposable;
      }, source);
    };
    observableProto.windowWithTimeOrCount = function(timeSpan, count, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var timerD = new SerialDisposable(),
            groupDisposable = new CompositeDisposable(timerD),
            refCountDisposable = new RefCountDisposable(groupDisposable),
            n = 0,
            windowId = 0,
            s = new Subject();
        function createTimer(id) {
          var m = new SingleAssignmentDisposable();
          timerD.setDisposable(m);
          m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function() {
            if (id !== windowId) {
              return;
            }
            n = 0;
            var newId = ++windowId;
            s.onCompleted();
            s = new Subject();
            observer.onNext(addRef(s, refCountDisposable));
            createTimer(newId);
          }));
        }
        observer.onNext(addRef(s, refCountDisposable));
        createTimer(0);
        groupDisposable.add(source.subscribe(function(x) {
          var newId = 0,
              newWindow = false;
          s.onNext(x);
          if (++n === count) {
            newWindow = true;
            n = 0;
            newId = ++windowId;
            s.onCompleted();
            s = new Subject();
            observer.onNext(addRef(s, refCountDisposable));
          }
          newWindow && createTimer(newId);
        }, function(e) {
          s.onError(e);
          observer.onError(e);
        }, function() {
          s.onCompleted();
          observer.onCompleted();
        }));
        return refCountDisposable;
      }, source);
    };
    observableProto.bufferWithTime = function(timeSpan, timeShiftOrScheduler, scheduler) {
      return this.windowWithTime.apply(this, arguments).selectMany(function(x) {
        return x.toArray();
      });
    };
    observableProto.bufferWithTimeOrCount = function(timeSpan, count, scheduler) {
      return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function(x) {
        return x.toArray();
      });
    };
    observableProto.timeInterval = function(scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return observableDefer(function() {
        var last = scheduler.now();
        return source.map(function(x) {
          var now = scheduler.now(),
              span = now - last;
          last = now;
          return {
            value: x,
            interval: span
          };
        });
      });
    };
    observableProto.timestamp = function(scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return this.map(function(x) {
        return {
          value: x,
          timestamp: scheduler.now()
        };
      });
    };
    function sampleObservable(source, sampler) {
      return new AnonymousObservable(function(observer) {
        var atEnd,
            value,
            hasValue;
        function sampleSubscribe() {
          if (hasValue) {
            hasValue = false;
            observer.onNext(value);
          }
          atEnd && observer.onCompleted();
        }
        return new CompositeDisposable(source.subscribe(function(newValue) {
          hasValue = true;
          value = newValue;
        }, observer.onError.bind(observer), function() {
          atEnd = true;
        }), sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe));
      }, source);
    }
    observableProto.sample = observableProto.throttleLatest = function(intervalOrSampler, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return typeof intervalOrSampler === 'number' ? sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) : sampleObservable(this, intervalOrSampler);
    };
    observableProto.timeout = function(dueTime, other, scheduler) {
      (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this,
          schedulerMethod = dueTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
      return new AnonymousObservable(function(observer) {
        var id = 0,
            original = new SingleAssignmentDisposable(),
            subscription = new SerialDisposable(),
            switched = false,
            timer = new SerialDisposable();
        subscription.setDisposable(original);
        function createTimer() {
          var myId = id;
          timer.setDisposable(scheduler[schedulerMethod](dueTime, function() {
            if (id === myId) {
              isPromise(other) && (other = observableFromPromise(other));
              subscription.setDisposable(other.subscribe(observer));
            }
          }));
        }
        createTimer();
        original.setDisposable(source.subscribe(function(x) {
          if (!switched) {
            id++;
            observer.onNext(x);
            createTimer();
          }
        }, function(e) {
          if (!switched) {
            id++;
            observer.onError(e);
          }
        }, function() {
          if (!switched) {
            id++;
            observer.onCompleted();
          }
        }));
        return new CompositeDisposable(subscription, timer);
      }, source);
    };
    Observable.generateWithAbsoluteTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var first = true,
            hasResult = false,
            result,
            state = initialState,
            time;
        return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function(self) {
          hasResult && observer.onNext(result);
          try {
            if (first) {
              first = false;
            } else {
              state = iterate(state);
            }
            hasResult = condition(state);
            if (hasResult) {
              result = resultSelector(state);
              time = timeSelector(state);
            }
          } catch (e) {
            observer.onError(e);
            return;
          }
          if (hasResult) {
            self(time);
          } else {
            observer.onCompleted();
          }
        });
      });
    };
    Observable.generateWithRelativeTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var first = true,
            hasResult = false,
            result,
            state = initialState,
            time;
        return scheduler.scheduleRecursiveWithRelative(0, function(self) {
          hasResult && observer.onNext(result);
          try {
            if (first) {
              first = false;
            } else {
              state = iterate(state);
            }
            hasResult = condition(state);
            if (hasResult) {
              result = resultSelector(state);
              time = timeSelector(state);
            }
          } catch (e) {
            observer.onError(e);
            return;
          }
          if (hasResult) {
            self(time);
          } else {
            observer.onCompleted();
          }
        });
      });
    };
    observableProto.delaySubscription = function(dueTime, scheduler) {
      return this.delayWithSelector(observableTimer(dueTime, isScheduler(scheduler) ? scheduler : timeoutScheduler), observableEmpty);
    };
    observableProto.delayWithSelector = function(subscriptionDelay, delayDurationSelector) {
      var source = this,
          subDelay,
          selector;
      if (typeof subscriptionDelay === 'function') {
        selector = subscriptionDelay;
      } else {
        subDelay = subscriptionDelay;
        selector = delayDurationSelector;
      }
      return new AnonymousObservable(function(observer) {
        var delays = new CompositeDisposable(),
            atEnd = false,
            done = function() {
              if (atEnd && delays.length === 0) {
                observer.onCompleted();
              }
            },
            subscription = new SerialDisposable(),
            start = function() {
              subscription.setDisposable(source.subscribe(function(x) {
                var delay;
                try {
                  delay = selector(x);
                } catch (error) {
                  observer.onError(error);
                  return;
                }
                var d = new SingleAssignmentDisposable();
                delays.add(d);
                d.setDisposable(delay.subscribe(function() {
                  observer.onNext(x);
                  delays.remove(d);
                  done();
                }, observer.onError.bind(observer), function() {
                  observer.onNext(x);
                  delays.remove(d);
                  done();
                }));
              }, observer.onError.bind(observer), function() {
                atEnd = true;
                subscription.dispose();
                done();
              }));
            };
        if (!subDelay) {
          start();
        } else {
          subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
        }
        return new CompositeDisposable(subscription, delays);
      }, this);
    };
    observableProto.timeoutWithSelector = function(firstTimeout, timeoutdurationSelector, other) {
      if (arguments.length === 1) {
        timeoutdurationSelector = firstTimeout;
        firstTimeout = observableNever();
      }
      other || (other = observableThrow(new Error('Timeout')));
      var source = this;
      return new AnonymousObservable(function(observer) {
        var subscription = new SerialDisposable(),
            timer = new SerialDisposable(),
            original = new SingleAssignmentDisposable();
        subscription.setDisposable(original);
        var id = 0,
            switched = false;
        function setTimer(timeout) {
          var myId = id;
          function timerWins() {
            return id === myId;
          }
          var d = new SingleAssignmentDisposable();
          timer.setDisposable(d);
          d.setDisposable(timeout.subscribe(function() {
            timerWins() && subscription.setDisposable(other.subscribe(observer));
            d.dispose();
          }, function(e) {
            timerWins() && observer.onError(e);
          }, function() {
            timerWins() && subscription.setDisposable(other.subscribe(observer));
          }));
        }
        ;
        setTimer(firstTimeout);
        function observerWins() {
          var res = !switched;
          if (res) {
            id++;
          }
          return res;
        }
        original.setDisposable(source.subscribe(function(x) {
          if (observerWins()) {
            observer.onNext(x);
            var timeout;
            try {
              timeout = timeoutdurationSelector(x);
            } catch (e) {
              observer.onError(e);
              return;
            }
            setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
          }
        }, function(e) {
          observerWins() && observer.onError(e);
        }, function() {
          observerWins() && observer.onCompleted();
        }));
        return new CompositeDisposable(subscription, timer);
      }, source);
    };
    observableProto.debounceWithSelector = function(durationSelector) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var value,
            hasValue = false,
            cancelable = new SerialDisposable(),
            id = 0;
        var subscription = source.subscribe(function(x) {
          var throttle;
          try {
            throttle = durationSelector(x);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(throttle) && (throttle = observableFromPromise(throttle));
          hasValue = true;
          value = x;
          id++;
          var currentid = id,
              d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(throttle.subscribe(function() {
            hasValue && id === currentid && observer.onNext(value);
            hasValue = false;
            d.dispose();
          }, observer.onError.bind(observer), function() {
            hasValue && id === currentid && observer.onNext(value);
            hasValue = false;
            d.dispose();
          }));
        }, function(e) {
          cancelable.dispose();
          observer.onError(e);
          hasValue = false;
          id++;
        }, function() {
          cancelable.dispose();
          hasValue && observer.onNext(value);
          observer.onCompleted();
          hasValue = false;
          id++;
        });
        return new CompositeDisposable(subscription, cancelable);
      }, source);
    };
    observableProto.throttleWithSelector = function(durationSelector) {
      return this.debounceWithSelector(durationSelector);
    };
    observableProto.skipLastWithTime = function(duration, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this;
      return new AnonymousObservable(function(o) {
        var q = [];
        return source.subscribe(function(x) {
          var now = scheduler.now();
          q.push({
            interval: now,
            value: x
          });
          while (q.length > 0 && now - q[0].interval >= duration) {
            o.onNext(q.shift().value);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          var now = scheduler.now();
          while (q.length > 0 && now - q[0].interval >= duration) {
            o.onNext(q.shift().value);
          }
          o.onCompleted();
        });
      }, source);
    };
    observableProto.takeLastWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(o) {
        var q = [];
        return source.subscribe(function(x) {
          var now = scheduler.now();
          q.push({
            interval: now,
            value: x
          });
          while (q.length > 0 && now - q[0].interval >= duration) {
            q.shift();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          var now = scheduler.now();
          while (q.length > 0) {
            var next = q.shift();
            if (now - next.interval <= duration) {
              o.onNext(next.value);
            }
          }
          o.onCompleted();
        });
      }, source);
    };
    observableProto.takeLastBufferWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(o) {
        var q = [];
        return source.subscribe(function(x) {
          var now = scheduler.now();
          q.push({
            interval: now,
            value: x
          });
          while (q.length > 0 && now - q[0].interval >= duration) {
            q.shift();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          var now = scheduler.now(),
              res = [];
          while (q.length > 0) {
            var next = q.shift();
            now - next.interval <= duration && res.push(next.value);
          }
          o.onNext(res);
          o.onCompleted();
        });
      }, source);
    };
    observableProto.takeWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(o) {
        return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function() {
          o.onCompleted();
        }), source.subscribe(o));
      }, source);
    };
    observableProto.skipWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var open = false;
        return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function() {
          open = true;
        }), source.subscribe(function(x) {
          open && observer.onNext(x);
        }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
      }, source);
    };
    observableProto.skipUntilWithTime = function(startTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this,
          schedulerMethod = startTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
      return new AnonymousObservable(function(o) {
        var open = false;
        return new CompositeDisposable(scheduler[schedulerMethod](startTime, function() {
          open = true;
        }), source.subscribe(function(x) {
          open && o.onNext(x);
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onCompleted();
        }));
      }, source);
    };
    observableProto.takeUntilWithTime = function(endTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this,
          schedulerMethod = endTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
      return new AnonymousObservable(function(o) {
        return new CompositeDisposable(scheduler[schedulerMethod](endTime, function() {
          o.onCompleted();
        }), source.subscribe(o));
      }, source);
    };
    observableProto.throttleFirst = function(windowDuration, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var duration = +windowDuration || 0;
      if (duration <= 0) {
        throw new RangeError('windowDuration cannot be less or equal zero.');
      }
      var source = this;
      return new AnonymousObservable(function(o) {
        var lastOnNext = 0;
        return source.subscribe(function(x) {
          var now = scheduler.now();
          if (lastOnNext === 0 || now - lastOnNext >= duration) {
            lastOnNext = now;
            o.onNext(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onCompleted();
        });
      }, source);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_element.js", ["npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var CompileElement = (function() {
      function CompileElement(element, compilationUnit) {
        if (compilationUnit === void 0) {
          compilationUnit = '';
        }
        this.element = element;
        this._attrs = null;
        this._classList = null;
        this.isViewRoot = false;
        this.inheritedProtoView = null;
        this.distanceToInheritedBinder = 0;
        this.inheritedElementBinder = null;
        this.compileChildren = true;
        var tplDesc = lang_1.assertionsEnabled() ? getElementDescription(element) : null;
        if (compilationUnit !== '') {
          this.elementDescription = compilationUnit;
          if (lang_1.isPresent(tplDesc))
            this.elementDescription += ": " + tplDesc;
        } else {
          this.elementDescription = tplDesc;
        }
      }
      CompileElement.prototype.isBound = function() {
        return lang_1.isPresent(this.inheritedElementBinder) && this.distanceToInheritedBinder === 0;
      };
      CompileElement.prototype.bindElement = function() {
        if (!this.isBound()) {
          var parentBinder = this.inheritedElementBinder;
          this.inheritedElementBinder = this.inheritedProtoView.bindElement(this.element, this.elementDescription);
          if (lang_1.isPresent(parentBinder)) {
            this.inheritedElementBinder.setParent(parentBinder, this.distanceToInheritedBinder);
          }
          this.distanceToInheritedBinder = 0;
        }
        return this.inheritedElementBinder;
      };
      CompileElement.prototype.attrs = function() {
        if (lang_1.isBlank(this._attrs)) {
          this._attrs = dom_adapter_1.DOM.attributeMap(this.element);
        }
        return this._attrs;
      };
      CompileElement.prototype.classList = function() {
        if (lang_1.isBlank(this._classList)) {
          this._classList = [];
          var elClassList = dom_adapter_1.DOM.classList(this.element);
          for (var i = 0; i < elClassList.length; i++) {
            this._classList.push(elClassList[i]);
          }
        }
        return this._classList;
      };
      return CompileElement;
    })();
    exports.CompileElement = CompileElement;
    function getElementDescription(domElement) {
      var buf = new lang_1.StringJoiner();
      var atts = dom_adapter_1.DOM.attributeMap(domElement);
      buf.add("<");
      buf.add(dom_adapter_1.DOM.tagName(domElement).toLowerCase());
      addDescriptionAttribute(buf, "id", atts.get("id"));
      addDescriptionAttribute(buf, "class", atts.get("class"));
      collection_1.MapWrapper.forEach(atts, function(attValue, attName) {
        if (attName !== "id" && attName !== "class") {
          addDescriptionAttribute(buf, attName, attValue);
        }
      });
      buf.add(">");
      return buf.toString();
    }
    function addDescriptionAttribute(buffer, attName, attValue) {
      if (lang_1.isPresent(attValue)) {
        if (attValue.length === 0) {
          buffer.add(' ' + attName);
        } else {
          buffer.add(' ' + attName + '="' + attValue + '"');
        }
      }
    }
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_control.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var CompileControl = (function() {
      function CompileControl(_steps) {
        this._steps = _steps;
        this._currentStepIndex = 0;
        this._parent = null;
        this._results = null;
        this._additionalChildren = null;
      }
      CompileControl.prototype.internalProcess = function(results, startStepIndex, parent, current) {
        this._results = results;
        var previousStepIndex = this._currentStepIndex;
        var previousParent = this._parent;
        this._ignoreCurrentElement = false;
        for (var i = startStepIndex; i < this._steps.length && !this._ignoreCurrentElement; i++) {
          var step = this._steps[i];
          this._parent = parent;
          this._currentStepIndex = i;
          step.processElement(parent, current, this);
          parent = this._parent;
        }
        if (!this._ignoreCurrentElement) {
          results.push(current);
        }
        this._currentStepIndex = previousStepIndex;
        this._parent = previousParent;
        var localAdditionalChildren = this._additionalChildren;
        this._additionalChildren = null;
        return localAdditionalChildren;
      };
      CompileControl.prototype.addParent = function(newElement) {
        this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
        this._parent = newElement;
      };
      CompileControl.prototype.addChild = function(element) {
        if (lang_1.isBlank(this._additionalChildren)) {
          this._additionalChildren = [];
        }
        this._additionalChildren.push(element);
      };
      CompileControl.prototype.ignoreCurrentElement = function() {
        this._ignoreCurrentElement = true;
      };
      return CompileControl;
    })();
    exports.CompileControl = CompileControl;
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view_builder.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/view/element_binder.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.35/src/change_detection/change_detection.js");
  var proto_view_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/proto_view.js");
  var element_binder_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/view/element_binder.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var ProtoViewBuilder = (function() {
    function ProtoViewBuilder(rootElement, type, viewEncapsulation) {
      this.rootElement = rootElement;
      this.type = type;
      this.viewEncapsulation = viewEncapsulation;
      this.variableBindings = new Map();
      this.elements = [];
      this.rootTextBindings = new Map();
      this.ngContentCount = 0;
      this.hostAttributes = new Map();
    }
    ProtoViewBuilder.prototype.bindElement = function(element, description) {
      if (description === void 0) {
        description = null;
      }
      var builder = new ElementBinderBuilder(this.elements.length, element, description);
      this.elements.push(builder);
      dom_adapter_1.DOM.addClass(element, util_1.NG_BINDING_CLASS);
      return builder;
    };
    ProtoViewBuilder.prototype.bindVariable = function(name, value) {
      this.variableBindings.set(value, name);
    };
    ProtoViewBuilder.prototype.bindRootText = function(textNode, expression) {
      this.rootTextBindings.set(textNode, expression);
    };
    ProtoViewBuilder.prototype.bindNgContent = function() {
      this.ngContentCount++;
    };
    ProtoViewBuilder.prototype.setHostAttribute = function(name, value) {
      this.hostAttributes.set(name, value);
    };
    ProtoViewBuilder.prototype.build = function(schemaRegistry, templateCloner) {
      var domElementBinders = [];
      var apiElementBinders = [];
      var textNodeExpressions = [];
      var rootTextNodeIndices = [];
      var transitiveNgContentCount = this.ngContentCount;
      util_1.queryBoundTextNodeIndices(dom_adapter_1.DOM.content(this.rootElement), this.rootTextBindings, function(node, nodeIndex, expression) {
        textNodeExpressions.push(expression);
        rootTextNodeIndices.push(nodeIndex);
      });
      collection_1.ListWrapper.forEach(this.elements, function(ebb) {
        var directiveTemplatePropertyNames = new collection_1.Set();
        var apiDirectiveBinders = collection_1.ListWrapper.map(ebb.directives, function(dbb) {
          ebb.eventBuilder.merge(dbb.eventBuilder);
          collection_1.ListWrapper.forEach(dbb.templatePropertyNames, function(name) {
            return directiveTemplatePropertyNames.add(name);
          });
          return new api_1.DirectiveBinder({
            directiveIndex: dbb.directiveIndex,
            propertyBindings: dbb.propertyBindings,
            eventBindings: dbb.eventBindings,
            hostPropertyBindings: buildElementPropertyBindings(schemaRegistry, ebb.element, true, dbb.hostPropertyBindings, null)
          });
        });
        var nestedProtoView = lang_1.isPresent(ebb.nestedProtoView) ? ebb.nestedProtoView.build(schemaRegistry, templateCloner) : null;
        if (lang_1.isPresent(nestedProtoView)) {
          transitiveNgContentCount += nestedProtoView.transitiveNgContentCount;
        }
        var parentIndex = lang_1.isPresent(ebb.parent) ? ebb.parent.index : -1;
        var textNodeIndices = [];
        util_1.queryBoundTextNodeIndices(ebb.element, ebb.textBindings, function(node, nodeIndex, expression) {
          textNodeExpressions.push(expression);
          textNodeIndices.push(nodeIndex);
        });
        apiElementBinders.push(new api_1.RenderElementBinder({
          index: ebb.index,
          parentIndex: parentIndex,
          distanceToParent: ebb.distanceToParent,
          directives: apiDirectiveBinders,
          nestedProtoView: nestedProtoView,
          propertyBindings: buildElementPropertyBindings(schemaRegistry, ebb.element, lang_1.isPresent(ebb.componentId), ebb.propertyBindings, directiveTemplatePropertyNames),
          variableBindings: ebb.variableBindings,
          eventBindings: ebb.eventBindings,
          readAttributes: ebb.readAttributes
        }));
        domElementBinders.push(new element_binder_1.DomElementBinder({
          textNodeIndices: textNodeIndices,
          hasNestedProtoView: lang_1.isPresent(nestedProtoView) || lang_1.isPresent(ebb.componentId),
          hasNativeShadowRoot: false,
          eventLocals: new change_detection_1.LiteralArray(ebb.eventBuilder.buildEventLocals()),
          localEvents: ebb.eventBuilder.buildLocalEvents(),
          globalEvents: ebb.eventBuilder.buildGlobalEvents()
        }));
      });
      var rootNodeCount = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.content(this.rootElement)).length;
      return new api_1.ProtoViewDto({
        render: new proto_view_1.DomProtoViewRef(proto_view_1.DomProtoView.create(templateCloner, this.type, this.rootElement, this.viewEncapsulation, [rootNodeCount], rootTextNodeIndices, domElementBinders, this.hostAttributes)),
        type: this.type,
        elementBinders: apiElementBinders,
        variableBindings: this.variableBindings,
        textBindings: textNodeExpressions,
        transitiveNgContentCount: transitiveNgContentCount
      });
    };
    return ProtoViewBuilder;
  })();
  exports.ProtoViewBuilder = ProtoViewBuilder;
  var ElementBinderBuilder = (function() {
    function ElementBinderBuilder(index, element, description) {
      this.index = index;
      this.element = element;
      this.parent = null;
      this.distanceToParent = 0;
      this.directives = [];
      this.nestedProtoView = null;
      this.propertyBindings = new Map();
      this.variableBindings = new Map();
      this.eventBindings = [];
      this.eventBuilder = new EventBuilder();
      this.textBindings = new Map();
      this.readAttributes = new Map();
      this.componentId = null;
    }
    ElementBinderBuilder.prototype.setParent = function(parent, distanceToParent) {
      this.parent = parent;
      if (lang_1.isPresent(parent)) {
        this.distanceToParent = distanceToParent;
      }
      return this;
    };
    ElementBinderBuilder.prototype.readAttribute = function(attrName) {
      if (lang_1.isBlank(this.readAttributes.get(attrName))) {
        this.readAttributes.set(attrName, dom_adapter_1.DOM.getAttribute(this.element, attrName));
      }
    };
    ElementBinderBuilder.prototype.bindDirective = function(directiveIndex) {
      var directive = new DirectiveBuilder(directiveIndex);
      this.directives.push(directive);
      return directive;
    };
    ElementBinderBuilder.prototype.bindNestedProtoView = function(rootElement) {
      if (lang_1.isPresent(this.nestedProtoView)) {
        throw new lang_1.BaseException('Only one nested view per element is allowed');
      }
      this.nestedProtoView = new ProtoViewBuilder(rootElement, api_1.ViewType.EMBEDDED, api_1.ViewEncapsulation.NONE);
      return this.nestedProtoView;
    };
    ElementBinderBuilder.prototype.bindProperty = function(name, expression) {
      this.propertyBindings.set(name, expression);
    };
    ElementBinderBuilder.prototype.bindVariable = function(name, value) {
      if (lang_1.isPresent(this.nestedProtoView)) {
        this.nestedProtoView.bindVariable(name, value);
      } else {
        this.variableBindings.set(value, name);
      }
    };
    ElementBinderBuilder.prototype.bindEvent = function(name, expression, target) {
      if (target === void 0) {
        target = null;
      }
      this.eventBindings.push(this.eventBuilder.add(name, expression, target));
    };
    ElementBinderBuilder.prototype.bindText = function(textNode, expression) {
      this.textBindings.set(textNode, expression);
    };
    ElementBinderBuilder.prototype.setComponentId = function(componentId) {
      this.componentId = componentId;
    };
    return ElementBinderBuilder;
  })();
  exports.ElementBinderBuilder = ElementBinderBuilder;
  var DirectiveBuilder = (function() {
    function DirectiveBuilder(directiveIndex) {
      this.directiveIndex = directiveIndex;
      this.propertyBindings = new Map();
      this.templatePropertyNames = [];
      this.hostPropertyBindings = new Map();
      this.eventBindings = [];
      this.eventBuilder = new EventBuilder();
    }
    DirectiveBuilder.prototype.bindProperty = function(name, expression, elProp) {
      this.propertyBindings.set(name, expression);
      if (lang_1.isPresent(elProp)) {
        this.templatePropertyNames.push(elProp);
      }
    };
    DirectiveBuilder.prototype.bindHostProperty = function(name, expression) {
      this.hostPropertyBindings.set(name, expression);
    };
    DirectiveBuilder.prototype.bindEvent = function(name, expression, target) {
      if (target === void 0) {
        target = null;
      }
      this.eventBindings.push(this.eventBuilder.add(name, expression, target));
    };
    return DirectiveBuilder;
  })();
  exports.DirectiveBuilder = DirectiveBuilder;
  var EventBuilder = (function(_super) {
    __extends(EventBuilder, _super);
    function EventBuilder() {
      _super.call(this);
      this.locals = [];
      this.localEvents = [];
      this.globalEvents = [];
      this._implicitReceiver = new change_detection_1.ImplicitReceiver();
    }
    EventBuilder.prototype.add = function(name, source, target) {
      var adjustedAst = source.ast;
      var fullName = lang_1.isPresent(target) ? target + util_1.EVENT_TARGET_SEPARATOR + name : name;
      var result = new api_1.EventBinding(fullName, new change_detection_1.ASTWithSource(adjustedAst, source.source, source.location));
      var event = new element_binder_1.Event(name, target, fullName);
      if (lang_1.isBlank(target)) {
        this.localEvents.push(event);
      } else {
        this.globalEvents.push(event);
      }
      return result;
    };
    EventBuilder.prototype.visitPropertyRead = function(ast) {
      var isEventAccess = false;
      var current = ast;
      while (!isEventAccess && (current instanceof change_detection_1.PropertyRead)) {
        var am = current;
        if (am.name == '$event') {
          isEventAccess = true;
        }
        current = am.receiver;
      }
      if (isEventAccess) {
        this.locals.push(ast);
        var index = this.locals.length - 1;
        return new change_detection_1.PropertyRead(this._implicitReceiver, "" + index, function(arr) {
          return arr[index];
        });
      } else {
        return ast;
      }
    };
    EventBuilder.prototype.buildEventLocals = function() {
      return this.locals;
    };
    EventBuilder.prototype.buildLocalEvents = function() {
      return this.localEvents;
    };
    EventBuilder.prototype.buildGlobalEvents = function() {
      return this.globalEvents;
    };
    EventBuilder.prototype.merge = function(eventBuilder) {
      this._merge(this.localEvents, eventBuilder.localEvents);
      this._merge(this.globalEvents, eventBuilder.globalEvents);
      collection_1.ListWrapper.concat(this.locals, eventBuilder.locals);
    };
    EventBuilder.prototype._merge = function(host, tobeAdded) {
      var names = [];
      for (var i = 0; i < host.length; i++) {
        names.push(host[i].fullName);
      }
      for (var j = 0; j < tobeAdded.length; j++) {
        if (!collection_1.ListWrapper.contains(names, tobeAdded[j].fullName)) {
          host.push(tobeAdded[j]);
        }
      }
    };
    return EventBuilder;
  })(change_detection_1.AstTransformer);
  exports.EventBuilder = EventBuilder;
  var PROPERTY_PARTS_SEPARATOR = new RegExp('\\.');
  var ATTRIBUTE_PREFIX = 'attr';
  var CLASS_PREFIX = 'class';
  var STYLE_PREFIX = 'style';
  function buildElementPropertyBindings(schemaRegistry, protoElement, isNgComponent, bindingsInTemplate, directiveTemplatePropertyNames) {
    var propertyBindings = [];
    collection_1.MapWrapper.forEach(bindingsInTemplate, function(ast, propertyNameInTemplate) {
      var propertyBinding = createElementPropertyBinding(schemaRegistry, ast, propertyNameInTemplate);
      if (lang_1.isPresent(directiveTemplatePropertyNames) && collection_1.SetWrapper.has(directiveTemplatePropertyNames, propertyNameInTemplate)) {} else if (isValidElementPropertyBinding(schemaRegistry, protoElement, isNgComponent, propertyBinding)) {
        propertyBindings.push(propertyBinding);
      } else {
        var exMsg = "Can't bind to '" + propertyNameInTemplate + "' since it isn't a known property of the '<" + dom_adapter_1.DOM.tagName(protoElement).toLowerCase() + ">' element";
        if (lang_1.isPresent(directiveTemplatePropertyNames)) {
          exMsg += ' and there are no matching directives with a corresponding property';
        }
        throw new lang_1.BaseException(exMsg);
      }
    });
    return propertyBindings;
  }
  function isValidElementPropertyBinding(schemaRegistry, protoElement, isNgComponent, binding) {
    if (binding.type === api_1.PropertyBindingType.PROPERTY) {
      if (!isNgComponent) {
        return schemaRegistry.hasProperty(protoElement, binding.property);
      } else {
        return dom_adapter_1.DOM.hasProperty(protoElement, binding.property);
      }
    }
    return true;
  }
  function createElementPropertyBinding(schemaRegistry, ast, propertyNameInTemplate) {
    var parts = lang_1.StringWrapper.split(propertyNameInTemplate, PROPERTY_PARTS_SEPARATOR);
    if (parts.length === 1) {
      var propName = schemaRegistry.getMappedPropName(parts[0]);
      return new api_1.ElementPropertyBinding(api_1.PropertyBindingType.PROPERTY, ast, propName);
    } else if (parts[0] == ATTRIBUTE_PREFIX) {
      return new api_1.ElementPropertyBinding(api_1.PropertyBindingType.ATTRIBUTE, ast, parts[1]);
    } else if (parts[0] == CLASS_PREFIX) {
      return new api_1.ElementPropertyBinding(api_1.PropertyBindingType.CLASS, ast, util_1.camelCaseToDashCase(parts[1]));
    } else if (parts[0] == STYLE_PREFIX) {
      var unit = parts.length > 2 ? parts[2] : null;
      return new api_1.ElementPropertyBinding(api_1.PropertyBindingType.STYLE, ast, parts[1], unit);
    } else {
      throw new lang_1.BaseException("Invalid property name " + propertyNameInTemplate);
    }
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/property_binding_parser.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(onbubble-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
  var PropertyBindingParser = (function() {
    function PropertyBindingParser(_parser) {
      this._parser = _parser;
    }
    PropertyBindingParser.prototype.processStyle = function(style) {
      return style;
    };
    PropertyBindingParser.prototype.processElement = function(parent, current, control) {
      var _this = this;
      var attrs = current.attrs();
      var newAttrs = new Map();
      collection_1.MapWrapper.forEach(attrs, function(attrValue, attrName) {
        attrName = _this._normalizeAttributeName(attrName);
        var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
        if (lang_1.isPresent(bindParts)) {
          if (lang_1.isPresent(bindParts[1])) {
            _this._bindProperty(bindParts[6], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[2])) {
            var identifier = bindParts[6];
            var value = attrValue == '' ? '\$implicit' : attrValue;
            _this._bindVariable(identifier, value, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[3])) {
            _this._bindEvent(bindParts[6], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[4])) {
            _this._bindEvent('^' + bindParts[6], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[5])) {
            _this._bindProperty(bindParts[6], attrValue, current, newAttrs);
            _this._bindAssignmentEvent(bindParts[6], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[7])) {
            _this._bindProperty(bindParts[7], attrValue, current, newAttrs);
            _this._bindAssignmentEvent(bindParts[7], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[8])) {
            _this._bindProperty(bindParts[8], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[9])) {
            _this._bindEvent(bindParts[9], attrValue, current, newAttrs);
          }
        } else {
          var expr = _this._parser.parseInterpolation(attrValue, current.elementDescription);
          if (lang_1.isPresent(expr)) {
            _this._bindPropertyAst(attrName, expr, current, newAttrs);
          }
        }
      });
      collection_1.MapWrapper.forEach(newAttrs, function(attrValue, attrName) {
        attrs.set(attrName, attrValue);
      });
    };
    PropertyBindingParser.prototype._normalizeAttributeName = function(attrName) {
      return lang_1.StringWrapper.startsWith(attrName, 'data-') ? lang_1.StringWrapper.substring(attrName, 5) : attrName;
    };
    PropertyBindingParser.prototype._bindVariable = function(identifier, value, current, newAttrs) {
      current.bindElement().bindVariable(util_1.dashCaseToCamelCase(identifier), value);
      newAttrs.set(identifier, value);
    };
    PropertyBindingParser.prototype._bindProperty = function(name, expression, current, newAttrs) {
      this._bindPropertyAst(name, this._parser.parseBinding(expression, current.elementDescription), current, newAttrs);
    };
    PropertyBindingParser.prototype._bindPropertyAst = function(name, ast, current, newAttrs) {
      var binder = current.bindElement();
      binder.bindProperty(util_1.dashCaseToCamelCase(name), ast);
      newAttrs.set(name, ast.source);
    };
    PropertyBindingParser.prototype._bindAssignmentEvent = function(name, expression, current, newAttrs) {
      this._bindEvent(name, expression + "=$event", current, newAttrs);
    };
    PropertyBindingParser.prototype._bindEvent = function(name, expression, current, newAttrs) {
      current.bindElement().bindEvent(util_1.dashCaseToCamelCase(name), this._parser.parseAction(expression, current.elementDescription));
    };
    return PropertyBindingParser;
  })();
  exports.PropertyBindingParser = PropertyBindingParser;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/text_interpolation_parser.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var TextInterpolationParser = (function() {
    function TextInterpolationParser(_parser) {
      this._parser = _parser;
    }
    TextInterpolationParser.prototype.processStyle = function(style) {
      return style;
    };
    TextInterpolationParser.prototype.processElement = function(parent, current, control) {
      if (!current.compileChildren) {
        return;
      }
      var element = current.element;
      var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
      for (var i = 0; i < childNodes.length; i++) {
        var node = childNodes[i];
        if (dom_adapter_1.DOM.isTextNode(node)) {
          var textNode = node;
          var text = dom_adapter_1.DOM.nodeValue(textNode);
          var expr = this._parser.parseInterpolation(text, current.elementDescription);
          if (lang_1.isPresent(expr)) {
            dom_adapter_1.DOM.setText(textNode, ' ');
            if (current.element === current.inheritedProtoView.rootElement) {
              current.inheritedProtoView.bindRootText(textNode, expr);
            } else {
              current.bindElement().bindText(textNode, expr);
            }
          }
        }
      }
    };
    return TextInterpolationParser;
  })();
  exports.TextInterpolationParser = TextInterpolationParser;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/directive_parser.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/selector.js", "npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var selector_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/selector.js");
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var DirectiveParser = (function() {
    function DirectiveParser(_parser, _directives) {
      this._parser = _parser;
      this._directives = _directives;
      this._selectorMatcher = new selector_1.SelectorMatcher();
      for (var i = 0; i < _directives.length; i++) {
        var directive = _directives[i];
        var selector = selector_1.CssSelector.parse(directive.selector);
        this._selectorMatcher.addSelectables(selector, i);
      }
    }
    DirectiveParser.prototype.processStyle = function(style) {
      return style;
    };
    DirectiveParser.prototype.processElement = function(parent, current, control) {
      var _this = this;
      var attrs = current.attrs();
      var classList = current.classList();
      var cssSelector = new selector_1.CssSelector();
      var foundDirectiveIndices = [];
      var elementBinder = null;
      cssSelector.setElement(dom_adapter_1.DOM.nodeName(current.element));
      for (var i = 0; i < classList.length; i++) {
        cssSelector.addClassName(classList[i]);
      }
      collection_1.MapWrapper.forEach(attrs, function(attrValue, attrName) {
        cssSelector.addAttribute(attrName, attrValue);
      });
      this._selectorMatcher.match(cssSelector, function(selector, directiveIndex) {
        var directive = _this._directives[directiveIndex];
        elementBinder = current.bindElement();
        if (directive.type === api_1.RenderDirectiveMetadata.COMPONENT_TYPE) {
          _this._ensureHasOnlyOneComponent(elementBinder, current.elementDescription);
          collection_1.ListWrapper.insert(foundDirectiveIndices, 0, directiveIndex);
          elementBinder.setComponentId(directive.id);
        } else {
          foundDirectiveIndices.push(directiveIndex);
        }
      });
      collection_1.ListWrapper.forEach(foundDirectiveIndices, function(directiveIndex) {
        var dirMetadata = _this._directives[directiveIndex];
        var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);
        current.compileChildren = current.compileChildren && dirMetadata.compileChildren;
        if (lang_1.isPresent(dirMetadata.properties)) {
          collection_1.ListWrapper.forEach(dirMetadata.properties, function(bindConfig) {
            _this._bindDirectiveProperty(bindConfig, current, directiveBinderBuilder);
          });
        }
        if (lang_1.isPresent(dirMetadata.hostListeners)) {
          _this._sortedKeysForEach(dirMetadata.hostListeners, function(action, eventName) {
            _this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);
          });
        }
        if (lang_1.isPresent(dirMetadata.hostProperties)) {
          _this._sortedKeysForEach(dirMetadata.hostProperties, function(expression, hostPropertyName) {
            _this._bindHostProperty(hostPropertyName, expression, current, directiveBinderBuilder);
          });
        }
        if (lang_1.isPresent(dirMetadata.hostAttributes)) {
          _this._sortedKeysForEach(dirMetadata.hostAttributes, function(hostAttrValue, hostAttrName) {
            _this._addHostAttribute(hostAttrName, hostAttrValue, current);
          });
        }
        if (lang_1.isPresent(dirMetadata.readAttributes)) {
          collection_1.ListWrapper.forEach(dirMetadata.readAttributes, function(attrName) {
            elementBinder.readAttribute(attrName);
          });
        }
      });
    };
    DirectiveParser.prototype._sortedKeysForEach = function(map, fn) {
      var keys = collection_1.MapWrapper.keys(map);
      collection_1.ListWrapper.sort(keys, function(a, b) {
        var compareVal = lang_1.StringWrapper.compare(a, b);
        return compareVal == 0 ? -1 : compareVal;
      });
      collection_1.ListWrapper.forEach(keys, function(key) {
        fn(collection_1.MapWrapper.get(map, key), key);
      });
    };
    DirectiveParser.prototype._ensureHasOnlyOneComponent = function(elementBinder, elDescription) {
      if (lang_1.isPresent(elementBinder.componentId)) {
        throw new lang_1.BaseException("Only one component directive is allowed per element - check " + elDescription);
      }
    };
    DirectiveParser.prototype._bindDirectiveProperty = function(bindConfig, compileElement, directiveBinderBuilder) {
      var dirProperty;
      var elProp;
      var pipes;
      var assignIndex = bindConfig.indexOf(':');
      if (assignIndex > -1) {
        dirProperty = lang_1.StringWrapper.substring(bindConfig, 0, assignIndex).trim();
        pipes = this._splitBindConfig(lang_1.StringWrapper.substring(bindConfig, assignIndex + 1));
        elProp = collection_1.ListWrapper.removeAt(pipes, 0);
      } else {
        dirProperty = bindConfig;
        elProp = bindConfig;
        pipes = [];
      }
      elProp = util_1.dashCaseToCamelCase(elProp);
      var bindingAst = compileElement.bindElement().propertyBindings.get(elProp);
      if (lang_1.isBlank(bindingAst)) {
        var attributeValue = compileElement.attrs().get(util_1.camelCaseToDashCase(elProp));
        if (lang_1.isPresent(attributeValue)) {
          bindingAst = this._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
        }
      }
      if (lang_1.isPresent(bindingAst)) {
        directiveBinderBuilder.bindProperty(dirProperty, bindingAst, elProp);
      }
    };
    DirectiveParser.prototype._bindDirectiveEvent = function(eventName, action, compileElement, directiveBinderBuilder) {
      var ast = this._parser.parseAction(action, compileElement.elementDescription);
      if (lang_1.StringWrapper.contains(eventName, util_1.EVENT_TARGET_SEPARATOR)) {
        var parts = eventName.split(util_1.EVENT_TARGET_SEPARATOR);
        directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);
      } else {
        directiveBinderBuilder.bindEvent(eventName, ast);
      }
    };
    DirectiveParser.prototype._bindHostProperty = function(hostPropertyName, expression, compileElement, directiveBinderBuilder) {
      var ast = this._parser.parseSimpleBinding(expression, "hostProperties of " + compileElement.elementDescription);
      directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);
    };
    DirectiveParser.prototype._addHostAttribute = function(attrName, attrValue, compileElement) {
      if (lang_1.StringWrapper.equals(attrName, 'class')) {
        collection_1.ListWrapper.forEach(attrValue.split(' '), function(className) {
          dom_adapter_1.DOM.addClass(compileElement.element, className);
        });
      } else if (!dom_adapter_1.DOM.hasAttribute(compileElement.element, attrName)) {
        dom_adapter_1.DOM.setAttribute(compileElement.element, attrName, attrValue);
      }
    };
    DirectiveParser.prototype._splitBindConfig = function(bindConfig) {
      return collection_1.ListWrapper.map(bindConfig.split('|'), function(s) {
        return s.trim();
      });
    };
    return DirectiveParser;
  })();
  exports.DirectiveParser = DirectiveParser;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/view_splitter.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_element.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
  var compile_element_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/compile_element.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var ViewSplitter = (function() {
    function ViewSplitter(_parser) {
      this._parser = _parser;
    }
    ViewSplitter.prototype.processStyle = function(style) {
      return style;
    };
    ViewSplitter.prototype.processElement = function(parent, current, control) {
      var attrs = current.attrs();
      var templateBindings = attrs.get('template');
      var hasTemplateBinding = lang_1.isPresent(templateBindings);
      collection_1.MapWrapper.forEach(attrs, function(attrValue, attrName) {
        if (lang_1.StringWrapper.startsWith(attrName, '*')) {
          var key = lang_1.StringWrapper.substring(attrName, 1);
          if (hasTemplateBinding) {
            throw new lang_1.BaseException("Only one template directive per element is allowed: " + (templateBindings + " and " + key + " cannot be used simultaneously ") + ("in " + current.elementDescription));
          } else {
            templateBindings = (attrValue.length == 0) ? key : key + ' ' + attrValue;
            hasTemplateBinding = true;
          }
        }
      });
      if (lang_1.isPresent(parent)) {
        if (dom_adapter_1.DOM.isTemplateElement(current.element)) {
          if (!current.isViewRoot) {
            var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
            viewRoot.inheritedProtoView = current.bindElement().bindNestedProtoView(viewRoot.element);
            viewRoot.elementDescription = current.elementDescription;
            viewRoot.isViewRoot = true;
            this._moveChildNodes(dom_adapter_1.DOM.content(current.element), dom_adapter_1.DOM.content(viewRoot.element));
            control.addChild(viewRoot);
          }
        }
        if (hasTemplateBinding) {
          var anchor = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
          anchor.inheritedProtoView = current.inheritedProtoView;
          anchor.inheritedElementBinder = current.inheritedElementBinder;
          anchor.distanceToInheritedBinder = current.distanceToInheritedBinder;
          anchor.elementDescription = current.elementDescription;
          var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
          viewRoot.inheritedProtoView = anchor.bindElement().bindNestedProtoView(viewRoot.element);
          viewRoot.elementDescription = current.elementDescription;
          viewRoot.isViewRoot = true;
          current.inheritedProtoView = viewRoot.inheritedProtoView;
          current.inheritedElementBinder = null;
          current.distanceToInheritedBinder = 0;
          this._parseTemplateBindings(templateBindings, anchor);
          dom_adapter_1.DOM.insertBefore(current.element, anchor.element);
          control.addParent(anchor);
          dom_adapter_1.DOM.appendChild(dom_adapter_1.DOM.content(viewRoot.element), current.element);
          control.addParent(viewRoot);
        }
      }
    };
    ViewSplitter.prototype._moveChildNodes = function(source, target) {
      var next = dom_adapter_1.DOM.firstChild(source);
      while (lang_1.isPresent(next)) {
        dom_adapter_1.DOM.appendChild(target, next);
        next = dom_adapter_1.DOM.firstChild(source);
      }
    };
    ViewSplitter.prototype._parseTemplateBindings = function(templateBindings, compileElement) {
      var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
      for (var i = 0; i < bindings.length; i++) {
        var binding = bindings[i];
        if (binding.keyIsVar) {
          compileElement.bindElement().bindVariable(util_1.dashCaseToCamelCase(binding.key), binding.name);
          compileElement.attrs().set(binding.key, binding.name);
        } else if (lang_1.isPresent(binding.expression)) {
          compileElement.bindElement().bindProperty(util_1.dashCaseToCamelCase(binding.key), binding.expression);
          compileElement.attrs().set(binding.key, binding.expression.source);
        } else {
          dom_adapter_1.DOM.setAttribute(compileElement.element, binding.key, '');
        }
      }
    };
    return ViewSplitter;
  })();
  exports.ViewSplitter = ViewSplitter;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/style_encapsulator.js", ["npm:angular2@2.0.0-alpha.35/src/render/api.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/util.js", "npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/shadow_css.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var api_1 = require("npm:angular2@2.0.0-alpha.35/src/render/api.js");
  var util_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/util.js");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var shadow_css_1 = require("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/shadow_css.js");
  var StyleEncapsulator = (function() {
    function StyleEncapsulator(_appId, _view, _componentUIDsCache) {
      this._appId = _appId;
      this._view = _view;
      this._componentUIDsCache = _componentUIDsCache;
    }
    StyleEncapsulator.prototype.processElement = function(parent, current, control) {
      if (util_1.isElementWithTag(current.element, util_1.NG_CONTENT_ELEMENT_NAME)) {
        current.inheritedProtoView.bindNgContent();
      } else {
        if (this._view.encapsulation === api_1.ViewEncapsulation.EMULATED) {
          this._processEmulatedScopedElement(current, parent);
        }
      }
    };
    StyleEncapsulator.prototype.processStyle = function(style) {
      var encapsulation = this._view.encapsulation;
      if (encapsulation === api_1.ViewEncapsulation.EMULATED) {
        return this._shimCssForComponent(style, this._view.componentId);
      } else {
        return style;
      }
    };
    StyleEncapsulator.prototype._processEmulatedScopedElement = function(current, parent) {
      var element = current.element;
      var hostComponentId = this._view.componentId;
      var viewType = current.inheritedProtoView.type;
      if (viewType !== api_1.ViewType.HOST && lang_1.isPresent(hostComponentId)) {
        var contentAttribute = getContentAttribute(this._getComponentId(hostComponentId));
        dom_adapter_1.DOM.setAttribute(element, contentAttribute, '');
        if (lang_1.isBlank(parent) && viewType == api_1.ViewType.COMPONENT) {
          var hostAttribute = getHostAttribute(this._getComponentId(hostComponentId));
          current.inheritedProtoView.setHostAttribute(hostAttribute, '');
        }
      }
    };
    StyleEncapsulator.prototype._shimCssForComponent = function(cssText, componentId) {
      var id = this._getComponentId(componentId);
      var shadowCss = new shadow_css_1.ShadowCss();
      return shadowCss.shimCssText(cssText, getContentAttribute(id), getHostAttribute(id));
    };
    StyleEncapsulator.prototype._getComponentId = function(componentStringId) {
      var id = this._componentUIDsCache.get(componentStringId);
      if (lang_1.isBlank(id)) {
        id = this._appId + "-" + this._componentUIDsCache.size;
        this._componentUIDsCache.set(componentStringId, id);
      }
      return id;
    };
    return StyleEncapsulator;
  })();
  exports.StyleEncapsulator = StyleEncapsulator;
  function getHostAttribute(compId) {
    return "_nghost-" + compId;
  }
  function getContentAttribute(compId) {
    return "_ngcontent-" + compId;
  }
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/view/element_binder.js", ["npm:angular2@2.0.0-alpha.35/src/facade/lang.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
  var DomElementBinder = (function() {
    function DomElementBinder(_a) {
      var _b = _a === void 0 ? {} : _a,
          textNodeIndices = _b.textNodeIndices,
          hasNestedProtoView = _b.hasNestedProtoView,
          eventLocals = _b.eventLocals,
          localEvents = _b.localEvents,
          globalEvents = _b.globalEvents,
          hasNativeShadowRoot = _b.hasNativeShadowRoot;
      this.textNodeIndices = textNodeIndices;
      this.hasNestedProtoView = hasNestedProtoView;
      this.eventLocals = eventLocals;
      this.localEvents = localEvents;
      this.globalEvents = globalEvents;
      this.hasNativeShadowRoot = lang_1.isPresent(hasNativeShadowRoot) ? hasNativeShadowRoot : false;
    }
    return DomElementBinder;
  })();
  exports.DomElementBinder = DomElementBinder;
  var Event = (function() {
    function Event(name, target, fullName) {
      this.name = name;
      this.target = target;
      this.fullName = fullName;
    }
    return Event;
  })();
  exports.Event = Event;
  var HostAction = (function() {
    function HostAction(actionName, actionExpression, expression) {
      this.actionName = actionName;
      this.actionExpression = actionExpression;
      this.expression = expression;
    }
    return HostAction;
  })();
  exports.HostAction = HostAction;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/change_detection/codegen_facade.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function codify(obj) {
    return JSON.stringify(obj);
  }
  exports.codify = codify;
  function rawString(str) {
    return "'" + str + "'";
  }
  exports.rawString = rawString;
  function combineGeneratedStrings(vals) {
    return vals.join(' + ');
  }
  exports.combineGeneratedStrings = combineGeneratedStrings;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:process@0.10.1/browser.js", [], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  function drainQueue() {
    if (draining) {
      return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      var i = -1;
      while (++i < len) {
        currentQueue[i]();
      }
      len = queue.length;
    }
    draining = false;
  }
  process.nextTick = function(fun) {
    queue.push(fun);
    if (!draining) {
      setTimeout(drainQueue, 0);
    }
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:angular2@2.0.0-alpha.35/src/render/dom/compiler/shadow_css.js", ["npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js", "npm:angular2@2.0.0-alpha.35/src/facade/collection.js", "npm:angular2@2.0.0-alpha.35/src/facade/lang.js", "github:jspm/nodelibs-process@0.1.1.js"], true, function(require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.35/src/dom/dom_adapter.js");
    var collection_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/collection.js");
    var lang_1 = require("npm:angular2@2.0.0-alpha.35/src/facade/lang.js");
    var ShadowCss = (function() {
      function ShadowCss() {
        this.strictStyling = true;
      }
      ShadowCss.prototype.shimStyle = function(style, selector, hostSelector) {
        if (hostSelector === void 0) {
          hostSelector = '';
        }
        var cssText = dom_adapter_1.DOM.getText(style);
        return this.shimCssText(cssText, selector, hostSelector);
      };
      ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
        if (hostSelector === void 0) {
          hostSelector = '';
        }
        cssText = this._insertDirectives(cssText);
        return this._scopeCssText(cssText, selector, hostSelector);
      };
      ShadowCss.prototype._insertDirectives = function(cssText) {
        cssText = this._insertPolyfillDirectivesInCssText(cssText);
        return this._insertPolyfillRulesInCssText(cssText);
      };
      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
          return m[1] + '{';
        });
      };
      ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
          var rule = m[0];
          rule = lang_1.StringWrapper.replace(rule, m[1], '');
          rule = lang_1.StringWrapper.replace(rule, m[2], '');
          return m[3] + rule;
        });
      };
      ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
        var _this = this;
        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
        cssText = this._insertPolyfillHostInCssText(cssText);
        cssText = this._convertColonHost(cssText);
        cssText = this._convertColonHostContext(cssText);
        cssText = this._convertShadowDOMSelectors(cssText);
        if (lang_1.isPresent(scopeSelector)) {
          _withCssRules(cssText, function(rules) {
            cssText = _this._scopeRules(rules, scopeSelector, hostSelector);
          });
        }
        cssText = cssText + '\n' + unscoped;
        return cssText.trim();
      };
      ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
        var r = '',
            m;
        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
          var rule = m[0];
          rule = lang_1.StringWrapper.replace(rule, m[2], '');
          rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
          r += rule + '\n\n';
        }
        return r;
      };
      ShadowCss.prototype._convertColonHost = function(cssText) {
        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
      };
      ShadowCss.prototype._convertColonHostContext = function(cssText) {
        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
      };
      ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
          if (lang_1.isPresent(m[2])) {
            var parts = m[2].split(','),
                r = [];
            for (var i = 0; i < parts.length; i++) {
              var p = parts[i];
              if (lang_1.isBlank(p))
                break;
              p = p.trim();
              r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
            }
            return r.join(',');
          } else {
            return _polyfillHostNoCombinator + m[3];
          }
        });
      };
      ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
          return this._colonHostPartReplacer(host, part, suffix);
        } else {
          return host + part + suffix + ', ' + part + ' ' + host + suffix;
        }
      };
      ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
      };
      ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
          cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
        }
        return cssText;
      };
      ShadowCss.prototype._scopeRules = function(cssRules, scopeSelector, hostSelector) {
        var cssText = '';
        if (lang_1.isPresent(cssRules)) {
          for (var i = 0; i < cssRules.length; i++) {
            var rule = cssRules[i];
            if (dom_adapter_1.DOM.isStyleRule(rule) || dom_adapter_1.DOM.isPageRule(rule)) {
              cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) + ' {\n';
              cssText += this._propertiesFromRule(rule) + '\n}\n\n';
            } else if (dom_adapter_1.DOM.isMediaRule(rule)) {
              cssText += '@media ' + rule.media.mediaText + ' {\n';
              cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
              cssText += '\n}\n\n';
            } else {
              try {
                if (lang_1.isPresent(rule.cssText)) {
                  cssText += rule.cssText + '\n\n';
                }
              } catch (x) {
                if (dom_adapter_1.DOM.isKeyframesRule(rule) && lang_1.isPresent(rule.cssRules)) {
                  cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
                }
              }
            }
          }
        }
        return cssText;
      };
      ShadowCss.prototype._ieSafeCssTextFromKeyFrameRule = function(rule) {
        var cssText = '@keyframes ' + rule.name + ' {';
        for (var i = 0; i < rule.cssRules.length; i++) {
          var r = rule.cssRules[i];
          cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
        }
        cssText += ' }';
        return cssText;
      };
      ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
        var r = [],
            parts = selector.split(',');
        for (var i = 0; i < parts.length; i++) {
          var p = parts[i];
          p = p.trim();
          if (this._selectorNeedsScoping(p, scopeSelector)) {
            p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(p, scopeSelector) : this._applySelectorScope(p, scopeSelector, hostSelector);
          }
          r.push(p);
        }
        return r.join(', ');
      };
      ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
        var re = this._makeScopeMatcher(scopeSelector);
        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
      };
      ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
        var lre = /\[/g;
        var rre = /\]/g;
        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
      };
      ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
      };
      ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
          var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
          selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
          return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
        } else {
          return scopeSelector + ' ' + selector;
        }
      };
      ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector) {
        var isRe = /\[is=([^\]]*)\]/g;
        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function(m) {
          return m[1];
        });
        var splits = [' ', '>', '+', '~'],
            scoped = selector,
            attrName = '[' + scopeSelector + ']';
        for (var i = 0; i < splits.length; i++) {
          var sep = splits[i];
          var parts = scoped.split(sep);
          scoped = collection_1.ListWrapper.map(parts, function(p) {
            var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
            if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) && !lang_1.StringWrapper.contains(t, attrName)) {
              var re = /([^:]*)(:*)(.*)/g;
              var m = lang_1.RegExpWrapper.firstMatch(re, t);
              if (lang_1.isPresent(m)) {
                p = m[1] + attrName + m[2] + m[3];
              }
            }
            return p;
          }).join(sep);
        }
        return scoped;
      };
      ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
        return selector;
      };
      ShadowCss.prototype._propertiesFromRule = function(rule) {
        var cssText = rule.style.cssText;
        var attrRe = /['"]+|attr/g;
        if (rule.style.content.length > 0 && !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
          var contentRe = /content:[^;]*;/g;
          cssText = lang_1.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
        }
        return cssText;
      };
      return ShadowCss;
    })();
    exports.ShadowCss = ShadowCss;
    var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
    var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
    var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
    var _polyfillHost = '-shadowcsshost';
    var _polyfillHostContext = '-shadowcsscontext';
    var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
    var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
    var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
    var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
    var _shadowDOMSelectorsRe = [/>>>/g, /::shadow/g, /::content/g, /\/deep\//g, /\/shadow-deep\//g, /\/shadow\//g];
    var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
    var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
    var _colonHostRe = /:host/gim;
    var _colonHostContextRe = /:host-context/gim;
    function _cssToRules(cssText) {
      return dom_adapter_1.DOM.cssToRules(cssText);
    }
    function _withCssRules(cssText, callback) {
      if (lang_1.isBlank(callback))
        return;
      var rules = _cssToRules(cssText);
      callback(rules);
    }
  })(require("github:jspm/nodelibs-process@0.1.1.js"));
  global.define = __define;
  return module.exports;
});

//# sourceMappingURL=build.js.map